<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Latex的一些小技巧</title>
    <link href="/2025/03/07/Latex%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2025/03/07/Latex%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Latex的一些小技巧"><a href="#Latex的一些小技巧" class="headerlink" title="Latex的一些小技巧"></a>Latex的一些小技巧</h1><p>Latex在长论文排版时真的非常好用，学到了一些小技巧，下做简记。</p><h2 id="1-图片浮动问题"><a href="#1-图片浮动问题" class="headerlink" title="1. 图片浮动问题"></a>1. 图片浮动问题</h2><p>因为Latex是自动计算图片位置的，因此会出现图片位置大混乱的情况。有两个办法可以对这种情况进行调整。</p><p><strong>建议：整体论文定稿之后再进行图片位置或者大小调整。</strong></p><h3 id="1-1-使用H强制图片插入在当前位置"><a href="#1-1-使用H强制图片插入在当前位置" class="headerlink" title="1.1 使用H强制图片插入在当前位置"></a>1.1 使用<code>H</code>强制图片插入在当前位置</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Latex"><span class="hljs-keyword">\begin</span>&#123;figure&#125;[H]<br>    <span class="hljs-keyword">\centering</span><br>    <span class="hljs-keyword">\includegraphics</span>[width=1<span class="hljs-keyword">\textwidth</span>]&#123;fig/yourfigure.png&#125;<br>    <span class="hljs-keyword">\caption</span>&#123;图片&#125;<br>    <span class="hljs-keyword">\label</span>&#123;fig:2&#125;<br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br></code></pre></td></tr></table></figure><ul><li><p>位置参数：</p><ul><li>h：here，此刻的位置</li><li>t：top，置顶</li><li>b：buttom，置底</li><li>H：强制处于当前位置</li></ul></li><li><p>宽度参数：</p><ul><li><code>width=1\textwidth</code>：宽度按照页面文字宽度的比例渲染，<code>0.5\textwidth</code>小数也是支持的🆗</li><li><code>\label&#123;fig:2&#125;</code>：图片的引用路径，在正文使用<code>~\ref&#123;fig:2&#125;</code>进行引用，会自动进行正文的图注链接插入和图目录生成</li></ul></li></ul><h3 id="1-2-直接在图片后面新起一页"><a href="#1-2-直接在图片后面新起一页" class="headerlink" title="1.2 直接在图片后面新起一页"></a>1.2 直接在图片后面新起一页</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Latex"><span class="hljs-keyword">\begin</span>&#123;figure&#125;[H]<br>    <span class="hljs-keyword">\centering</span><br>    <span class="hljs-keyword">\includegraphics</span>[width=1<span class="hljs-keyword">\textwidth</span>]&#123;fig/yourfigure.png&#125;<br>    <span class="hljs-keyword">\caption</span>&#123;图片&#125;<br>    <span class="hljs-keyword">\label</span>&#123;fig:2&#125;<br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br><br><span class="hljs-keyword">\newpage</span><br></code></pre></td></tr></table></figure><p>使用<code>\newpage</code>指令，这样至少不会和下一章的内容混在一起。</p><h2 id="2-表格插入问题"><a href="#2-表格插入问题" class="headerlink" title="2. 表格插入问题"></a>2. 表格插入问题</h2><h3 id="2-1-快速构建表格"><a href="#2-1-快速构建表格" class="headerlink" title="2.1 快速构建表格"></a>2.1 快速构建表格</h3><p>万能的GPT给的网址：<a href="https://www.tablesgenerator.com/">Tablesgenerator</a></p><p>可视化的表格编辑，真的很方便</p><ul><li>支持直接黏贴数据</li><li>支持CSV导入</li><li>支持Latex代码导入和导出生成</li></ul><h3 id="2-2-行内数据换行"><a href="#2-2-行内数据换行" class="headerlink" title="2.2 行内数据换行"></a>2.2 行内数据换行</h3><p>可以使用<code>\\</code>和<code>\newline</code>，两种命令。</p><p>位置参数、宽度参数和引用的使用同第一节图片插入。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Latex"><span class="hljs-keyword">\begin</span>&#123;table&#125;[htp]<br><span class="hljs-keyword">\centering</span> <span class="hljs-comment">% 表格居中</span><br>    <span class="hljs-comment">% \resizebox&#123;1\textwidth&#125; % 设置表格缩放</span><br><span class="hljs-keyword">\vspace</span>&#123;5pt&#125; <span class="hljs-comment">% 大括号内设置表格与正文之间的间距</span><br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;p&#123;0.9<span class="hljs-keyword">\textwidth</span>&#125;&#125;<br>            <span class="hljs-keyword">\hline</span><br>            <span class="hljs-keyword">\textbf</span>&#123;列标题&#125; <span class="hljs-keyword">\\</span><br>            <span class="hljs-keyword">\hline</span><br>            First <span class="hljs-keyword">\newline</span> Second<span class="hljs-keyword">\\</span><br>            <span class="hljs-keyword">\hline</span><br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>        <span class="hljs-keyword">\caption</span>&#123;表格&#125; <span class="hljs-comment">% 大括号内定义图片标题</span><br>        <span class="hljs-keyword">\label</span>&#123;tab:1&#125; <span class="hljs-comment">% 大括号内定义图片标签，用于正文引用</span><br><span class="hljs-keyword">\end</span>&#123;table&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-标题与内容的行距调整"><a href="#2-3-标题与内容的行距调整" class="headerlink" title="2.3 标题与内容的行距调整"></a>2.3 标题与内容的行距调整</h3><p>在表格代码前插入<code>\renewcommand&#123;\arraystretch&#125;&#123;1.5&#125;</code>，这行命令将表格行与行间距扩大到原先的1.5倍。</p><div class="note note-info">            <p>值得注意的是：使用<code>\\</code>命令进行行内换行的时候，会受到<code>\renewcommand{\arraystretch}{1.5}</code>命令的影响，因此行内换行的间距也会变大，而使用<code>\newline</code>则不会。</p>          </div><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Latex"><span class="hljs-keyword">\renewcommand</span>&#123;<span class="hljs-keyword">\arraystretch</span>&#125;&#123;1.5&#125;<br><span class="hljs-keyword">\begin</span>&#123;table&#125;[htp]<br><span class="hljs-keyword">\centering</span> <span class="hljs-comment">% 表格居中</span><br>    <span class="hljs-comment">% \resizebox&#123;1\textwidth&#125; % 设置表格缩放</span><br><span class="hljs-keyword">\vspace</span>&#123;5pt&#125; <span class="hljs-comment">% 大括号内设置表格与正文之间的间距</span><br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;p&#123;0.9<span class="hljs-keyword">\textwidth</span>&#125;&#125;<br>            <span class="hljs-keyword">\hline</span><br>            <span class="hljs-keyword">\textbf</span>&#123;列标题&#125; <span class="hljs-keyword">\\</span><br>            <span class="hljs-keyword">\hline</span><br>          First <span class="hljs-keyword">\newline</span> Second<span class="hljs-keyword">\\</span><br>          <span class="hljs-keyword">\hline</span><br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>        <span class="hljs-keyword">\caption</span>&#123;表格&#125; <span class="hljs-comment">% 大括号内定义图片标题</span><br>        <span class="hljs-keyword">\label</span>&#123;tab:1&#125; <span class="hljs-comment">% 大括号内定义图片标签，用于正文引用</span><br><span class="hljs-keyword">\end</span>&#123;table&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-论文渲染版本控制"><a href="#3-论文渲染版本控制" class="headerlink" title="3. 论文渲染版本控制"></a>3. 论文渲染版本控制</h2><blockquote><p>这段内容是从Overleaf上的华师大硕/博论文模板中复制📋到的。由于我一开始使用了导师提供的模板，但很眼馋这个模板的功能，因此将这个功能融合到自己的模板里，此处做一个学习记录。</p></blockquote><div class="note note-info">            <p><strong>主要功能：为了实现提交不同用处（盲审/学术不端检测/终稿）的论文时，可以快速渲染出符合要求的论文内容，不用手动去每个地方做修改。</strong></p><p><em>论文要修改非常多版本，每次都手动修改太麻烦，也非常容易出错。</em></p>          </div><h3 id="3-1-定义相关变量"><a href="#3-1-定义相关变量" class="headerlink" title="3.1 定义相关变量"></a>3.1 定义相关变量</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Latex"><span class="hljs-keyword">\def</span> <span class="hljs-keyword">\docstyle</span> &#123;normal&#125; <span class="hljs-comment">% normal,tmlc,anonymous</span><br><br><span class="hljs-keyword">\def</span> <span class="hljs-keyword">\dd</span> &#123;anonymous&#125;<br><span class="hljs-keyword">\def</span> <span class="hljs-keyword">\de</span> &#123;tmlc&#125;<br><span class="hljs-keyword">\newif</span><span class="hljs-keyword">\ifnotanonymous</span><span class="hljs-keyword">\notanonymoustrue</span> <span class="hljs-comment">%定义是否开启盲审，默认不开启</span><br><span class="hljs-keyword">\newif</span><span class="hljs-keyword">\iftmlc</span><br></code></pre></td></tr></table></figure><ul><li><code>\docstyle</code>：文档类型的控制变量</li><li><code>\dd</code>：字符串变量，用于判断是否是<code>anonymous</code>类型的变量（控制判断的逻辑分支）</li><li><code>\de</code>：字符串变量，用于判断是否是<code>tmlc</code>类型的变量（控制判断的逻辑分支）</li><li><code>\ifnotanonymous</code>：布尔值变量，<code>\notanonymoustrue</code>默认为<code>true</code></li><li><code>\iftmlc</code>：布尔值变量，未定义初值，默认为<code>false</code></li></ul><h3 id="3-2-判断文档类型（修改控制变量）"><a href="#3-2-判断文档类型（修改控制变量）" class="headerlink" title="3.2 判断文档类型（修改控制变量）"></a>3.2 判断文档类型（修改控制变量）</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Latex"><span class="hljs-keyword">\ifx</span> <span class="hljs-keyword">\docstyle</span> <span class="hljs-keyword">\dd</span><br>    <span class="hljs-keyword">\notanonymousfalse</span> <span class="hljs-comment">% 开启该行则为盲审版本，注释该行则为非盲审版本（即查重或终稿版本）</span><br><span class="hljs-keyword">\else</span><br>    <span class="hljs-keyword">\ifx</span> <span class="hljs-keyword">\docstyle</span> <span class="hljs-keyword">\de</span><br>        <span class="hljs-keyword">\tmlctrue</span> <span class="hljs-comment">% 开启该行则为查重版本，注释该行则为终稿版本（仅在上一行在注释状态下有效）</span><br>    <span class="hljs-keyword">\fi</span><br><span class="hljs-keyword">\fi</span><br></code></pre></td></tr></table></figure><p>本段逻辑（伪代码）:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">if</span> <span class="hljs-string">\docstyle</span> == <span class="hljs-string">\dd(anonymous):</span><br>    <span class="hljs-string">\notanonymous</span> = <span class="hljs-literal">false</span><br>else:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">\docstyle</span> == <span class="hljs-string">\de(tmlc):</span><br>        <span class="hljs-string">\tmlc</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="3-3-控制页面渲染"><a href="#3-3-控制页面渲染" class="headerlink" title="3.3 控制页面渲染"></a>3.3 控制页面渲染</h3><ul><li>盲审：原创性✅，名单❌，隐藏致谢</li><li>学术不端检测：原创性❌，名单❌，致谢❌</li><li>终稿：都要</li></ul><h4 id="3-3-1-控制页面"><a href="#3-3-1-控制页面" class="headerlink" title="3.3.1 控制页面"></a>3.3.1 控制页面</h4><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Latex"><span class="hljs-keyword">\ifnotanonymous</span> <span class="hljs-comment">%非盲审，也就是查重版，不显示原创性+名单；终版全要</span><br>    <span class="hljs-keyword">\iftmlc</span><br>    <span class="hljs-keyword">\else</span><br>        <span class="hljs-keyword">\input</span> A3-COPYRIGHT.tex  <span class="hljs-comment">%注释掉部分</span><br>        <span class="hljs-keyword">\cleardoublepage</span><br>        <span class="hljs-keyword">\input</span> A4-MEMBERLIST.tex <span class="hljs-comment">%注释掉部分</span><br>        <span class="hljs-keyword">\cleardoublepage</span><br>    <span class="hljs-keyword">\fi</span><br><span class="hljs-keyword">\else</span> <span class="hljs-comment">%盲审仅显示原创性，不要名单</span><br>    <span class="hljs-keyword">\input</span> A3-COPYRIGHT.tex  <span class="hljs-comment">%注释掉部分</span><br>    <span class="hljs-keyword">\cleardoublepage</span> <span class="hljs-comment">%查重不显示</span><br><span class="hljs-keyword">\fi</span><br><br><span class="hljs-comment">%%%%%</span><br><span class="hljs-comment">%中间省略</span><br><span class="hljs-comment">%%%%%</span><br><br><span class="hljs-keyword">\ifnotanonymous</span> <span class="hljs-comment">%非盲审，查重：不要致谢，终稿要</span><br>    <span class="hljs-keyword">\iftmlc</span><br>    <span class="hljs-keyword">\else</span><br>        <span class="hljs-keyword">\phantomsection</span><br>        <span class="hljs-keyword">\input</span> D2-ACHNOWLEDGEMENT.tex<br>        <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;chapter&#125;&#123;致谢&#125;<br>        <span class="hljs-keyword">\cleardoublepage</span> <span class="hljs-comment">%查重不显示</span><br>    <span class="hljs-keyword">\fi</span><br><span class="hljs-keyword">\else</span> <span class="hljs-comment">%盲审，需要短的致谢</span><br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\input</span> D2-ACHNOWLEDGEMENT-TMLC.tex<br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;chapter&#125;&#123;致谢&#125;<br>    <span class="hljs-keyword">\cleardoublepage</span><br><span class="hljs-keyword">\fi</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-控制页面内部内容渲染"><a href="#3-3-2-控制页面内部内容渲染" class="headerlink" title="3.3.2 控制页面内部内容渲染"></a>3.3.2 控制页面内部内容渲染</h4><p>使用下述语句控制名字和敏感信息的隐藏（只有匿名稿需要隐藏）</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Latex"><span class="hljs-keyword">\ifnotanonymous</span> Your Name <span class="hljs-keyword">\else</span> *** <span class="hljs-keyword">\fi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在WIN10环境搭建内网穿透远程桌面的过程记录</title>
    <link href="/2025/01/22/%E5%9C%A8WIN10%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/01/22/%E5%9C%A8WIN10%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>由于近期事情比较多，需要远程桌面使用家里电脑的需求大大增加。</p><p>同等配置的云服务器真的相当贵，贵爆了(* ￣︿￣)。</p><p>平时一直是使用<code>ToDesk</code>进行连接的，然而由于我长时间远程写代码，居然在月中就把免费额度用超了（120H/month），会员24块连续包月。</p><p>好吧╮(╯-╰)╭，研究开源社区的动力来源于平时一直 <del>白嫖</del> 使用的软件要收费了。</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><em>中间经历了熬夜进行技术选型（因为看Chiikawa看到半夜12点才开始干正事）</em></p><p>想实现远程家里电脑的办法有非常多，问GPT得到的结果就有很多，下做简记。</p><h4 id="1-端口转发"><a href="#1-端口转发" class="headerlink" title="1. 端口转发"></a>1. 端口转发</h4><p>通过在公网服务器上配置端口转发，将访问公网服务器的特定端口请求转发到内网主机上。</p><p><strong>步骤</strong>：</p><ol><li><p>在公网服务器上设置端口转发，将来自外部的流量（比如80端口，或者其他任意端口）转发到内网主机的相应端口（如8080）。</p></li><li><p>配置防火墙允许端口转发。</p></li><li><p>需要公网服务器的IP地址和端口号，在其他公网电脑上进行访问。</p></li></ol><p><strong>优点</strong>：</p><ul><li>简单易用，适合没有公网IP的内网主机。</li></ul><p><strong>缺点</strong>：</p><ul><li>内网主机需要进行端口映射，并且有可能会暴露某些服务，存在一定的安全风险。</li></ul><h4 id="2-VPN虚拟专用网络"><a href="#2-VPN虚拟专用网络" class="headerlink" title="2. VPN虚拟专用网络"></a>2. VPN虚拟专用网络</h4><p>使用VPN技术将公网服务器与内网主机连接在一起，允许其他电脑通过VPN进入到内网，并访问内网主机。</p><p><strong>步骤</strong>：</p><ol><li><p>在公网服务器上配置VPN服务器（如使用OpenVPN、Windows自带的VPN功能等）。</p></li><li><p>让内网主机和其他公网电脑连接到该VPN网络。</p></li><li><p>通过VPN连接后，公网电脑就能像直接在内网一样访问内网主机。</p></li></ol><p><strong>优点</strong>：</p><ul><li>安全性较高，所有流量经过加密。</li></ul><p><strong>缺点</strong>：</p><ul><li>配置稍微复杂，需要一定的网络知识。</li></ul><h4 id="3-反向代理（Reverse-Proxy）"><a href="#3-反向代理（Reverse-Proxy）" class="headerlink" title="3. 反向代理（Reverse Proxy）"></a>3. 反向代理（Reverse Proxy）</h4><p>使用公网服务器作为反向代理，将其他公网电脑的请求转发到内网主机。</p><p><strong>步骤</strong>：</p><ol><li>在公网服务器上配置反向代理软件（如Nginx、Apache等）。</li><li>将外部请求转发到内网主机的特定端口。</li><li>在外部访问公网服务器时，代理会将请求转发给内网主机。</li></ol><p><strong>优点</strong>：</p><ul><li>不需要直接暴露内网主机的IP地址。</li><li>可以集成安全措施，如SSL证书。</li></ul><p><strong>缺点</strong>：</p><ul><li>需要一定的配置和维护。</li></ul><h4 id="4-SSH隧道"><a href="#4-SSH隧道" class="headerlink" title="4. SSH隧道"></a>4. SSH隧道</h4><p>通过SSH隧道在公网服务器和内网主机之间建立安全通道。</p><p><strong>步骤</strong>：</p><ol><li>在公网服务器上配置SSH服务。</li><li>使用SSH隧道将公网服务器和内网主机连接起来。你可以在外部通过SSH隧道访问内网主机的服务。</li><li>通过SSH隧道进行端口转发。</li></ol><p><strong>优点</strong>：</p><ul><li>安全性较高，数据传输经过加密。</li></ul><p><strong>缺点</strong>：</p><ul><li>配置稍微复杂，需要对SSH有一定了解。</li></ul><h4 id="5-零信任网络（Zero-Trust-Network）"><a href="#5-零信任网络（Zero-Trust-Network）" class="headerlink" title="5. 零信任网络（Zero Trust Network）"></a>5. 零信任网络（Zero Trust Network）</h4><p>使用零信任网络架构（如Cloudflare Tunnel、Tailscale等）来连接内网主机和公网服务。</p><p><strong>步骤</strong>：</p><ol><li>在内网主机上安装相关的零信任网络工具（如Tailscale）。</li><li>配置公网服务器和其他公网电脑进行连接。</li></ol><p><strong>优点</strong>：</p><ul><li>高安全性，适用于现代网络环境。</li><li>免去传统VPN配置复杂性。</li></ul><p><strong>缺点</strong>：</p><ul><li>需要依赖外部服务或工具，可能涉及到额外费用。</li></ul><h4 id="最后选择"><a href="#最后选择" class="headerlink" title="最后选择"></a>最后选择</h4><p>一开始看中的是<code>零信任网络（Zero Trust Network）</code>，然而发现这些架构都是服务器在国外的，国内环境稳定性肯定会受到影响。</p><p>后来选择研究<code>SSH隧道</code>，但和端口转发一样，端口暴露在公网上就有被hack的风险，我对自己的网络安全知识还没这么自信。</p><p>使用<code>SSH隧道</code>进行内网穿透有篇文章可以参考：<a href="https://zhuanlan.zhihu.com/p/679213737">ssh隧道-内网穿透-转发RDP端口-安全的实现Ipad远程桌面windows</a></p><p>最后决定还是使用<code>VPN虚拟专用网络</code>（因为真的不太懂网络安全这方面的知识）。</p><h2 id="1-搭建虚拟网络"><a href="#1-搭建虚拟网络" class="headerlink" title="1 搭建虚拟网络"></a>1 搭建虚拟网络</h2><p>搭建虚拟网络的方法也有很多，比如<code>WireGuard</code>、<code>ZeroTier</code>(国外服务器)、<code>openp2p</code>。</p><p>在B站冲浪时，看到一个国产工具，叫做<code>皎月连</code>，类似于和上述的<code>ZeroTier</code>和<code>openp2p</code>原理类似，因此做了简单尝试。</p><div class="note note-info">            <p>官网地址：<a href="https://www.natpierce.cn/">皎月连官网</a></p><p>官网文档：<a href="https://www.natpierce.cn/pc/infolist/index.html">皎月连官方文档</a></p><p>组网方法按照官方文档配置十分简单。</p>          </div><h2 id="2-WIN10家庭版远程桌面补丁"><a href="#2-WIN10家庭版远程桌面补丁" class="headerlink" title="2 WIN10家庭版远程桌面补丁"></a>2 WIN10家庭版远程桌面补丁</h2><p>WIN10家庭版只支持远程协助，并不支持远程桌面。</p><h3 id="尝试一：HEU-KMS-Activator"><a href="#尝试一：HEU-KMS-Activator" class="headerlink" title="尝试一：HEU_KMS_Activator"></a>尝试一：<code>HEU_KMS_Activator</code></h3><blockquote><p>Github地址：<a href="https://github.com/zbezj/HEU_KMS_Activator">HEU_KMS_Activator</a></p></blockquote><p><code>HEU_KMS_Activator</code>是大佬开发的Windows破解软件。</p><p>然而我的电脑系统版本貌似是刻录在启动芯片里了，并不支持修改系统版本。</p><h3 id="尝试二：RDPWrap"><a href="#尝试二：RDPWrap" class="headerlink" title="尝试二：RDPWrap"></a>尝试二：<code>RDPWrap</code></h3><blockquote><p>Github地址：<a href="https://github.com/stascorp/rdpwrap">RDPWrap</a></p></blockquote><p><code>RDPWrap</code>是大佬开发的，给Windows系统加远程桌面补丁的程序。</p><p>配置教程参考：<a href="https://blog.csdn.net/weixin_44786530/article/details/137919431">CSDN</a></p><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><ol><li>下载Release内文件并解压。<em>(这步浏览器会进行拦截，坚持下载即可)</em></li><li>以管理员身份运行<code>install.bat</code></li><li>以管理员身份运行<code>RDPConf.exe</code></li></ol><h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><p>按照上述步骤安装后，出现<code>Not Listening</code>的错误。</p><p><img src="\img\img_in_posts\在WIN10环境搭建内网穿透远程桌面的过程记录\2.png" alt="报错"></p><blockquote><p>接下来的解决方案全是Copy下面大佬的，此处仅做记录。大佬文档：<a href="https://blog.csdn.net/NXY666/article/details/121152969">CSDN</a></p></blockquote><p><strong>报错原因：</strong></p><p>由于 RDP Wrapper 多年未更新，自带的配置文件不支持新版本的远程桌面服务。因此我们只需更新配置文件即可。</p><p><strong>解决方法</strong></p><ul><li>新建一个<code>bat</code>文件并输入以下内容：</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off &amp; <span class="hljs-built_in">title</span> 更新RDPWrap.ini<br> <br><span class="hljs-built_in">set</span> INI_Path=&quot;C:\Program Files\RDP Wrapper\rdpwrap.ini&quot;<br><span class="hljs-built_in">set</span> INI_Dir=&quot;C:\Program Files\RDP Wrapper&quot;<br> <br>::检查权限<br><span class="hljs-built_in">setlocal</span> enabledelayedexpansion&gt;<span class="hljs-built_in">nul</span><br><span class="hljs-built_in">net</span> session&gt;<span class="hljs-built_in">nul</span><br><span class="hljs-keyword">if</span> <span class="hljs-variable">!ERRORLEVEL!</span> <span class="hljs-keyword">EQU</span> <span class="hljs-number">2</span> (<br><span class="hljs-built_in">set</span> &quot;args=!args: =&quot;^&amp;chr^(<span class="hljs-number">32</span>^)^&amp;&quot;%!&quot;<br><br><span class="hljs-built_in">set</span> &quot;args=&quot;/C&quot;&amp;chr(<span class="hljs-number">32</span>)&amp;chr(<span class="hljs-number">34</span>)&amp;chr(<span class="hljs-number">94</span>)&amp;chr(<span class="hljs-number">34</span>)&amp;&quot;%~f0&quot;&quot;<br>mshta &quot;vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;<span class="hljs-built_in">cmd</span>.exe&quot;, <span class="hljs-variable">!args!</span>, NULL, &quot;runas&quot;, NULL)(window.close)&quot;&amp;&amp;<span class="hljs-keyword">exit</span><br>)<br> <br><span class="hljs-built_in">echo</span>.正在停止远程桌面服务……<br><span class="hljs-built_in">echo</span> Y | <span class="hljs-built_in">net</span> stop UmRdpService<br><span class="hljs-built_in">echo</span> Y | <span class="hljs-built_in">net</span> stop TermService<br> <br>::删除旧配置文件<br>:DeleteFile<br><span class="hljs-built_in">del</span> <span class="hljs-variable">%INI_Path%</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> <span class="hljs-variable">%INI_Path%</span> (<br><span class="hljs-built_in">echo</span>.文件 <span class="hljs-variable">%INI_Path%</span> 仍被占用，请手动关闭占用该文件的程序。<br><span class="hljs-built_in">start</span> &quot;&quot; <span class="hljs-variable">%INI_Dir%</span><br><span class="hljs-built_in">pause</span><br><span class="hljs-keyword">goto</span> :DeleteFile<br>)<br> <br><span class="hljs-built_in">echo</span>.正在下载配置文件……<br>curl &quot;https://raw.gitmirror.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini&quot;&gt;<span class="hljs-variable">%INI_Path%</span><br> <br><span class="hljs-built_in">echo</span>.正在重启远程桌面服务……<br><span class="hljs-function">C:\<span class="hljs-title">WINDOWS</span>\<span class="hljs-title">System32</span>\<span class="hljs-title">svchost.exe</span> -<span class="hljs-title">k</span> <span class="hljs-title">NetworkService</span></span><br><span class="hljs-function"><span class="hljs-title">net</span> <span class="hljs-title">start</span> <span class="hljs-title">TermService</span></span><br><span class="hljs-function"> </span><br><span class="hljs-function"><span class="hljs-title">echo</span>.更新完成！按任意键以结束。</span><br><span class="hljs-function"><span class="hljs-title">pause</span>&gt;<span class="hljs-title">nul</span></span><br></code></pre></td></tr></table></figure><ul><li>保存文件并双击运行，运行完成后按任意键结束。</li></ul><p>注：若脚本运行时出现中文乱码，请将文件保存为 ASCII 编码。因涉及服务停止和启动，运行途中可能会提示需要管理员权限，请务必授权。若你不知道如何授权，可以通过使用鼠标右键点击文件，选择“以管理员身份运行”直接以管理员身份启动。</p><ul><li>此时我们可以看到，Listener state 已变更为 Listening [fully supported] 。<br><img src="\img\img_in_posts\在WIN10环境搭建内网穿透远程桌面的过程记录\1.png" alt="成功运行"></li></ul><blockquote><p>配置完上述内容…远程桌面已经准备就绪。(*^▽^*)</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在WIN10环境安装MySqlClient的一些问题</title>
    <link href="/2024/12/26/%E5%9C%A8WIN10%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85MySqlClient%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/26/%E5%9C%A8WIN10%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85MySqlClient%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近正在搭建毕业设计的后端系统，使用FastAPI对接MySql数据库，FastAPI框架依赖MySqlClient包，然而由于使用了conda虚拟环境，因此在安装这个依赖时走了不少弯路，简以记录。</p><h2 id="1-使用conda-install直接安装"><a href="#1-使用conda-install直接安装" class="headerlink" title="1 使用conda install直接安装"></a>1 使用<code>conda install</code>直接安装</h2><p>报错：在仓库中找不到可用版本。进入PYPI官网查询Python3.8+Win64对应可以使用的版本。<br><img src="/img/img_in_posts/InstallMySqlClientInWin10/1.png" alt="Pypi"></p><p>进入Conda官网搜索，也显示有2以上版本的包。<br><img src="/img/img_in_posts/InstallMySqlClientInWin10/2.png" alt="Conda"></p><p>使用指令进行指定版本下载，报错：找不到该版本的包。</p><p>无论是国内镜像还是国外官网都找不到，<code>conda search</code>也显示没有该版本，最高版本到<code>1.3.14</code>。</p><p>不死心，进入仓库直接搜索，确实是最高版本到<code>1.3.14</code>，死心了。</p><h2 id="2-使用压缩包文件直接安装"><a href="#2-使用压缩包文件直接安装" class="headerlink" title="2 使用压缩包文件直接安装"></a>2 使用压缩包文件直接安装</h2><p>步骤如下：</p><ol><li><p>去官网下载对应版本的压缩包<br><img src="/img/img_in_posts/InstallMySqlClientInWin10/3.png" alt="zip"></p></li><li><p>解压对应压缩包</p></li><li><p>cd进入解压文件夹，使用指令安装</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python setup.py install<br></code></pre></td></tr></table></figure><p>但是MySqlClient底层使用C++编写，报错：需要对应版本的C++编译环境。</p><blockquote><p><em>到此处，可以选择安装C++编译环境解决，但我觉得再配一个环境有点麻烦。</em></p></blockquote><h2 id="3-使用预编译版本的轮子"><a href="#3-使用预编译版本的轮子" class="headerlink" title="3 使用预编译版本的轮子"></a>3 使用预编译版本的轮子</h2><p><em>弯路一：分不清轮子的命名和版本</em></p><p>学习<a href="https://blog.csdn.net/weixin_49114503/article/details/139326651">博客</a></p><p>轮子文件的命名规则：<code>&#123;distribution&#125;-&#123;version&#125;(-&#123;build tag&#125;)? -&#123;python tag&#125;-&#123;abi tag&#125;-&#123;platform tag&#125;.whl</code></p><p>回到PYPI官网：</p><p><img src="/img/img_in_posts/InstallMySqlClientInWin10/4.png" alt="PYPI-MySqlClient-1"></p><p>可以看到有两个满足Python3.8版本的包。</p><p><em>弯路二：找不到预编译版本</em></p><p>下载第一个版本的包，依旧会提示无法安装，因为一个轮子未进行C++预编译。</p><p><em>此处求助了万能的GPT，给了<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">某大学的网址</a>，但网址已移动</em></p><h2 id="4-解决"><a href="#4-解决" class="headerlink" title="4 解决"></a>4 解决</h2><p>其实，这里下载第二个预编译的包就可以解决问题了，前面的<code>c</code>就是<code>&#123;build tag&#125;</code></p><p><img src="/img/img_in_posts/InstallMySqlClientInWin10/5.png" alt="PYPI-MySqlClient-2"></p><p>下载对应<code>.whl</code>文件，执行指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install path/to/example_package-1.0-py3-none-any.whl<br></code></pre></td></tr></table></figure><p>完成安装。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些规划</title>
    <link href="/2024/10/22/%E4%B8%80%E4%BA%9B%E8%A7%84%E5%88%92/"/>
    <url>/2024/10/22/%E4%B8%80%E4%BA%9B%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="一些规划"><a href="#一些规划" class="headerlink" title="一些规划"></a>一些规划</h1><p>由于最近零零散散的事情太多了，很多东西想记录归纳一下。</p><h2 id="学习方面（一）"><a href="#学习方面（一）" class="headerlink" title="学习方面（一）"></a>学习方面（一）</h2><p>目前明确的时间节点有以下几个：</p><ul><li><p>2024/11：参考博士同门，完成毕设系统设计部分，着手改良</p></li><li><p>2024/12：完成毕业设计的代码部分 + 英文小论文</p></li><li><p>2025/01：预备资格审查内容</p></li><li><p>2025/02：学术成果资格审查</p><p>  此处，分享一个很方便的Github项目：<a href="https://github.com/ccfddl/ccf-deadlines">ccf-ddl</a>（也是从同学那边学习到的），可以看到会议的距离截止日期的倒数时间，可以对会议进行分类检索和收藏，点进去还有官网链接等相关信息，还有微信小程序，让你时刻不忘你还有论文没写。</p><p>  再分享一个软著专利申请流程贴：<a href="https://blog.csdn.net/weixin_45940369/article/details/139352517">CSDN</a>，这是保底了，感谢提供链接的大佬同学</p></li><li><p>2025/03：着手完成大论文 + 送审</p></li></ul><h2 id="学习方面（二）"><a href="#学习方面（二）" class="headerlink" title="学习方面（二）"></a>学习方面（二）</h2><p>目前明确的时间节点有以下几个：</p><ul><li>2024/10/31：完成课程学习内容</li><li>2024/11/01-2025/11/30：真题演练</li></ul><p>每天两小时练习，其余的就是之后再说 + 看运气了⛽。</p><h2 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h2><p>最近最开心的事情就是我总算入手了一个属于自己的服务器🎉。在各类云解决方案里兜兜转转，发现还是需要一个服务器（而且搭建服务器比我想象的简单好多好多，感觉和傻瓜式也差不了多少）。</p><p>开发环境全部上云有很多好处：</p><ul><li>比codespace支持更大型的项目。</li><li>不同电脑之间，只需要浏览器或者远程桌面，就可以一键登录。</li><li>电脑本地没有开发环境，也无需配置开发环境，清爽舒适。</li><li>长时间任务可以脱机运行。</li><li>关闭窗口或者关闭浏览器，不留痕迹，保护隐私。</li></ul><p>有了自己的服务器可以考虑完成我之前画好久饼的图床或者其他好玩的东西，有时间就弄嘿(●ˇ∀ˇ●)</p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔（二）</title>
    <link href="/2024/10/15/%E9%9A%8F%E7%AC%94%E4%BA%8C/"/>
    <url>/2024/10/15/%E9%9A%8F%E7%AC%94%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>承接上文，最近的状态又发生了一些变化。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>回到公司之后，开始了与各位大领导频繁且密切的谈话（频繁☞隔几天就会与一名越过多级的大领导进行谈话），就谈话内容来看，传达的意思是：“在更正我自身问题的情况下，尽力在公司内部给我安排项目。”。</p><p>其中有三个不解，一是对领导如此安排和如此状态的不解，如果真心还需要我，为何会在8月底安排一个如此言辞激烈的人事面谈。同时，我对公司来说也不算什么很贵的人力成本，给我赔偿金对他们来说应该不算很贵。</p><p>其二是对公司目前现状的不解。我在面谈中给领导透露了我依旧想继续写代码的意愿，但也表达了可以转行去做前台工作。潜台词就是我不拘什么项目，只要不太加班我并不会有什么异议。但他们经历了接近一个月的谈话，也找不到合适的项目。与此同时，在全体邮件中发布了内推招聘PM的信息。（先不谈，在与领导谈话中，我做PM工作非常优秀的同期被批评没有“硬实力”的故事）。推测下来，一种可能是公司内部没有项目，但这与PM招聘信息矛盾，那么PM招聘信息就是一个幌子；另一种可能就是公司内部的项目都不要我，这又与公司内部与我谈话希望给我找项目相悖。总而言之，现在还是一个静待后续的状态。</p><p>其三是对我个人问题的不解，每次谈话都会提到我的个人问题，但每次的问题都不一致。包括但不限于：</p><p>（第一次面谈）</p><ul><li>你与同事的关系不好</li><li>你没有核心竞争力，项目没了你不会出问题</li><li>你把自己定位在技术能有什么成长，想写代码去乙方外包天天可以写</li><li>你的同期都已经升PM了，而你还在为自己的ASSIGN发愁(指没有项目)</li><li>你为什么不自己去公司内部找点项目做</li></ul><p>（第三次面谈）</p><ul><li>你项目不积极沟通</li></ul><p>（第四次面谈）</p><ul><li>你说话很硬（硬☞对别人的问题给出肯定的回复）别人听了不舒服</li><li>你没有女孩子的样子等</li></ul><p>其中第二次面谈的老板并未指出我的问题，在四次面谈中也经历过试图套话和找寻我项目中的严重错误等一系列情况，这也与第二个不解的第二种猜测相互印证，其实这个已经离职的某位老板给我解释过：“他们不会承认他们的问题，所以只能是你的问题。”</p><p>综上述不解，我依旧对本人在这家公司发展持悲观态度。</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>学习任务的数量是指数型上升的趋势。日历安排已经满满当当，一般人来约我周末，那是绝对不会有时间。我也是第一次看到我的日程可以满到这种程度，甚至觉得每天觉得在公司不能用自己电脑的时候就是我的休息时间。</p><p>目前，除了埋头干，也在寻找优化自己休息和学习效率的方法，若是有找寻到方法再后续记录。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前重心必须从工作转移到学习上，已为自己明年准备好了两个规划。希望今年能够做好相应的准备，明年能顺利实施。</p><p><strong>循此苦旅 以达天际</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔（一）</title>
    <link href="/2024/09/20/%E9%9A%8F%E7%AC%94%E4%B8%80/"/>
    <url>/2024/09/20/%E9%9A%8F%E7%AC%94%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>微博有字数限制，这里可能是我唯一的可以脱离人群抒发心情的小天地。随着休假结束马上要回到公司上班，我的状态也逐渐不美丽了起来。所以想写篇随笔记录近况、平复心情。</p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>之前看星座解析，其中说7-8月那阵是狮子座水逆，9月可以说是狮子座之前做的很多事情的<del>报应</del>（可能太负面的词汇了，改成反馈吧）。</p><p>确实如此，很多之前种下的因，这个月都有了果了。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>自从4月开始的公司结构变化，在躲过两次组织结构大变之后，终于在8月底迎来了HR约谈。谈话起初以为后面不用再去上班了，没想到迎来的是长达40分钟的PUA。例如：</p><ul><li>你与同事的关系不好</li><li>你没有核心竞争力，项目没了你不会出问题</li><li>你把自己定位在技术能有什么成长，想写代码去乙方外包天天可以写</li><li>你的同期都已经升PM了，而你还在为自己的ASSIGN发愁(指没有项目)</li><li>你为什么不自己去公司内部找点项目做</li></ul><p>诸如此类。我知道被PUA成功主动离职是不会有任何补偿的，但去公司上班逐渐变成了一件纯粹消耗、没有收获、没有意义的事情了，这种状态十分的折磨。</p><p>昨日下午，在学校图书馆，与挚友沟通了一个下午。在对话中，逐渐发现我是一个意义驱动的人，我工作和生活要找到我认为值得的意义，我才会愿意去做。找到了意义甚至可以做到风雨无阻。</p><p>可能这份工作起初我觉得是有意义的，它让我学习到了目前的制造业业务、代码开发的规范、很多不同种类的开发框架（无论是旧的老掉牙的还是新的，于我而言都是之前没接触过的）。</p><p>但随着我第一任领导和第二任领导接二连三的离职，事情逐渐变得不对劲了。我并没有悟出来，随着直属领导的离职，我会在公司内部没有一个可以依靠的人。从此，代码、学习、提升自我在我工作时变得没有那么重要。</p><p>于是，伴随着体制调整和新领导ASSIGN策略调整的，我随着公司内部的老油条们一起移除原先的部门，进入机动部队。第一次开会，有位老员工对领导布置的简单任务直言“不会”，我还在纳闷为什么要这么说，后来才明白这其实是一种策略。我一开始还有一些正经活可以做，到后面很多项目的ASSIGN逐渐收紧，来找我的都是一些DIRTY WORK了。又经历了上述人事的一番PUA，这份工作可谓是彻底失去了我心目中的意义。</p><p><em>（先暂且记录至此，后续可能接着更新。）</em></p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>由于工作的变动，家里人开始不赞成我在这类企业接着工作，他们提醒我，我的首要任务是学习考试。</p><p>虽说我很想让自己成为一个没有情感的机器人，但是INTJ其实是一个外表看上去是机器人的人类，可以暂时的抽离情绪，无人之时只会遭到更大的情绪反噬。（现尝试用文字记录能不能好些。）</p><p>目前来看，学习任务非常紧、非常重。写随笔的此刻为2024年9月，21日就有一门考试、22日组会、紧接着10月底1w字报告提交，连着系统搭建、专利申请、论文完稿、论文审核、校内答辩、校外送审、12月有考试、3月也有考试，同时还要帮老师安排班级事务、帮同学解答疑问。</p><p>如此紧锣密鼓的学习安排，更是没有时间在处理情绪上，每天在图书馆泡10多个小时犹嫌不足，也不大想与人社交，不想和人扯皮。可以说近期是分不出来一点情绪价值给别人。</p><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p>我的身体就和我的情绪一样，透支过头就会反噬，若是有一天我把自己累到了，后面可能需要5-6天啥事不干去休息。因此，长期规划、细水长流对我来说是非常重要的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最近是“事情多”、“心绪杂”，望自己能从繁杂的事情中抽丝剥茧，找出主要矛盾，脚踏实地地，一件一件把事情落实好。</p><p>最近的经历也告诉我，“羸弱的身体”和“有限的精力”让我的并发数其实也就只有2，同时做超过2件事情，就会有一件事情做得差强人意了。今后要合理安排自己的计划，避免同时需要处理超过2件重要的事情。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的补牙经历</title>
    <link href="/2024/09/11/%E8%A1%A5%E7%89%99%E7%BB%8F%E5%8E%86/"/>
    <url>/2024/09/11/%E8%A1%A5%E7%89%99%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p>个人感觉在公司呆的时间应该是正式进入倒计时了。</p><p>闲着也是闲着，不如做做上班没机会做的事情。</p><p>比如：自己身体的运维（笑）</p><h2 id="补牙进度（9-9）"><a href="#补牙进度（9-9）" class="headerlink" title="补牙进度（9/9）"></a>补牙进度（9/9）</h2><h3 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h3><p>先去医院挂了个口腔全科看看下面之前补过的牙，被告知：除去已经补过的两个牙（因为含药烂出一个大洞的大牙和一个轻微烂的大牙），居然还有十颗牙要补。同时把之前用金属补的挖出来重新补了（十分酸爽）。 ​​​</p><p>于是，开启了四天的补牙之旅。</p><h3 id="一共补了9颗："><a href="#一共补了9颗：" class="headerlink" title="一共补了9颗："></a>一共补了9颗：</h3><ul><li>6颗新补</li><li>2颗拆除金属补牙并重新补</li><li>1颗之前补的，缺了角补角</li><li>之前待定的两颗可以观察</li></ul><h3 id="学习到的知识"><a href="#学习到的知识" class="headerlink" title="学习到的知识"></a>学习到的知识</h3><ul><li>当牙齿开始自己痛了再去看，就已经要根管了</li><li>牙齿不痛但蛀得深，也有可能根管</li><li>补完如果不好好保护又蛀了，还得根管</li><li>刚补的牙暂时不要用电动牙刷，以免掉落</li><li>补完牙两个小时不要吃东西喝水，让材料固化</li><li>每天至少早晚两次巴氏刷牙法，至少刷满两分钟</li><li>每年牙齿需要体检观察，及时发现，及时补</li><li>补完牙不要吃硬的！<br>这次新补的其中有一颗在第二天吃石榴吃掉了，又去了次医院重新补，医生人美心善没收费</li></ul><blockquote><p>总共花费2500+，进口材料全自费💰</p></blockquote><p>感恩所有的医生💕</p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github远端开发环境尝试</title>
    <link href="/2024/07/18/GithubRemoteEnvTry/"/>
    <url>/2024/07/18/GithubRemoteEnvTry/</url>
    
    <content type="html"><![CDATA[<h1 id="Github远端开发环境尝试"><a href="#Github远端开发环境尝试" class="headerlink" title="Github远端开发环境尝试"></a>Github远端开发环境尝试</h1><blockquote><p>前情提要：经过前两次的Blog升级，现在已经可以从本地VSCode上传到Github，通过workflow actions在云上自动化编译并部署静态内容到相应的分支上。<br>但是这要求本地需要有一个可以安装VSCode的环境，但背个iPad实在是太方便了，谁愿意背笔记本啊。<br>由此对目前的云开发方式进行了一定的探索工作。</p></blockquote><p>提示：网页版的VSCode在iPadOS16是无法成功访问的，需要升级系统版本至最新版本，既可成功访问。</p><h2 id="1-VSCode-Tunnels"><a href="#1-VSCode-Tunnels" class="headerlink" title="1.VSCode Tunnels"></a>1.VSCode Tunnels</h2><p>此法就是开启VSCode的管道功能：</p><ul><li>通过安装<code>Remote - Tunnels</code>插件，打开VSCode的管道功能（这里也可以通过命令行的方式直接运行VSCode的程序打开）</li><li>登陆个人的Github或者Microsoft账号</li><li>打开<code>vscode.dev</code>网址</li><li>通过云虚拟机中转成功通过网页访问到本地电脑的资源</li></ul><p>缺陷：</p><ul><li>微软的Azure云服务并非免费，我用了几分钟，大概产生3刀的费用</li><li><code>vscode.dev</code>的网页版本对插件安装存在限制性</li></ul><h2 id="2-使用Github-CodeSpace"><a href="#2-使用Github-CodeSpace" class="headerlink" title="2. 使用Github CodeSpace"></a>2. 使用Github CodeSpace</h2><p>这里真的要感谢Github，实在是太优秀了，至今我能想到的代码相关的管理功能，<code>Github</code>基本上都能帮我实现一二，虽然一步一步配环境会略有难度，但这是锻炼，也是乐趣。</p><p>因为之前已经实现了用不同分支去管理部署内容和环境内容，所以这里可以直接通过环境内容分支去创建<code>CodeSpace</code>（创建过程看文档非常简单）。然后，BOOM!!!，<code>Open in browser</code>就可以了。非常简单- v -</p><p>这种方法并不访问我主机上的本地资源，而是直接起虚拟机去访问远端资源。</p><p><img src="/img/img_in_posts/GithubRemoteEnvTry/image.png" alt="远端界面"></p><p>缺陷：</p><ul><li>图片复制黏贴可以直接上传，但是移动到框架可以识别的位置会比较麻烦（其实自己搭图床都能解决）</li></ul><p>优点：</p><ul><li>免费🆓</li><li>无需任何环境，只要browser + Github（国内的话）</li><li>可以安装VSCode插件🆗</li><li>可以远端直接提交Github并触发部署Actions，一键完成✅😆</li><li>可以随时随地记录论文阅读笔记了</li></ul><h3 id="2-1-收费问题"><a href="#2-1-收费问题" class="headerlink" title="2.1 收费问题"></a>2.1 收费问题</h3><p>Github不像微软，基本上都有免费额度，写博客也足够了。</p><p>在个人<code>Settings -&gt; Billing</code>会有个人版详细的免费额度计划。涉及到云开发内容的只有<code>Codespaces</code>模块下。</p><div class="table-container"><table><thead><tr><th>module</th><th>content</th><th>billing</th></tr></thead><tbody><tr><td>CodeSpace</td><td>Usage hours</td><td>120 core hours per month</td></tr><tr><td></td><td>Storage</td><td>15 GB per month</td></tr></tbody></table></div><p>使用时间是根据核心数*小时数来计算的。</p><p>这下，我带个iPad就能写博客了，不知道是不是会更多产出捏。<br>嘻嘻٩(๑′∀ ‵๑)۶•<em>¨</em>•.¸¸♪</p>]]></content>
    
    
    
    <tags>
      
      <tag>Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RAG系统理论学习</title>
    <link href="/2024/07/15/RAGLearning/"/>
    <url>/2024/07/15/RAGLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="RAG系统理论学习"><a href="#RAG系统理论学习" class="headerlink" title="RAG系统理论学习"></a>RAG系统理论学习</h1><blockquote><p>对于RAG应用的检索系统搭建的理论与工程部分进行学习。<br>参考文献：<a href="https://arxiv.org/abs/2312.10997">https://arxiv.org/abs/2312.10997</a></p></blockquote><h2 id="0-引入"><a href="#0-引入" class="headerlink" title="0 引入"></a>0 引入</h2><p>当LLM遇到超出其训练数据或遇到需要查询当前数据时，就会产生<code>hallucinations</code>幻觉现象。现在通过RAG技术，在外部知识库中通过计算语义相似度<code>semantic similarity calculation</code>，检索相关文档块，降低幻觉产生。</p><h4 id="阶段特征"><a href="#阶段特征" class="headerlink" title="阶段特征"></a>阶段特征</h4><ul><li>与Transformer架构的融合：通过预训练模型与额外知识的合并，增强语言模型。<strong>这个阶段的目的是细化预训练技术。</strong></li><li>与LLM架构的融合：ChatGPT的出现展现了LLM的强大ICL能力。此时，RAG技术转向为LLM在推理阶段的信息提供。如今开始偏向结合LLM的微调技术。</li></ul><h2 id="1-RAG的主要概念和当前范式"><a href="#1-RAG的主要概念和当前范式" class="headerlink" title="1 RAG的主要概念和当前范式"></a>1 RAG的主要概念和当前范式</h2><blockquote><p>RAG最典型的应用是与ChatGPT结合，补充ChatGPT在训练时与当前世界的信息差距，将外部数据中搜索到的信息+用户提问形成一个全面的Prompt，促使LLM生成更好的答案。</p></blockquote><h3 id="1-1-RAG技术的3个阶段"><a href="#1-1-RAG技术的3个阶段" class="headerlink" title="1.1 RAG技术的3个阶段"></a>1.1 RAG技术的3个阶段</h3><h4 id="1-Naive-RAG"><a href="#1-Naive-RAG" class="headerlink" title="1. Naive RAG"></a>1. Naive RAG</h4><p>RAG技术的早期阶段，高光时刻是在ChatGPT被广泛采用的时候。这个时候的框架称作<code>Retrieve-Read</code>框架,包括了<code>索引</code>、<code>检索</code>和<code>生成</code>。</p><p>整体流程：</p><p><img src="/img/img_in_posts/RAGLearning/NAIVERAG.png" alt="NaiveRAG"></p><p><strong>缺陷：</strong></p><ol><li>检索：精度和召回率比较捉急，会发生<code>选择错块</code>、<code>选择不相关的块</code>、<code>关键信息缺失</code>等问题。</li><li>生成：幻觉问题，也存在不相关性、毒性、偏差等问题。</li><li>增强障碍：检索信息与不同任务结合的挑战。会出现不相交性或不连贯性。当出现相似信息检索时会出现冗余处理。面对复杂问题，基于原始查询的单个检索可能不足以获得足够的上下文信息。</li><li>LLM过于依赖检索信息，以至于输出仅是检索内容的简单回声，无法获得需要洞察力的或者合成的信息。</li></ol><h4 id="2-Advanced-RAG"><a href="#2-Advanced-RAG" class="headerlink" title="2. Advanced RAG"></a>2. Advanced RAG</h4><p>Advanced RAG是在Naive RAG上进行改进，它专注于提高检索质量，采用<code>预检索</code>和<code>后检索</code>策略。索引技术使用<code>滑动窗口</code>、<code>细粒度分割</code>和<code>元数据结合</code>的方法。还结合了其他几种优化策略使得检索过程更加流水线。</p><ul><li>预检索过程：优化索引结构和原始查询。<ul><li>优化索引结构：提高被索引内容的质量<ul><li>增强数据粒度</li><li>优化索引结构</li><li>增加元数据</li><li>对齐优化</li><li>混合检索</li></ul></li></ul></li></ul><h4 id="3-Modular-RAG"><a href="#3-Modular-RAG" class="headerlink" title="3. Modular RAG"></a>3. Modular RAG</h4><h2 id="2-核心组成——检索、生成和增强"><a href="#2-核心组成——检索、生成和增强" class="headerlink" title="2 核心组成——检索、生成和增强"></a>2 核心组成——检索、生成和增强</h2><h2 id="3-检索优化——索引、查询和嵌入优化。"><a href="#3-检索优化——索引、查询和嵌入优化。" class="headerlink" title="3 检索优化——索引、查询和嵌入优化。"></a>3 检索优化——索引、查询和嵌入优化。</h2><h2 id="4-三个增强过程"><a href="#4-三个增强过程" class="headerlink" title="4 三个增强过程"></a>4 三个增强过程</h2><h2 id="5-RAG-的下游任务和评估系统"><a href="#5-RAG-的下游任务和评估系统" class="headerlink" title="5 RAG 的下游任务和评估系统"></a>5 RAG 的下游任务和评估系统</h2><h2 id="6-不足之处"><a href="#6-不足之处" class="headerlink" title="6 不足之处"></a>6 不足之处</h2>]]></content>
    
    
    
    <tags>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Virtual Box虚拟机设置</title>
    <link href="/2024/07/02/VirtualBoxSetting/"/>
    <url>/2024/07/02/VirtualBoxSetting/</url>
    
    <content type="html"><![CDATA[<h1 id="Virtual-Box-虚拟机配置"><a href="#Virtual-Box-虚拟机配置" class="headerlink" title="Virtual Box 虚拟机配置"></a>Virtual Box 虚拟机配置</h1><blockquote><p>前情提要：无法使用增强模块且只能使用免费版的情况下，对虚拟机进行分辨率的修改。</p><p>百度了好一会都是只能给出一个使用增强模块的方法，情急之下，使用ChatGPT进行搜索，在合适的Prompt下，真的给出了相当可行的方案，由此进行记录。</p></blockquote><h2 id="1-修改虚拟机配置文件"><a href="#1-修改虚拟机配置文件" class="headerlink" title="1 修改虚拟机配置文件"></a>1 修改虚拟机配置文件</h2><ul><li>关闭虚拟机。</li><li>找到虚拟机的配置文件（通常是<code>.vbox</code>文件）。</li><li>使用文本编辑器（如Notepad++）打开该文件。</li><li><p>在文件中找到类似以下的部分：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Display</span> <span class="hljs-attr">VRAMSize</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>&lt;Display&gt;</code>标签中添加一个新的属性来设置自定义分辨率。例如：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Display</span> <span class="hljs-attr">VRAMSize</span>=<span class="hljs-string">&quot;16&quot;</span> <span class="hljs-attr">monitorCount</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">VideoMode</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1920&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1080&quot;</span> <span class="hljs-attr">depth</span>=<span class="hljs-string">&quot;32&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Display</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-使用命令行工具打开虚拟机"><a href="#2-使用命令行工具打开虚拟机" class="headerlink" title="2 使用命令行工具打开虚拟机"></a>2 使用命令行工具打开虚拟机</h2><h3 id="2-1-安装VBoxManage工具"><a href="#2-1-安装VBoxManage工具" class="headerlink" title="2.1 安装VBoxManage工具"></a>2.1 安装<code>VBoxManage</code>工具</h3><ul><li><p>打开环境变量设定</p><p>  新增变量：<code>VBoxManage</code><br>  值：<code>C:\Program Files\Oracle\VirtualBox</code></p></li><li><p>打开Path</p><p>  新增：<code>%VBoxManage%</code></p></li></ul><h3 id="2-2-打开虚拟机"><a href="#2-2-打开虚拟机" class="headerlink" title="2.2 打开虚拟机"></a>2.2 打开虚拟机</h3><ul><li>打开终端或命令提示符（Command Prompt）。</li><li><p>使用<code>VBoxManage</code>工具来设置分辨率。假设虚拟机名称为”WindowsVM”，分辨率为1920x1080：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">VBoxManage setextradata <span class="hljs-string">&quot;WindowsVM&quot;</span> <span class="hljs-string">&quot;CustomVideoMode1&quot;</span> <span class="hljs-string">&quot;1920x1080x32&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>然后启动虚拟机，并在Windows中设置为这个分辨率。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prompt Engineering 人工构建Prompt</title>
    <link href="/2023/11/08/Prompt%E5%B7%A5%E7%A8%8B%E5%AD%A6%E4%B9%A0%E4%BA%BA%E5%B7%A5%E6%9E%84%E5%BB%BAPrompt/"/>
    <url>/2023/11/08/Prompt%E5%B7%A5%E7%A8%8B%E5%AD%A6%E4%B9%A0%E4%BA%BA%E5%B7%A5%E6%9E%84%E5%BB%BAPrompt/</url>
    
    <content type="html"><![CDATA[<h1 id="Prompt-Engineering-人工构建Prompt"><a href="#Prompt-Engineering-人工构建Prompt" class="headerlink" title="Prompt Engineering 人工构建Prompt"></a>Prompt Engineering 人工构建Prompt</h1><blockquote><p>学习链接：<a href="https://mp.weixin.qq.com/s?__biz=Mzk0NzMwNjU5Nw==&amp;mid=2247483914&amp;idx=1&amp;sn=cf8aab9a1ff04dc4fec3528708f02f26&amp;chksm=c379ab00f40e22161d15beeef01fd380910c188f9f70d8e7e849b7a7c8d233abb7e72fa87497&amp;scene=21#wechat_redirect">微信公众号</a></p></blockquote><p>人工构建Prompt适合Zero-Shot的情况，可以浅尝效果。人工构建Prompt相当泛用，因此学习一些它的应用场景。</p><h2 id="1-LAMA"><a href="#1-LAMA" class="headerlink" title="1 LAMA"></a>1 LAMA</h2><blockquote><p>源码地址：<a href="https://github.com/facebookresearch/LAMA">Github</a></p></blockquote><p>LAMA数据集，是一个对预训练语言模型的探针，使用Prompt来分析预训练语言模型掌握了哪些知识。</p><h2 id="2-GPT3"><a href="#2-GPT3" class="headerlink" title="2 GPT3"></a>2 GPT3</h2><p>GPT3 是通过大量语料训练得到的，对于大量下游任务，无需任何参数更新和微调。对于特定的下游任务可以实现Few-Shot，论文中的Prompt都是通过人工构造。</p><div class="note note-info">            <p><strong>后续细读其人工构建Prompt和评判模型效果的部分并复现</strong></p>          </div><p>论文：<a href="https://arxiv.org/pdf/2005.14165.pdf">(2020) Language models are few-shot learners</a></p><h2 id="3-PET-Pattern-Exploiting-Training"><a href="#3-PET-Pattern-Exploiting-Training" class="headerlink" title="3 PET(Pattern Exploiting Training)"></a>3 PET(Pattern Exploiting Training)</h2><p>学习链接：<a href="https://zhuanlan.zhihu.com/p/644369467">知乎</a></p><p>PET是一种半监督训练方法，它的目标有两个：</p><ol><li><p>将任务目标以自然语言的模式加入训练数据中</p></li><li><p>对无标签数据进行样本挖掘以获取有标签数据</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Prompt Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prompt Engineering</title>
    <link href="/2023/11/08/Prompt%E5%B7%A5%E7%A8%8B%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/"/>
    <url>/2023/11/08/Prompt%E5%B7%A5%E7%A8%8B%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Prompt-Engineering学习"><a href="#Prompt-Engineering学习" class="headerlink" title="Prompt Engineering学习"></a>Prompt Engineering学习</h1><blockquote><p>如何利用好大语言模型，就需要给模型合适的Prompt，引导它给出合适的答案，我认为是模型微调的一种新方法。本文是自用的一个学习笔记，方便后续回顾。</p></blockquote><p>学习链接：<a href="https://mp.weixin.qq.com/s?__biz=Mzk0NzMwNjU5Nw==&amp;mid=2247483914&amp;idx=1&amp;sn=cf8aab9a1ff04dc4fec3528708f02f26&amp;chksm=c379ab00f40e22161d15beeef01fd380910c188f9f70d8e7e849b7a7c8d233abb7e72fa87497&amp;scene=21#wechat_redirect">微信公众号</a></p><h2 id="0-NLP发展史"><a href="#0-NLP发展史" class="headerlink" title="0 NLP发展史"></a>0 NLP发展史</h2><ul><li>阶段一：feature engineering</li></ul><p>这个阶段的模型十分依赖前期的特征工程，往往需要人工去手动提取和筛选定义特征，这个阶段特征质量会影响最后的模型效果。</p><ul><li>阶段二：architecture engineering</li></ul><p>这个阶段大家的目标是如何减少模型对特征的依赖，希望模型可以通过好的神经网络设计让模型自己学习有用的特征。</p><p><em>上述两个阶段都为监督学习阶段。</em></p><ul><li>阶段三：objective engineering</li></ul><p>这个阶段就是熟知的预训练时代，如何设计合理的预训练和微调的目标函数最为重要，对最后的结果影响深远，此时，已经进入无监督学习，极大的降低了对监督语料（特征）的依赖。</p><ul><li>阶段四：prompt engineering</li></ul><p>这个阶段就进入了我们目前的时代，这个阶段依旧会进行预训练，不同之处是用合适特定的Prompt的去重构下游任务并且管控模型行为，以实现Zero Shot或者Few Shot。因此这个阶段的关键任务是如何设计一个合理有效的Prompt。</p><div class="note note-info">            <p>拓展知识-Zero Shot/Few Shot：<br>目前有监督学习的模型在很多问题上已经达到或者超过人类水平，然而有监督学习的性能依赖于喂给它的特征，因此它对于训练时没见过的类别具有局限性。<br>Zero Shot/Few Shot希望模型能具有人类的推理能力，像人类推理认识在训练时没见过的新事物。这样可以实现对于小样本或者零样本类别的识别。</p>          </div><h2 id="1-Prompt-Learning"><a href="#1-Prompt-Learning" class="headerlink" title="1 Prompt Learning"></a>1 Prompt Learning</h2><p>传统监督学习任务：</p><script type="math/tex; mode=display">x {\xrightarrow{P(x)}} y</script><p>Prompt Learning：</p><script type="math/tex; mode=display">x {\xrightarrow{f_{prompt}(x)}} x' {\xrightarrow{语言模型}} x {\rightarrow} y</script><p>从上述对比，不难看出Prompt Learning主要分为三个部分：</p><ol><li><p>Prompt Addition：定义$f_{prompt}(x)$，将原始的$x$转化为$x’$，$x’$上的空槽会直接决定最后的预测结果。</p></li><li><p>Answer Search：指对所有可能的候选槽值进行搜索，然后选择最合适的槽值。用$Z$来代表可能结果集，生成任务中，$Z$包含所有token；分类任务中，$Z$包含特定分类任务的相关token。</p></li><li><p>Answer mapping：当生成任务时，上一步已获得最终结果；分类任务时，还需要根据槽值，将结果归到对应的类别中。</p></li></ol><h2 id="2-影响Prompt-Learning效果的关键"><a href="#2-影响Prompt-Learning效果的关键" class="headerlink" title="2 影响Prompt Learning效果的关键"></a>2 影响Prompt Learning效果的关键</h2><ul><li><p>选择合适的Prompt模板，设计合适的模板函数，也就是Prompt Engineering。</p></li><li><p>预训练语言模型的选择。</p></li><li><p>Answer Engineering，答案候选集和答案到最终结果映射的构建。</p></li><li><p>Expanding the paradigm：拓展Prompt Learning，包括Multi Prompt。</p></li><li><p>Training strategy，选择训练策略。</p></li></ul><h2 id="3-Prompt-Engineering"><a href="#3-Prompt-Engineering" class="headerlink" title="3 Prompt Engineering"></a>3 Prompt Engineering</h2><p>学习链接：<a href="https://zhuanlan.zhihu.com/p/488279606">知乎</a></p><blockquote><p>后续细学</p></blockquote><ul><li><p>prefix prompt：在前缀的基础上填后续文本</p></li><li><p>cloze prompt：在句子中间填空</p></li></ul><p>其他分类方法：人工、自动、隐空间。连续、离散。</p><h2 id="4-Multi-prompt-Learning"><a href="#4-Multi-prompt-Learning" class="headerlink" title="4 Multi-prompt Learning"></a>4 Multi-prompt Learning</h2><p>多Prompt的类型如下：</p><ul><li><p>Ensemble：单个Prompt并行，最后通过加权和投票汇总结果。</p></li><li><p>Augmentation：增强，通过找一个和$x’$接近的case一起输入，通过case判断$x’$的预测结果是否正确。</p></li><li><p><strong>Composition：</strong> 将多个Prompt函数融合到一起，每个Prompt负责一个子任务，同时进行多个子任务的预测，例如同时进行：关系抽取，实体识别，实体间关系判断。</p></li><li><p>Decomposition：适用于有多个预测值的任务，将原始任务拆成多个子任务，每个子任务之间彼此隔离，子任务用单个Prompt去处理。</p></li></ul><h2 id="5-Training-Strategy"><a href="#5-Training-Strategy" class="headerlink" title="5 Training Strategy"></a>5 Training Strategy</h2><p>根据语言模型选择训练策略，见下图。</p><p><img src="/img/img_in_posts/Prompt工程学习开篇/image.png" alt="训练策略"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Prompt Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于熵的学习</title>
    <link href="/2023/09/20/%E5%85%B3%E4%BA%8E%E7%86%B5%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/09/20/%E5%85%B3%E4%BA%8E%E7%86%B5%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="关于熵的学习"><a href="#关于熵的学习" class="headerlink" title="关于熵的学习"></a>关于熵的学习</h1><blockquote><p>学习完扩散模型的推导肯定需要学习如何去训练一个扩散模型，它的先导知识需要了解熵的概念。这个概念连着之前学的哈夫曼编码和哈夫曼树就不难理解。</p></blockquote><p>学习链接：<a href="https://zhuanlan.zhihu.com/p/501100833">知乎</a></p><h2 id="1-熵-entropy"><a href="#1-熵-entropy" class="headerlink" title="1 熵 $entropy$"></a>1 熵 $entropy$</h2><p>数学定义：$H(x)=-\Sigma_xp(x)logp(x)=\Sigma_x\frac{1}{p(x)}$</p><p>$H(x)$为随机变量$x$代表的平均信息量，也可以理解为从概率分布$P$中获得一个样本$x$的平均信息量。</p><h2 id="2-交叉熵-cross-entropy"><a href="#2-交叉熵-cross-entropy" class="headerlink" title="2 交叉熵 $cross-entropy$"></a>2 交叉熵 $cross-entropy$</h2><p>数学定义：$H(p,q)=-\Sigma_xp(x)logq(x)$</p><p>此时，$p(x)$为真实值，$q(x)$为预测值。$logq(X)$为信息量。</p><blockquote><p>上述公式，当$log$取以2为底的时候，单位为bit。</p></blockquote><h2 id="3-举例解释"><a href="#3-举例解释" class="headerlink" title="3 举例解释"></a>3 举例解释</h2><p>假设，一个气象预报站预测天气，我们已知天气一共存在八种，它们的概率分别是如下：</p><div class="table-container"><table><thead><tr><th>天气</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>概率</td><td>35%</td><td>35%</td><td>10%</td><td>10%</td><td>4%</td><td>4%</td><td>1%</td><td>1%</td></tr></tbody></table></div><p>那么气象站给用户发布的熵（理想状态）为：</p><script type="math/tex; mode=display">H(x)=-({0.35}\log_{2}{0.35}+{0.1}\log_{2}{0.1}+{0.04}\log_{2}{0.04}+{0.01}\log_{2}{0.01})\times2 \approx 2.23 bit</script><hr><p>假设气象站统一设置了3位长度的编码，此时气象站给用户发布的交叉熵为：$3bit$，不难看出编码存在很大的优化空间。</p><p>此时气象站对编码做出了如下优化：</p><div class="table-container"><table><thead><tr><th>天气</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>概率</td><td>35%</td><td>35%</td><td>10%</td><td>10%</td><td>4%</td><td>4%</td><td>1%</td><td>1%</td></tr><tr><td>编码</td><td>00</td><td>01</td><td>100</td><td>101</td><td>1100</td><td>1101</td><td>11100</td><td>11101</td></tr></tbody></table></div><p>此时气象站给用户发布的交叉熵为：</p><script type="math/tex; mode=display">H(p,q)=-({0.35}\times2+{0.1}\times3+{0.04}\times4+{0.01}\times5)\times2 = 2.42bit</script><p>可见交叉熵相较之前$3bit$更接近熵，也就是说改善很多。</p><hr><p>此时，我们修改不同天气的发生概率但不修改编码规律，如下：</p><div class="table-container"><table><thead><tr><th>天气</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>概率</td><td>1%</td><td>1%</td><td>4%</td><td>4%</td><td>10%</td><td>10%</td><td>35%</td><td>35%</td></tr><tr><td>编码</td><td>00</td><td>01</td><td>100</td><td>101</td><td>1100</td><td>1101</td><td>11100</td><td>11101</td></tr></tbody></table></div><p>那么此时气象站给用户发布的交叉熵为：</p><script type="math/tex; mode=display">H(p,q)=-({0.35}\times5+{0.1}\times4+{0.04}\times3+{0.01}\times2)\times2 = 4.58bit</script><p>此时，信息传输的效率就很差，存在很大一部分冗余。</p><h2 id="4-理解"><a href="#4-理解" class="headerlink" title="4 理解"></a>4 理解</h2><p>利用哈夫曼编码进行理解，在哈夫曼编码中追求的是：出现频率越高的字母，编码长度越短，以追求更短的编码更多的信息。</p><p>换成概率去理解，也就是：出现概率越高的事件，用更短的编码，以追求更高的平均信息量。但现实生活的概率不可能预估准确，因此真实值与预估值之间存在一个差值，也就是交叉熵与熵之间会存在一个差值，也就是KL散度（$relative-entropy\ a.k.a.\ KL\ divergence$）。</p><h2 id="5-KL散度-relative-entropy-a-k-a-KL-divergence"><a href="#5-KL散度-relative-entropy-a-k-a-KL-divergence" class="headerlink" title="5 KL散度 $relative-entropy\ a.k.a.\ KL\ divergence$"></a>5 KL散度 $relative-entropy\ a.k.a.\ KL\ divergence$</h2><p>数学定义：$D_{KL}(p||q)=H(p,q)-H(p)$</p><p>即在如下情况下：</p><div class="table-container"><table><thead><tr><th>天气</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>概率</td><td>1%</td><td>1%</td><td>4%</td><td>4%</td><td>10%</td><td>10%</td><td>35%</td><td>35%</td></tr><tr><td>编码</td><td>00</td><td>01</td><td>100</td><td>101</td><td>1100</td><td>1101</td><td>11100</td><td>11101</td></tr></tbody></table></div><p>$D_{KL}(p||q)=H(p,q)-H(p) = 4.58-2.23=2.35$</p><h2 id="6-在机器学习分类问题中的理解"><a href="#6-在机器学习分类问题中的理解" class="headerlink" title="6 在机器学习分类问题中的理解"></a>6 在机器学习分类问题中的理解</h2><p>因此，当在机器学习的分类问题中，假设有如下结果：</p><div class="table-container"><table><thead><tr><th>天气</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>真实</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>100%</td></tr><tr><td>预测</td><td>1%</td><td>1%</td><td>4%</td><td>4%</td><td>10%</td><td>10%</td><td>35%</td><td>35%</td></tr></tbody></table></div><p>此时我们预测的交叉熵为：</p><script type="math/tex; mode=display">H(p,q)=-100\%\times\log_{2}{0.35}\approx1.515</script><hr><p>若我们预测值与真实值一样时</p><div class="table-container"><table><thead><tr><th>天气</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>真实</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>100%</td></tr><tr><td>概率</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>0%</td><td>100%</td></tr></tbody></table></div><p>此时我们预测的交叉熵为：</p><script type="math/tex; mode=display">H(p,q)=-100\%\times\log_{2}{1}=0</script><div class="note note-info">            <p>由此，解释了为什么可以将交叉熵作为$loss$函数，因为在分类问题中，最小化交叉熵就是在使得交叉熵逼近熵，也就是使得预测分布更接近真实分布。</p>          </div>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决了在Github Action自动化部署的环境下，需要修改node_modules的问题</title>
    <link href="/2023/09/19/%E8%A7%A3%E5%86%B3%E4%BA%86%E5%9C%A8Github%20Action%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9A%84%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%8C%E9%9C%80%E8%A6%81%E4%BF%AE%E6%94%B9node_modules%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/09/19/%E8%A7%A3%E5%86%B3%E4%BA%86%E5%9C%A8Github%20Action%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9A%84%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%8C%E9%9C%80%E8%A6%81%E4%BF%AE%E6%94%B9node_modules%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前情提要：我用Github Action配置了自动化部署后，再次上传博文时发现Letax渲染出现了问题。想来想去，突然想到，之前修改过Kramed渲染引擎的escape和em。下述我解决问题的思路。</p></blockquote><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>首先是本地渲染并没有问题，随后想到Github Action会在云上重新<code>npm install</code>，这样我本地的node_modules的修改并没有上传，百度搜索到的办法有两种：重新上传一个你自己的npm或者patch-package，考虑到复杂性，我选择第二种办法。</p><h2 id="npm-install流程"><a href="#npm-install流程" class="headerlink" title="npm install流程"></a><code>npm install</code>流程</h2><p>此处参考了这个兄弟的博客（<a href="https://blog.csdn.net/yjitcsdn/article/details/100156695">CSDN</a>）。</p><p>流程图如下：</p><p><img src="https://mermaid.ink/svg/pako:eNqNVW9P00Ac_irNGZOSDOLarYO-8IVRE6NGg_pGZ8ytd2PVrm3aLjoJCVOBzI0NJE5FEVFw8w-oQeMIAt_F7LruW3jbjdKBKJdlubvn-d3z_O531xsFioEwkEFSM-4qKWg53NVTXFznaDt-nLMziRELminu6qXLcX1v2slqmFORwCVVTZOPJRLJkO1Yxh0sH0tKUrfff1dFTkoWzHshxdAMi2LJXV4_gjZVs2BW5qJc9KBg8_PnRn3cXV3xoXZDqoUVRzV07sJwDwDDvJuvektF3Uz3cf39Jzko8DfIy23ysOxVJ71qvjU17b3PuePVm31-JNYR6wfDyc-VZq1A1uYbG_nm_CPTwqpuO1DTWk8-kNWZbrRvlEbc6hIY8nef7ZagKosr3pe3rfcV8u1BY3vB-1FhbhNCFzKhcgeO4IHbtqH3BUIFRhN5t7ZEFp65-RzZWCfFSjyu_56co_-ktNl6sUyzJMvTjONDXuknKVfIxC-ytrEf2nnRqH_0dqbaKZc_kdw8wihj4qC0SKXJ6nPyqtaxEOEb9QKrzX5Woz4dIEZ5MjNr4RGVljzLsmPqpFRo_vpAihPNrVmyMO6boet6W1t73qrvKNObWtfpEb2VNlBGw3ZX0q-cX4fu0rM199Xi_wqhhPm9srICKAK_Ow7w2K4rYptuQgsfqt49NEdSR2G-RxoJvGnYzkF5xOQRk88kNNVOBWGRwZHD3MFwh3DghAYmOoSDWxec6VB68wtenf0Xl8yUSPlrc32zubnYw6A_t_KVvH09fPbcaaZbqrXGc-TpJJnLNXaW3NyXnoBetvvyO51oj8iTIou5cv4avaAXoWmq-giZWKeivQscKSRghQXQDCjnUFuHZu7mC24x561tk-WpXh_5Anlc87bnyMSKu7DUfJNjmn5--9if3HL5CLx_WmaRHTDoq1F_fOTc6AffASGQxlYaqoi-EaNtLA6cFE7jOJBpF-EkzGhOHMT1MUqFGce4ktUVIDtWBodAxkTQwadVSDcoDeQk1Gx_9gxSHcPaZZpQv24Y6cAQyKPgHpBjsYGoJAiSGBkcjElDUTEEskAWpQEhFhEjQ0JYkCJSZDAyFgL3OwucGIgJUkyKitETg7HwUCw6FAK4o3WRvXSdB2_sD4P12Z4" alt="流程图"></p><p>更多的npm script生命周期可以参考：<a href="https://www.jianshu.com/p/0b35eaa4f1b9">简书</a></p><h2 id="patch-package插件"><a href="#patch-package插件" class="headerlink" title="patch-package插件"></a><code>patch-package</code>插件</h2><p><code>patch-package</code>这个插件只支持<code>npm</code>和<code>yarn</code>某一种，因此项目文件夹下只能有<code>package-lock.json</code>或者<code>yarn.lock</code>其中一种。</p><ul><li>安装插件并生成修改补丁，在命令行输入：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install patch-package<br>npx patch-package `你要修改的包名`<br></code></pre></td></tr></table></figure><ul><li>修改<code>package.json</code>，在script下增加如下内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;postinstall&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;patch-package&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>完成上述配置，便可以在<code>npm install</code>的<code>postinstall</code>周期对新下载的node_modules打上我们自己修改的补丁。</p><p>至此解决了在Github Action自动化部署的环境下，解决需要修改node_modules的问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扩散模型学习</title>
    <link href="/2023/09/16/DiffusionModel/"/>
    <url>/2023/09/16/DiffusionModel/</url>
    
    <content type="html"><![CDATA[<h1 id="扩散模型"><a href="#扩散模型" class="headerlink" title="扩散模型"></a>扩散模型</h1><blockquote><p>看了篇论文，里面提到了扩散模型，前段时间听师兄说老师最近对扩散模型很感兴趣，所以我就找了个视频学习了一下</p></blockquote><p>学习视频：<a href="https://www.bilibili.com/video/BV1tz4y1h7q1/?share_source=copy_web&amp;vd_source=cb49ee774cbb55d416f80adbd9365da5">B站</a></p><p>学习代码：<a href="https://github.com/wangjia184/diffusion_model">Github</a></p><p>非常感谢这位UP，讲得非常深入浅出。</p><h2 id="1-扩散模型"><a href="#1-扩散模型" class="headerlink" title="1 扩散模型"></a>1 扩散模型</h2><p>简单来说就是这个方程：</p><script type="math/tex; mode=display">x_t = \sqrt{1-β_t}\times x_{t-1} + \sqrt{β_t}\times ϵ_{t}  \tag1</script><p>其中ϵ是噪声，x是图像，上述方程描述了噪声在图像当中扩散的状态。$ϵ_t\sim N(0,1)$，每次重新生成。</p><p>同时 <script type="math/tex">0 < β_1 < β_2 < β_3 < \dots < β_T < 1</script> 表示噪声扩散速度越来越快。</p><p>有看到说， $(\sqrt{\beta})^2+(\sqrt{1-\beta})^2 = 1$ 是为了保证能量守恒。</p><p>引入 $a_t = 1 - β_t$，可以得到：</p><script type="math/tex; mode=display">x_t = \sqrt{a_{t}}\times x_{t-1} +  \sqrt{1-a_t} \times ϵ_{t}</script><h2 id="2-前向传播"><a href="#2-前向传播" class="headerlink" title="2 前向传播"></a>2 前向传播</h2><p>我们知道前向传播的过程是：<script type="math/tex">x_0 \overset{q(x_1 | x_0)}{\rightarrow} x_1 \overset{q(x_2 | x_1)}{\rightarrow} x_2 \rightarrow \dots  \rightarrow x_{T-1} \overset{q(x_{t} | x_{t-1})}{\rightarrow} x_T</script></p><p>所以首先探讨如何避免多次迭代？</p><h3 id="2-1-避免多次迭代"><a href="#2-1-避免多次迭代" class="headerlink" title="2.1 避免多次迭代"></a>2.1 避免多次迭代</h3><div class="note note-info">            <p><strong>我们从$x_{t-2}$与$x_{t}$ 的关系开始讨论：</strong></p>          </div><p>我们根据方程(1)可得：</p><script type="math/tex; mode=display">x_{t-1} = \sqrt{a_{t-1}}\times x_{t-2} +  \sqrt{1-a_{t-1}} \times ϵ_{t-1}</script><script type="math/tex; mode=display">x_t = \sqrt{a_{t}}\times x_{t-1} +  \sqrt{1-a_t} \times ϵ_{t}</script><p>因此，把$x_{t-1}$代入，不难得出：</p><script type="math/tex; mode=display">x_t = \sqrt{a_{t}a_{t-1}}\times x_{t-2} +  \sqrt{a_{t}(1-a_{t-1})} ϵ_{t-1} +  \sqrt{1-a_t} \times ϵ_t \tag2</script><p>我们已知：$ϵ\sim N(0,1)$</p><p>所以此时相当于，将原先丢一个骰子的问题，转化成同时丢俩个骰子的问题，也就是叠加概率分布。此处用卷积方法对概率求总和。我们知道正态分布的卷积仍然符合正态分布，即：</p><script type="math/tex; mode=display">N(\mu_1,\sigma_1^2)+N(\mu_2,\sigma_2^2)=N(\mu_1+\mu_2,\sigma_1^2+\sigma_2^2) \tag3</script><p>此时我们便能知道，对于方程(2)：</p><script type="math/tex; mode=display">ϵ_t \sim N(\mu_t,\sigma_t^2)</script><script type="math/tex; mode=display">\sqrt{1-a_t} \times ϵ_t \sim N(\sqrt{1-a_t}\mu_t , (\sqrt{1-a_t})^2\sigma_t^2)</script><script type="math/tex; mode=display">\sqrt{a_{t}(1-a_{t-1})} ϵ_{t-1} \sim N(\sqrt{a_{t}(1-a_{t-1})}\mu_t , (\sqrt{a_{t}(1-a_{t-1})})^2\sigma_{t-1}^2)</script><p>因为$ϵ_t\sim N(0,1)$</p><p>所以：</p><script type="math/tex; mode=display">\sqrt{1-a_t} \times ϵ_t \sim N(0 , 1-a_t)</script><script type="math/tex; mode=display">\sqrt{a_{t}(1-a_{t-1})} ϵ_{t-1} \sim N(0 , a_{t}(1-a_{t-1}))</script><p>将上述两个结果代入公式(3)：</p><script type="math/tex; mode=display">\sqrt{a_{t}(1-a_{t-1})} ϵ_{t-1} +  \sqrt{1-a_t} \times ϵ_t \sim N(0,1-a_{t}a_{t-1})</script><p>使用重参数化，产生新采样ϵ，将方程(2)转化为：</p><script type="math/tex; mode=display">x_t = \sqrt{a_{t}a_{t-1}}\times x_{t-2} +  \sqrt{1-a_{t}a_{t-1}} \times ϵ \tag4</script><div class="note note-info">            <p><strong>按照这个思路，我们进一步探讨$x_{t-3}$与$x_{t}$的关系：</strong></p>          </div><script type="math/tex; mode=display">x_{t-2} = \sqrt{a_{t-2}}\times x_{t-3} +  \sqrt{1-a_{t-2}} \times ϵ_{t-2}</script><script type="math/tex; mode=display">x_t = \sqrt{a_{t}a_{t-1}}\times x_{t-2} +  \sqrt{1-a_{t}a_{t-1}} \times ϵ</script><p>不难得出：</p><script type="math/tex; mode=display">x_t = \sqrt{a_{t}a_{t-1}a_{t-2}}\times x_{t-3}  +  \sqrt{a_{t}a_{t-1}-a_{t}a_{t-1}a_{t-2}} ϵ_{t-2} +  \sqrt{1-a_{t}a_{t-1}}\times ϵ</script><p>其中：</p><script type="math/tex; mode=display">\sqrt{1-a_{t}a_{t-1}}\times ϵ \sim N(0,1-a_{t}a_{t-1})</script><script type="math/tex; mode=display">\sqrt{a_{t}a_{t-1}-a_{t}a_{t-1}a_{t-2}}\times ϵ_{t-2} \sim N(0,a_{t}a_{t-1}-a_{t}a_{t-1}a_{t-2})</script><p>即：</p><script type="math/tex; mode=display">x_t = \sqrt{a_{t}a_{t-1}a_{t-2}}\times x_{t-3} +  \sqrt{1-a_{t}a_{t-1}a_{t-2}} \times ϵ</script><div class="note note-info">            <p>由此，我们不难看出$x_t$与$x_{t-k}$的关系（可以使用数学归纳法证明）：</p>          </div><script type="math/tex; mode=display">x_t = \sqrt{a_{t}a_{t-1}a_{t-2}a_{t-3}...a_{t-(k-2)}a_{t-(k-1)}}\times x_{t-k} +  \sqrt{1-a_{t}a_{t-1}a_{t-2}a_{t-3}...a_{t-(k-2)}a_{t-(k-1)}}\times ϵ</script><p><strong>$x_t$与$x_0$的关系：</strong></p><script type="math/tex; mode=display">x_t = \sqrt{a_{t}a_{t-1}a_{t-2}a_{t-3}...a_{2}a_{1}}\times x_{0} +  \sqrt{1-a_{t}a_{t-1}a_{t-2}a_{t-3}...a_{2}a_{1}}\times ϵ</script><p><strong>我们引入：</strong></p><script type="math/tex; mode=display">\bar{a}_{t} := a_{t}a_{t-1}a_{t-2}a_{t-3}...a_{2}a_{1}</script><p>得出前向传播的方程：</p><script type="math/tex; mode=display">x_{t} = \sqrt{\bar{a}_t}\times x_0+ \sqrt{1-\bar{a}_t}\times ϵ , ϵ \sim N(0,I) \tag 5</script><h2 id="3-反向过程-p"><a href="#3-反向过程-p" class="headerlink" title="3 反向过程 $p$"></a>3 反向过程 $p$</h2><h3 id="3-1-贝叶斯公式"><a href="#3-1-贝叶斯公式" class="headerlink" title="3.1 贝叶斯公式"></a>3.1 贝叶斯公式</h3><script type="math/tex; mode=display">P(A|B) = \frac{ P(B|A)P(A) }{ P(B) }</script><p>其中：$P(A)$ 称为Prior - 先验概率；$P(A|B)$ 称为Posterior - 后验概率；$P(B)$ 称为Evidence - 证据；$P(B|A)$称为似然 - likelihood，表示B对A的证据强度。</p><h3 id="3-2-马尔可夫链"><a href="#3-2-马尔可夫链" class="headerlink" title="3.2 马尔可夫链"></a>3.2 马尔可夫链</h3><blockquote><p>这里摘抄一下，马尔可夫链（Markov chain），又称离散时间马尔可夫链（discrete-time Markov chain），为状态空间中经过从一个状态到另一个状态的转换的随机过程。该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。这种特定类型的“无记忆性”称作马尔可夫性质。在马尔可夫链的每一步，系统根据概率分布，可以从一个状态变到另一个状态，也可以保持当前状态。状态的改变叫做转移，与不同的状态改变相关的概率叫做转移概率。随机漫步就是马尔可夫链的例子。随机漫步中每一步的状态是在图形中的点，每一步可以移动到任何一个相邻的点，在这里移动到每一个点的概率都是相同的（无论之前漫步路径是如何的）。</p></blockquote><p>简单来说，马尔可夫链某一时刻状态转移的概率只依赖于它的前一个状态，具有<code>无记忆性</code>。</p><p>其数学表达为：$P(x_t|x_{t-1},x_{t-2}\dots,x_{0}) = P(x_t|x_{t-1})$</p><p>掌握上述两个定理后，我们开始推导反向过程 $p$ (Reverse Process $p$)</p><h3 id="3-3-Reverse-Process-p"><a href="#3-3-Reverse-Process-p" class="headerlink" title="3.3 Reverse Process $p$"></a>3.3 Reverse Process $p$</h3><p>我们已知：</p><script type="math/tex; mode=display">\bar{a}_{t} := a_{t}a_{t-1}a_{t-2}a_{t-3}...a_{2}a_{1}</script><script type="math/tex; mode=display">x_{t} = \sqrt{\bar{a}_t}\times x_0+ \sqrt{1-\bar{a}_t}\times ϵ , ϵ \sim N(0,I)</script><p>从前向传播的方程我们也知道：</p><script type="math/tex; mode=display">x_t = \sqrt{a_{t}}\times x_{t-1} +  \sqrt{1-a_t} \times ϵ_{t}</script><p>因此在反向过程中，我们需要从 $x_{t}$ 求 $x_{t-1}$，根据贝叶斯公式：</p><script type="math/tex; mode=display">p(x_{t-1}|x_{t}) = \frac{ p(x_{t}|x_{t-1})\times p(x_{t-1})}{p(x_{t})}</script><p>为了严谨，我们都加上条件 $x_{0}$：</p><script type="math/tex; mode=display">p(x_{t-1}|x_{t},x_{0}) = \frac{ p(x_{t}|x_{t-1},x_{0})\times p(x_{t-1}|x_0)}{p(x_{t}|x_0)} \tag6</script><p><em>（实际跟据马尔科夫链的无记忆性，加不加是一样的）</em></p><p>我们已知，正态分布的概率密度函数为：</p><script type="math/tex; mode=display">f(x) = \frac{1}{\sqrt{2\pi } \alpha} e^{\left (  -\frac{1}{2}\frac{(x_{t}-\mu)^2}{2\alpha^2}   \right ) }</script><p>在此，整理所有的条件：</p><script type="math/tex; mode=display">ϵ\sim N(0,1)</script><p>即，可得：</p><script type="math/tex; mode=display">x_{t} = \sqrt{\bar{a}_t}\times x_0+ \sqrt{1-\bar{a}_t}\times ϵ \sim N(\sqrt{\bar{a}_t}\times x_0,1-\bar{a}_t)</script><script type="math/tex; mode=display">P(x_{t}|x_{0}) = \frac{1}{\sqrt{2\pi } \sqrt{1-\bar{a}_{t}}} e^{\left (  -\frac{1}{2}\frac{(x_{t}-\sqrt{\bar{a}_{t}}x_0)^2}{1-\bar{a}_{t}}   \right ) }  \tag7</script><p>即，可得：</p><script type="math/tex; mode=display">x_t = \sqrt{a_{t}}\times x_{t-1} +  \sqrt{1-a_t} \times ϵ_{t} \sim N(a_{t}\times x_{t-1},1-a_t)</script><script type="math/tex; mode=display">P(x_{t}|x_{t-1},x_{0}) = \frac{1}{\sqrt{2\pi } \sqrt{1-a_{t}}} e^{\left (  -\frac{1}{2}\frac{(x_{t}-\sqrt{a_t}x_{t-1})^2}{1-a_{t}}   \right ) } \tag8</script><p>代入 $x_{t-1}$ 与 $x_0$ 的关系前向传播方程<br>即，可得：</p><script type="math/tex; mode=display">x_{t-1} = \sqrt{\bar{a}_{t-1}}\times x_0+ \sqrt{1-\bar{a}_{t-1}}\times ϵ \sim N(\sqrt{\bar{a}_{t-1}}\times x_0,1-\bar{a}_{t-1})</script><script type="math/tex; mode=display">P(x_{t-1}|x_{0}) = \frac{1}{\sqrt{2\pi } \sqrt{1-\bar{a}_{t-1}}} e^{\left (  -\frac{1}{2}\frac{(x_{t-1}-\sqrt{\bar{a}_{t-1}}x_0)^2}{1-\bar{a}_{t-1}}   \right ) } \tag9</script><p>将公式(7)(8)(9)代入公式(6)，得出方程：</p><script type="math/tex; mode=display">\frac{ q(x_{t}|x_{t-1},x_{0})\times q(x_{t-1}|x_0)}{q(x_{t}|x_0)}</script><script type="math/tex; mode=display">= \left [  \frac{1}{\sqrt{2\pi} \sqrt{1-a_{t}}} e^{\left (  -\frac{1}{2}\frac{(x_{t}-\sqrt{a_t}x_{t-1})^2}{1-a_{t}}   \right ) } \right ] * \left [ \frac{1}{\sqrt{2\pi} \sqrt{1-\bar{a}_{t-1}}} e^{\left (  -\frac{1}{2}\frac{(x_{t-1}-\sqrt{\bar{a}_{t-1}}x_0)^2}{1-\bar{a}_{t-1}}   \right ) }  \right ] \div\left [   \frac{1}{\sqrt{2\pi} \sqrt{1-\bar{a}_{t}}} e^{\left (  -\frac{1}{2}\frac{(x_{t}-\sqrt{\bar{a}_{t}}x_0)^2}{1-\bar{a}_{t}}   \right ) }\right ]</script><p><em>(我算到这里就不会解了XD，后面看别人的推导了)</em></p><p>最后，可得：</p><script type="math/tex; mode=display">\frac{1}{\sqrt{2\pi} \left ( {\frac{ \sqrt{1-a_t} \sqrt{1-\bar{a}_{t-1}} } {\sqrt{1-\bar{a}_{t}}}}  \right ) }  exp \left[-\frac{1}{2}\frac{  \left(    x_{t-1} - \left(      {\frac{\sqrt{a_t}(1-\bar{a}_{t-1})}{1-\bar{a}_t}x_t      +      \frac{\sqrt{\bar{a}_{t-1}}(1-a_t)}{1-\bar{a}_t}x_0}       \right)  \right) ^2} {   \left( {\frac{ \sqrt{1-a_t} \sqrt{1-\bar{a}_{t-1}} } {\sqrt{1-\bar{a}_{t}}}}  \right)^2 }\right]</script><p>由于 $x_0$ 为我们需要的结果，因此：</p><p>根据 $x_{t} = \sqrt{\bar{a}_t}\times x_0+ \sqrt{1-\bar{a}_t}\times ϵ$, $x_0 = \frac{x_t - \sqrt{1-\bar{a}_t}\times ϵ}{\sqrt{\bar{a}_t}}$ ，替换 $x_0$ ，可得</p><script type="math/tex; mode=display">p(x_{t-1}|x_{t}) \sim N\left(       {\frac{\sqrt{a_t}(1-\bar{a}_{t-1})}{1-\bar{a}_t}x_t      +      \frac{\sqrt{\bar{a}_{t-1}}(1-a_t)}{1-\bar{a}_t}\times \frac{x_t - \sqrt{1-\bar{a}_t}\times ϵ}{\sqrt{\bar{a}_t}} } ,       {\frac{ \beta_{t} (1-\bar{a}_{t-1}) } { 1-\bar{a}_{t}}}  \right) \tag{10}</script><p><strong>由此，我们可以利用公式(10)推导出来的关系，由 $x_T$ 不断反向推导到 $x_0$</strong></p><h3 id="3-4-含义解释"><a href="#3-4-含义解释" class="headerlink" title="3.4 含义解释"></a>3.4 含义解释</h3><p>我们理解含义为：任意时刻 $x_{t}$ 的图像，都是由 $x_{0}$ 时刻的图像直接加噪而来的。因此，只要知道ϵ，便可求出上一时刻$x_{t-1}$的概率分布。</p><p>此处，训练神经网络用于预测  $x_{t}$ 时刻的图像相对于  $x_{0}$ 时刻的图像加入的噪声ϵ，然后得到 $x_{t-1}$ 时刻图像的概率分布，用此概率分布进行随机采样，便可得到 $x_{t-1}$ 时刻图像，反复迭代上述过程，便可获得 $x_{0}$ 时刻的图像</p><p>我们已知：</p><script type="math/tex; mode=display">\bar{a}_{t} := a_{t}a_{t-1}a_{t-2}a_{t-3}...a_{2}a_{1}</script><script type="math/tex; mode=display">x_{t} = \sqrt{\bar{a}_t}\times x_0+ \sqrt{1-\bar{a}_t}\times ϵ , ϵ \sim N(0,I)</script><p>$x_{T}$ 时刻 $\bar{a}$ 接近于0，因此 $x_T \approx ϵ$，即 $x_T$ 的图像近似于标准正态分布，即为任意一张标准正态分布噪声图像。</p><p>也就是说，任意一张标准正态分布噪声图像都是由某张 $x_0$ 图像加噪声得来的，因此对标准正态分布的图像进行随机采样就可获得 $x_T$ 时刻图像。</p><p>此时，神经网络接受参数 $x_t$ 和 $t$ ， $x_t$ 用于预测噪声ϵ， $t$ 用于学习图像在加入噪声序列中的位置。</p><p>从 $T$ 到 $0$ 时刻，上一时刻的正态分布标准差越来越接近0，也就是说上一时刻图像越来越靠近均值，越来越确定。</p><p><strong>上述为DDPM模型反向过程生成图片的原理。</strong></p><blockquote><p>感想：数学真奇妙。从标准正态分布噪声图像，通过不同噪声ϵ，便可反向推导出不同的 $x_0$ 时刻图像。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learnig</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过一个事故学习查找sql的执行历史</title>
    <link href="/2023/08/24/%E6%9F%A5%E6%89%BEsql%E6%89%A7%E8%A1%8C%E5%8E%86%E5%8F%B2/"/>
    <url>/2023/08/24/%E6%9F%A5%E6%89%BEsql%E6%89%A7%E8%A1%8C%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   spid,<br>         blocked,<br>         DB_NAME(sp.dbid) <span class="hljs-keyword">AS</span> DBName,<br>         program_name,<br>         waitresource,<br>         sp.waittime,<br>         sp.stmt_start,<br>         lastwaittype,<br>         sp.loginame,<br>         sp.Status,<br>         sp.hostname,<br>         a.[Text] <span class="hljs-keyword">AS</span> [TextData],<br>         <span class="hljs-built_in">SUBSTRING</span>(A.text, sp.stmt_start <span class="hljs-operator">/</span> <span class="hljs-number">2</span>,<br>         (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> sp.stmt_end <span class="hljs-operator">=</span> <span class="hljs-number">-1</span> <span class="hljs-keyword">THEN</span> DATALENGTH(A.text) <span class="hljs-keyword">ELSE</span> sp.stmt_end<br>         <span class="hljs-keyword">END</span> <span class="hljs-operator">-</span> sp.stmt_start) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> [current_cmd]<br><span class="hljs-keyword">FROM</span>     sys.sysprocesses <span class="hljs-keyword">AS</span> sp <span class="hljs-keyword">OUTER</span> APPLY sys.dm_exec_sql_text (sp.sql_handle) <span class="hljs-keyword">AS</span> A<br><span class="hljs-keyword">WHERE</span>    spid <span class="hljs-operator">&gt;</span> <span class="hljs-number">50</span> <span class="hljs-keyword">and</span> lastwaittype<span class="hljs-operator">=</span><span class="hljs-string">&#x27;HADR_SYNC_COMMIT&#x27;</span>            <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> blocked <span class="hljs-keyword">DESC</span>, DB_NAME(sp.dbid) <span class="hljs-keyword">ASC</span>, a.[text];<br></code></pre></td></tr></table></figure><p>忘记从哪个老哥那里抄来的了，在此感谢老哥！</p><h2 id="故事梗概"><a href="#故事梗概" class="headerlink" title="故事梗概"></a>故事梗概</h2><p>23号快下班的时候，收到客户的信息，说是在执行了一个500行左右插入的sql后，服务器卡死了。</p><p>上手先看日志，没发现什么异常。</p><p>对执行插入的表SELECT TOP (100)，也没有异常，正常查询出来结果。</p><p>没办法只能先重启服务试一下。然而，没什么效果（；´д｀）ゞ</p><p>把组里之前做这个项目的哥请过来看，打开任务管理器，CPU占有率100%映入眼帘，一看都是SSMS占有的，直接把数据库脱机，服务暂停，再看日志，这个时候日志打印出来了，报错连接数为0。</p><p>暂时还没想到什么问题，联机数据库，重启服务，恢复正常了。查询直接插入的数据，一条也查不到，怀疑发生了回滚。和组里的哥怀疑是插入动作和其他用户的查询操作发生了碰撞，计划晚上再看。</p><p>晚上，我先查询数据库的执行历史，在客户提供截图上的提交时间，根本没查询到任何的sql提交。再把客户的sql拿过来执行，本来以为会无事发生的，没想到复现问题，同时按照时间倒序查询该表也无法查询，真的是sql的锅！</p><p>一开始怀疑是数据类型或者主键的问题，于是我自己写了一个sql，把客户的数据拿过来，执行成功，毫无问题！</p><p>不是数据的问题，有点迷茫，打开SQL profile,再执行一遍，监视动态，也看不出来任何问题XD</p><p>一筹莫展的时候，突然想起来锁，一看客户的sql，begin trans后没有commit！！！</p><p><strong>原因发现</strong>：问题是插入的sql里打开了一个事务，但是结尾的地方没有commit，导致事务一直处于未完成的状态，不会修改实际数据，相关的数据行也会加锁，导致所有相关的读操作都会等待，且数据库链接一断开就直接回滚，所以在历史sql执行记录里找不到执行历史，也无法实际成功插入。</p><p>这就是为什么能查TOP(1000),但无法倒序查，也无法查相关数据的原因，因为排他锁！</p><p><strong>事件教训</strong>：良好的代码习惯很重要！数据操作要谨慎，不然漏一行代码，可以干爆服务器。大学的数据库课程发挥了作用，数据库的书还是要留着拿出来翻翻。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Harmonious Textual Layout Generation Over Natural Images via Deep Aesthetics Learning</title>
    <link href="/2023/08/01/HarmoniousTextualLayout/"/>
    <url>/2023/08/01/HarmoniousTextualLayout/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>发表信息</p><p>收录于：IEEE Transactions on Multimedia</p>          </div><h2 id="0-介绍-Introduction"><a href="#0-介绍-Introduction" class="headerlink" title="0 介绍 Introduction"></a>0 介绍 Introduction</h2><p>过去对于问题的Solutions：</p><ul><li><p>Text to Viz : 有许多参数需要针对文本布局和大小选择进行调整</p></li><li><p>Content-aware generative modeling of graphic design layouts : 需要大量的数据，在视觉设计领域收集和标记高质量的数据是昂贵的。</p></li></ul><p><strong>以前的</strong>：强调图像元素与文本的排列关系。</p><p>但其实图像上的文本问题存在更多约束。</p><p><strong>约束</strong>：1. 背景图像上的元素关系几乎不会改变。2. 对于图像上元素的标注十分昂贵。3. 因为主观性，所以评判排版结果。</p><p><strong>我们的工作</strong>：</p><ul><li><p>显著性感知文本区域建议</p><p>视觉感知原则下，考虑了：文本位置，文本大小，图像内容。</p></li></ul><p><a href="https://mermaid.live/edit#pako:eNqNVN9P01AU_leaS0gg6cjWrd3WBx8MmhglGsAXnQ93_cEau3bp7gKTLNlUmANkIGwooBNxbEREzHxAifOfobfdf-HdygpDIWv6cM8533e-79zb3lkg6KIEeCCr-rQQgwaiJm9GNIo8g4NUMhWdMmAiRk3efxDRztMorUqUIjKUrKgqPxCNynQSGfpTiR-QOe5s7ZlWRBTjmcQMLeiqbpCa3MV5RJgkYgZM8xRLsU5nV806ODg9zuKvVSfffkTFkASk6Bp1b_w8C31D-G3TXt3A2RrezeJK1fq9ap1sD1Mezw0KMkOPza2m-aJo1-btWqGVf23v5Qj0ybDTQtLE_yj_WupDOUqUC_u4tIvLP636oiMYJYK4nMfbB6397-ZCHe89t5bz16sdF_pQE4ia03d901qv4Fcr1uEGbpQcWaE9Z_ZdK1twQf9oulvaYVwa0w3d4pkrctZuh8ufhLmybBaPrMaJdVLpQZAXl4_MTx_Gb98Z7XTEy_VWNmeW5s213OmfHZz71kPoReOtHyTRjsw3Sw5n4u5Da_PlGEwkFG3KnGsQ0d4GfVEuWHEIZAKCudLWlZPjwiJeytmHTfNzvtdHYZGcut1cM-eq-P2O9THnaLrzXUJ_wcViH7hrLTvMTvGir9Pjhb5nI382AjSIS0YcKiK5C2bbtQhAMSkuRQBPlqIkw5SKIiCiZQg0lRAhkm6JCtINwCMjJdEAppA-kdaEbuxgRhVINi0OeBmqSZJNQO2Rrse7IBICfhbMAN7nZ0fCAY7x-YIBrz_AhGiQBnyQGwlzLBfkvCwX8DNhf4YGzzp87wgXYv0hn88bDgbCoWCYoYHUMTTmXGidey3zF3eaBLc"><img src="https://mermaid.ink/svg/pako:eNqNlFFv0lAUx79Kc5clW1IIFFqgDz6YaWJ00WzzRfHh0pbRCC0pJRsSElA3ZCBsbjDdpjgng0WcM_iAEvHL0Fv4Fl7o1gG6hZs-3HvO_5zfOff23jjgZF4ALPAH5RUuABWVWLrplQg8pqeJSNS3rMBwgFi6_8ArXZrVWFAgRJ4i_GIwyE75fH4yoiryU4Gd8jPM-dyyIvJqgKXCqyQnB2UF-_wXOgsPIximwBhL0ARtZDZper3eaSbR14ph7w9eVAROFWWJuLdwaYX2GfS23d3aRckqOkqickX_vaW3DmYJi-UGAamZx9p-W3tR6FbXu9VML_26e5zC0iezRgpB4v9D_pWbgOzD5MwJKh6h0k-9ljWAPgxEpTQ6qPdOvmsbNXT8XM-nr6c1MxPQOEwz8u7s6Ttl9GpTP91FjaKB5fp9Jt_1khlT9A_T3NJBxFib5tJ0nleFz9rMMP5LaJt5rXCmN1p6qzyiwB8qnWmfPizcvjM3yIjytV4ypRXXte1U588hSn0bCRhVo_0f2NBfaW9yRszi3Yf63st5GA6L0rK21sDQ0QQThQyVYgTgDrDmyrKu7BxlsiiX6p62tc_p0ToyWXzq3fa2tlZB7w_1jymDafY3pv6CCoUJdNeWbEQOnMN1dZobE_eGb7YKSBASlBAUefwWxPs-L1ADQkjwAhZPecEPo0HVC7xSAkthVJUXYxIHWFWJCiSIhnmoCnMixBsUGjXe4kVVVi5sYSg9kuXQ0BKwcbAKWLuDtnqcDGWnXIybpp0uEsQA62KsHoZmXLSDdtpsDk-CBM8G4TYrVjncdrvd4XRTlIdyk0AYkOaN52zwqiX-Am4BBDI" alt="流程1"></a></p><ul><li><p>基于美学的文本布局选择</p><ul><li><p>用深度学习模型提取不同文本区域的显著性特征和组成特征</p></li><li><p>构造了TLA数据集，包含了图像的密集注释</p></li></ul></li></ul><p><strong>主要贡献</strong>：</p><ol><li><p>显著性文本感知方案。</p></li><li><p>基于美学的深度评分网络→感知候选文本区域之间的视觉差异。</p></li><li><p>提出合理的评估方案用于检验TLA数据集方法的有效性。</p></li></ol><h2 id="1-相关工作-Related"><a href="#1-相关工作-Related" class="headerlink" title="1 相关工作 Related"></a>1 相关工作 Related</h2><p>三个相关方面：自动图形设计，显著性检测，图像美学评估</p><h2 id="2-方法-Methods"><a href="#2-方法-Methods" class="headerlink" title="2 方法 Methods"></a>2 方法 Methods</h2><h2 id="3-实验-Experiments"><a href="#3-实验-Experiments" class="headerlink" title="3 实验 Experiments"></a>3 实验 Experiments</h2><h2 id="4-结论-Conclusions"><a href="#4-结论-Conclusions" class="headerlink" title="4 结论 Conclusions"></a>4 结论 Conclusions</h2>]]></content>
    
    
    
    <tags>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些正则记录</title>
    <link href="/2023/04/13/SomeRegularization/"/>
    <url>/2023/04/13/SomeRegularization/</url>
    
    <content type="html"><![CDATA[<h2 id="1-数字判断"><a href="#1-数字判断" class="headerlink" title="1. 数字判断"></a>1. 数字判断</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 判断数字和小数，只能有一个小数点，小数点后最多4位</span><br>val = val.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[^\d.]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.&#123;2,&#125;/g</span>, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(0(0)+|\.)/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;$#$&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\./g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;$#$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(-)*(\d+)\.(\d&#123;1,4&#125;).*$/</span>, <span class="hljs-string">&#x27;$1$2.$3&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH多账户配置</title>
    <link href="/2023/02/24/SSHMultiAccountConfig/"/>
    <url>/2023/02/24/SSHMultiAccountConfig/</url>
    
    <content type="html"><![CDATA[<p><em>起因：想要在虚拟机上同时使用两个Git账户管理代码，相互之间不能影响，目前已经有一个账户了。</em></p><h2 id="1-生成SSH-Key"><a href="#1-生成SSH-Key" class="headerlink" title="1 生成SSH-Key"></a>1 生成SSH-Key</h2><p>目前已经有<code>id_rsa</code>和<code>id_rsa.pub</code>一对密钥了，再使用指令生成另一对。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -C <span class="hljs-string">&quot;XXXX@XXX.com&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-修改-ssh-config文件"><a href="#2-修改-ssh-config文件" class="headerlink" title="2 修改 ~/.ssh/config文件"></a>2 修改 ~/.ssh/config文件</h2><p>将新生成的密钥<code>YYY</code>和原来的密钥都放到.ssh文件夹下。</p><p>修改内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># used by XXX</span><br>Host XX.XXX.XXX.XXX:XXXX<br>  HostName XXX<br>  PreferredAuthentications publickey<br>  IdentityFile ~/.ssh/id_rsa<br>  IdentitiesOnly <span class="hljs-built_in">yes</span><br> <br><span class="hljs-comment"># used by YYY</span><br>Host YYY.github.com <span class="hljs-comment"># 防止冲突</span><br>  HostName github.com<br>  PreferredAuthentications publickey<br>  IdentityFile ~/.ssh/YYY<br>  IdentitiesOnly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h2 id="3-将新生成的密钥添加到Github账户里并测试联通性"><a href="#3-将新生成的密钥添加到Github账户里并测试联通性" class="headerlink" title="3 将新生成的密钥添加到Github账户里并测试联通性"></a>3 将新生成的密钥添加到Github账户里并测试联通性</h2><p>使用如下指令测试联通性：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -T git@YYY.github.com <span class="hljs-comment">#后半部分和Config文件的Host保持一致</span><br></code></pre></td></tr></table></figure><p>联通了就可以正常使用啦 ~ OvO</p><h2 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4 使用方法"></a>4 使用方法</h2><p>在<code>git clone</code>时，要将后缀改成Config文件里那种形式。随手拿个仓库举个栗子~</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 原来的</span><br>git <span class="hljs-built_in">clone</span> git@github.com:yui73/2022ECNUInfoVis.git<br><span class="hljs-comment"># 现在的</span><br>git <span class="hljs-built_in">clone</span> git@YYY.github.com:yui73/2022ECNUInfoVis.git<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客升级踩坑记录</title>
    <link href="/2023/02/08/MyBlogUpgrade/"/>
    <url>/2023/02/08/MyBlogUpgrade/</url>
    
    <content type="html"><![CDATA[<h1 id="博客升级踩坑记录"><a href="#博客升级踩坑记录" class="headerlink" title="博客升级踩坑记录"></a>博客升级踩坑记录</h1><h2 id="1-增加环境分支"><a href="#1-增加环境分支" class="headerlink" title="1 增加环境分支"></a>1 增加环境分支</h2><p>同时在虚拟机和自己的电脑上写博客，每次更改环境，同步博客都是很令人头疼的问题，因此想到通过git实现环境的管理和同步，在网上搜索之后发现可以在pages的仓库里再新建一个分支用于管理环境。</p><p>Hexo的文件夹下已经默认有一个<code>.gitignore</code>文件，里面将一些无需上传git的文件已经忽略了。内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gitignore">.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules/<br>public/<br>.deploy*/<br>_multiconfig.yml<br></code></pre></td></tr></table></figure><p>大体方法如下：</p><ul><li><p>新建分支XXX</p></li><li><p>下载仓库到本地</p></li><li><p>删除除了<code>.git</code>以外的所有东西</p></li><li><p>提交并<code>git push origin XXX(新的分支名)</code>清空分支上的所有内容</p></li><li><p>将<code>.git</code>复制到Hexo目录下</p></li><li><p>再提交并<code>git push origin XXX(新的分支名)</code>将环境内容提交到环境分支上</p></li></ul><p><em>但还是有需要修改源码的时候，我这里是用markdown做一个记录，在升级node_modules或者theme后，要重新复制修改后覆盖进去。</em></p><h2 id="2-添加Letax渲染"><a href="#2-添加Letax渲染" class="headerlink" title="2 添加Letax渲染"></a>2 添加Letax渲染</h2><p>使用的Hexo环境如下：</p><div class="table-container"><table><thead><tr><th>内容</th><th>版本</th></tr></thead><tbody><tr><td>hexo</td><td>6.3.0</td></tr><tr><td>theme</td><td>fluid@latest</td></tr></tbody></table></div><h3 id="2-1-选择渲染引擎"><a href="#2-1-选择渲染引擎" class="headerlink" title="2.1 选择渲染引擎"></a>2.1 选择渲染引擎</h3><blockquote><p>网上说的引擎都试了一遍，最后只有这一个可以用的</p></blockquote><ul><li><p>卸载原有的渲染引擎<code>npm uninstall hexo-renderer-marked --save</code></p></li><li><p>安装kramed引擎<code>npm install hexo-renderer-kramed --save</code></p></li><li><p>修改转义规则</p><ul><li><p>打开目录<code>/node_modules/kramed/lib/rules/inline.js</code></p></li><li><p>修改11行为<code>escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</code></p></li><li><p>修改21行为<code>em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></p></li></ul></li></ul><blockquote><p>2023年9月18日：发现这个方法在接入自动化部署后会产生bug，由于是直接修改的node_modules，因此会导致Github Actions渲染失败。<strong>解决方法：尝试使用patch-package进行维护，或者自己发布一个npm。XD</strong></p></blockquote><h3 id="2-2-选择CDN"><a href="#2-2-选择CDN" class="headerlink" title="2.2 选择CDN"></a>2.2 选择CDN</h3><blockquote><p>处理完上述问题后，Mathjax报错<code>Mixed Content:blahblah http访问不到</code></p></blockquote><p>一开始以为是CDN链接的问题，改了好多链接：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># mathjax: https://lib.baomitu.com/mathjax/3.2.0/</span><br><span class="hljs-comment"># 上面这个是默认的 缺少字体 渲染不成功</span><br><span class="hljs-comment"># mathjax: https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br><span class="hljs-comment"># 这个是网上的 啥也加载不出来 还没找原因</span><br><span class="hljs-comment"># mathjax: https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/</span><br><span class="hljs-comment"># 这个是上一个版本的 原来的 成功了 可能有点慢</span><br><br><span class="hljs-comment">#被拦截 mathjax: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br><span class="hljs-comment">#出错 mathjax: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br><span class="hljs-comment"># 采用的</span><br><span class="hljs-attr">mathjax:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/</span><br></code></pre></td></tr></table></figure><p>后来发现真正解决需要修改主题的Layout</p><h3 id="2-3-修改Layout"><a href="#2-3-修改Layout" class="headerlink" title="2.3 修改Layout"></a>2.3 修改Layout</h3><p>发现<code>Mixed Content</code>报错可以在html的head里添加标签解决（自动将http请求转化为https请求）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;upgrade-insecure-requests&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这就需要修改主题的模板文件，因此不太能使用npm来安装主题，需要下载主题的压缩包并解压到<code>\Hexo\themes\fluid</code>里面</p><p>修改<code>\Hexo\themes\fluid\layout\_partials\head.ejs</code></p><p>在head标签下添加上述内容即可。</p><div class="note note-info">            <p>发现官方支持了直接在主题里开启强制https,在主题配置文件里开启，force_https: true 即可，目前先不改了。</p>          </div><h3 id="2-4-渲染出错"><a href="#2-4-渲染出错" class="headerlink" title="2.4 渲染出错"></a>2.4 渲染出错</h3><p><em>本来以为问题解决了，结果一刷新就乱码，搜了好多好多好多多多博客才找到是页面懒加载的问题。</em></p><p><strong>参考博客</strong>：<a href="https://cloud.tencent.com/developer/article/2067298">博客地址</a></p><p>公式懒加载之后就无法再次嵌入网页中，因此需要取消对公式的懒加载。</p><p>因此需要删除<code>\Hexo\themes\fluid\layout\_partials\math.ejs</code>中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ejs">loader : &#123;<br>  $&#123; lazy ? &#x27;load: \[\&#x27;ui/lazy\&#x27;\]&#x27; : &#x27;&#x27; &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="3-图片加载问题"><a href="#3-图片加载问题" class="headerlink" title="3 图片加载问题"></a>3 图片加载问题</h2><p>更新主题后，图片放置的位置也出现了变化，不可以再放在<code>_posts</code>文件夹下，需要放到<code>img</code>文件夹下，再引用。</p><p>后续考虑加图床或者修改一下源码吧，不然写的时候渲染不出来不太方便。</p><p>想学习的博客：<a href="http://www.mmyosotis.cn/post/3433766775/">基于fluid主题的基础样式修改</a></p><p><em>为了给博客加Letax渲染真的是踩坑无数，之前加的Mermaid渲染可能又要重新再配一遍，配的时候再记录吧。这次配下来的感想就是主题还是直接源码装比较好，便于修改。</em></p><h2 id="4-自动化部署"><a href="#4-自动化部署" class="headerlink" title="4 自动化部署"></a>4 自动化部署</h2><blockquote><p>没有自动化部署，每次更新文章都要本地有环境先编译再上传到仓库里，有点麻烦考虑用自动化部署简化流程。</p></blockquote><h3 id="4-1-巨硬家的DevOps"><a href="#4-1-巨硬家的DevOps" class="headerlink" title="4.1 巨硬家的DevOps"></a>4.1 巨硬家的DevOps</h3><p>（要钱并且要申请，看到一篇非常详细的<a href="https://www.imaegoo.com/2019/hexo-ci/">博客</a>讲了如何配置）</p><h3 id="4-2-Github-Actions"><a href="#4-2-Github-Actions" class="headerlink" title="4.2 Github Actions"></a>4.2 Github Actions</h3><p>配置简单，容易上手，将我从配环境的苦海当中拯救出来（<em>＾-＾</em>）</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/137867759">知乎</a></p><ul><li><p>Step 1: 获取Token</p></li><li><p>Step 2: 配置Secret变量<code>GIT_EMAIL/GH_TOKEN</code></p></li><li><p>Step 3: 在<code>.github</code>文件夹下，新建<code>workflows</code>文件夹，新增<code>deployment.yml</code></p></li><li><p>Step 4: 添加工作流配置到<code>deployment.yml</code>中</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 文件路径 .github/workflows/deployment.yml</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Deployment</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">hexo</span>] <span class="hljs-comment"># only push events on source branch trigger deployment</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">hexo-deployment:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">source</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;12.x&#x27;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">Generate</span> <span class="hljs-string">static</span> <span class="hljs-string">files</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        node -v</span><br><span class="hljs-string">        npm i -g hexo-cli</span><br><span class="hljs-string">        npm i</span><br><span class="hljs-string">        hexo clean</span><br><span class="hljs-string">        hexo g</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Github</span> <span class="hljs-string">Pages</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">WillCAI2020</span><br>        <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GIT_EMAIL</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">REPO:</span> <span class="hljs-string">github.com/WillCAI2020/WillCAI2020.github.io</span><br>        <span class="hljs-attr">GH_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GH_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        cd ./public &amp;&amp; git init &amp;&amp; git add .</span><br><span class="hljs-string">        git config --global user.name $GIT_NAME</span><br><span class="hljs-string">        git config --global user.email $GIT_EMAIL</span><br><span class="hljs-string">        git commit -m &quot;Site deployed by GitHub Actions&quot;</span><br><span class="hljs-string">        git push --force --quiet &quot;https://$GH_TOKEN@$REPO&quot; master:master</span><br></code></pre></td></tr></table></figure><ul><li>Step 5: 提交修改到同步仓库，进入Actions页面查看运行结果</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ant Design Pro项目问题记录</title>
    <link href="/2023/02/08/AntDesignProProblem/"/>
    <url>/2023/02/08/AntDesignProProblem/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2023年2月8日，由于后来就直接上手项目了，因此用本博客记录一些难以解决的问题。</p></blockquote><h2 id="1-异步同步问题"><a href="#1-异步同步问题" class="headerlink" title="1 异步同步问题"></a>1 异步同步问题</h2><p>过去太久忘记了，只记得是拆开写，以后再遇到再记下来。</p><h2 id="2-表单对齐问题"><a href="#2-表单对齐问题" class="headerlink" title="2 表单对齐问题"></a>2 表单对齐问题</h2><p>ANTD PRO的表单有三种布局格式：horizontal，vertical，inline。</p><p>常用horizontal。当想让标签后的输入框对齐时，可以给form加个布局。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> formLayout = &#123;<br>    <span class="hljs-attr">labelCol</span>:&#123;<br>      <span class="hljs-attr">flex</span>:<span class="hljs-string">&#x27;80px&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">wrapperCol</span>:&#123;<br>      <span class="hljs-attr">flex</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-comment">// 下面这也是一种，但不好用。</span><br>    <span class="hljs-comment">// labelCol:&#123;</span><br>    <span class="hljs-comment">//   xs:&#123;span:24&#125;,</span><br>    <span class="hljs-comment">//   sm:&#123;span:5&#125;,</span><br>    <span class="hljs-comment">//   md:&#123;span:4&#125;,</span><br>    <span class="hljs-comment">//   xxl:&#123;span:2&#125;,</span><br>    <span class="hljs-comment">// &#125;,</span><br>    <span class="hljs-comment">// wrapperCol:&#123;</span><br>    <span class="hljs-comment">//   xs:&#123;span:24&#125;,</span><br>    <span class="hljs-comment">//   sm:&#123;span:19&#125;,</span><br>    <span class="hljs-comment">//   md:&#123;span:20&#125;,</span><br>    <span class="hljs-comment">//   xxl:&#123;span:22&#125;,</span><br>    <span class="hljs-comment">// &#125;,</span><br>  &#125;;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ProForm</span> &#123;<span class="hljs-attr">...formLayout</span>&#125;/&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/img/img_in_posts/AntDesignProLearning/1_Form.png" alt="Form"></p><h2 id="3-登录问题"><a href="#3-登录问题" class="headerlink" title="3 登录问题"></a>3 登录问题</h2><p><em>起因：需要搭建一个新的前端，使用最新的ANTD Pro的框架。ANTD Pro V5最新版本将原先的Umi3升级到Umi4并且脚手架也不再支持JS，默认全为TS。因此，登录等涉及到脚手架的内容需要重写，将原先的JS代码转换为TS代码。</em></p><h3 id="3-1-如何实现登录"><a href="#3-1-如何实现登录" class="headerlink" title="3.1 如何实现登录"></a>3.1 如何实现登录</h3><p>此处涉及到三个关键文件：</p><p><em>下面的很多代码都是脚手架会自动生成的，只要注意几个配置的关键点，即可。</em></p><ul><li><p><code>./User/Login/index.tsx</code></p><p>登录页面的提交登录表单的方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">values: API.LoginParams</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 登录</span><br>    <span class="hljs-keyword">const</span> msg = <span class="hljs-keyword">await</span> <span class="hljs-title function_">login</span>(&#123; ...values &#125;,&#123;&#125;);<br>    <span class="hljs-keyword">if</span> (msg.<span class="hljs-property">success</span>) &#123;<br>      <span class="hljs-keyword">const</span> defaultLoginSuccessMessage = intl.<span class="hljs-title function_">formatMessage</span>(&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;pages.login.success&#x27;</span>,<br>        <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;登录成功！&#x27;</span>,<br>      &#125;);<br>      message.<span class="hljs-title function_">success</span>(defaultLoginSuccessMessage);<br>      <span class="hljs-comment">// 使用localStorage来存储用户token</span><br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>, msg.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>);<br>      <span class="hljs-comment">// 获取用户信息</span><br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchUserInfo</span>();<br>      <span class="hljs-keyword">const</span> urlParams = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>).<span class="hljs-property">searchParams</span>;<br>      <span class="hljs-comment">// 跳转至主页</span><br>      history.<span class="hljs-title function_">push</span>(urlParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;redirect&#x27;</span>) || <span class="hljs-string">&#x27;/&#x27;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg);<br>    <span class="hljs-comment">// 如果失败去设置用户错误信息</span><br>    <span class="hljs-title function_">setUserLoginState</span>(msg);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">const</span> defaultLoginFailureMessage = intl.<span class="hljs-title function_">formatMessage</span>(&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;pages.login.failure&#x27;</span>,<br>      <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&#x27;登录失败，请重试！&#x27;</span>,<br>    &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    message.<span class="hljs-title function_">error</span>(defaultLoginFailureMessage);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>登录页面获取用户信息的方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchUserInfo</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> userInfo = <span class="hljs-keyword">await</span> initialState?.<span class="hljs-property">fetchUserInfo</span>?.();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userInfo);<br>  <span class="hljs-keyword">if</span> (userInfo) &#123;<br>    <span class="hljs-comment">// 使用flushSync不然会出现登录两次才能登录上的问题</span><br>    <span class="hljs-title function_">flushSync</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setInitialState</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> (&#123;<br>        ...s,<br>        <span class="hljs-attr">currentUser</span>: userInfo,<br>      &#125;));<br>    &#125;);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p><em>下面两个是运行时配置文件。</em></p><ul><li><p><code>access.tsx</code></p><p><em>悄悄吐槽一下umi的文档，确实有点不知所云了。</em></p><p>参考文档：<a href="https://v3.umijs.org/zh-CN/plugins/plugin-access">umi3/plugin-access</a></p><p>文档原文：我们约定了 src/access.ts 为我们的权限定义文件，该文件需要默认导出一个方法，导出的方法会在项目初始化时被执行。该方法需要返回一个对象，对象的每一个值就对应定义了一条权限。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">access</span>(<span class="hljs-params">initialState: &#123; currentUser?: API.CurrentUser &#125; | <span class="hljs-literal">undefined</span></span>) &#123;<br><span class="hljs-keyword">const</span> &#123; currentUser &#125; = initialState ?? &#123;&#125;;<br><span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">canAdmin</span>: currentUser &amp;&amp; currentUser.<span class="hljs-property">access</span> === <span class="hljs-string">&#x27;admin&#x27;</span>,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>app.tsx</code></p><p>由于使用token作为令牌，保持会话的登录状态，因此需要使用拦截器，对请求头统一加上token。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//拦截器</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">authHeaderInterceptor</span> = (<span class="hljs-params">url:<span class="hljs-built_in">any</span>, options:<span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>) &amp;&amp; url !== loginApiPath) &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-string">&#x27;Bearer &#x27;</span> + <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br>    options.<span class="hljs-property">headers</span> = &#123;<br>      ...options.<span class="hljs-property">headers</span>,<br>      <span class="hljs-title class_">Authorization</span>: token,<br>    &#125;;<br>    options = &#123; ...options, <span class="hljs-attr">interceptors</span>: <span class="hljs-literal">true</span> &#125;;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;url&#125;</span>`</span>,<br>    <span class="hljs-attr">options</span>: &#123; ...options &#125;,<br>  &#125;;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@name</span> request 配置，可以配置错误处理</span><br><span class="hljs-comment">* 它基于 axios 和 ahooks 的 useRequest 提供了一套统一的网络请求和错误处理方案。</span><br><span class="hljs-comment">* <span class="hljs-doctag">@doc</span> https://umijs.org/docs/max/request#配置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> request = &#123;<br>  <span class="hljs-comment">// 新增自动添加AccessToken的请求前拦截器</span><br>  <span class="hljs-attr">requestInterceptors</span>: [authHeaderInterceptor],<br>  <span class="hljs-comment">// ...errorConfig,</span><br>  <span class="hljs-comment">// errorConfig是脚手架默认生成的，配置在另一个ts文件里，这里我将拦截器直接加在了app.tsx中</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2-登录时必须点击两次登录才能登录上"><a href="#3-2-登录时必须点击两次登录才能登录上" class="headerlink" title="3.2 登录时必须点击两次登录才能登录上"></a>3.2 登录时必须点击两次登录才能登录上</h3><p>由于获取用户信息是异步操作，即使登录成功得到token后，在跳转欢迎页面时，会发生currentUser为空，因此认为当前状态还未登录，又重定向到login页面的问题。</p><p>解决方法就是不要改脚手架生成的源码T A T，在调用获取用户信息的函数前加上<code>flushSync</code>提高异步执行优先级。</p><h2 id="4-脚手架安装问题"><a href="#4-脚手架安装问题" class="headerlink" title="4 脚手架安装问题"></a>4 脚手架安装问题</h2><p>起因：安装脚手架时，根据官方文档分为以下两步。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 使用 npm</span><br>npm i @ant-design/pro-cli -g<br>pro create myapp<br></code></pre></td></tr></table></figure><p>然而<code>pro create myapp</code>一直报错，显示不认识<code>Pro XXX</code>指令。</p><p>分析问题和报错，认为是环境变量当中没有npm全局安装的node_modules，所以识别不到<code>Pro XXX</code>指令。</p><p>在环境变量Path中添加<code>C:\Users\user.name\AppData\Roaming\npm</code>(也就是你全局安装node_modules的位置)</p><p>遂解决。</p><p>使用<code>npm config ls</code>指令可以查询node_modules全局安装的位置。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Front/Interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SVM 学习</title>
    <link href="/2023/02/02/SVMLearning/"/>
    <url>/2023/02/02/SVMLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="支持向量机（Support-Vector-Machine）"><a href="#支持向量机（Support-Vector-Machine）" class="headerlink" title="支持向量机（Support Vector Machine）"></a>支持向量机（Support Vector Machine）</h1><blockquote><p>最大间隔分类算法。在样本少时，预测效果好</p></blockquote><h2 id="1-线性模型"><a href="#1-线性模型" class="headerlink" title="1 线性模型"></a>1 线性模型</h2><blockquote><p>线性可分样本集（Linear Separable）；不可分就是（Non-linear…）</p></blockquote><p><strong>按照以下7步进行分析</strong></p><h3 id="1-1-哪一条直线最好？"><a href="#1-1-哪一条直线最好？" class="headerlink" title="1.1 哪一条直线最好？"></a>1.1 哪一条直线最好？</h3><p>提到最好，根据No Free Lunch Theorem，可知必须要有先验假设。</p><h3 id="1-2-定义Performance-Measure-论证不同分法的性能"><a href="#1-2-定义Performance-Measure-论证不同分法的性能" class="headerlink" title="1.2 定义Performance Measure + 论证不同分法的性能"></a>1.2 定义Performance Measure + 论证不同分法的性能</h3><p>最好情况：d 取最大值(margin)</p><p>定义：d平行线碰到的向量为<strong>支持向量</strong></p><p><em>因为最终训练的模型只与支持向量相关，所以SVM在小样本表现很好</em></p><h3 id="1-3-定义训练数据及标签"><a href="#1-3-定义训练数据及标签" class="headerlink" title="1.3 定义训练数据及标签"></a>1.3 定义训练数据及标签</h3><script type="math/tex; mode=display">(x_1,y_1),(x_2,y_2),(x_3,y_3),...,(x_n,y_n)</script><p>$x_n$ ：向量</p><p>$y_n$ ：标签 +1/-1 <em>方便将后面的两个约束条件写成约束方程。</em></p><h3 id="1-4-定义线性模型所做的事"><a href="#1-4-定义线性模型所做的事" class="headerlink" title="1.4 定义线性模型所做的事"></a>1.4 定义线性模型所做的事</h3><ul><li><p>线性模型：<code>二维 线</code> $\rightarrow$ <code>高维 超平面（Hyperplane）</code></p></li><li><p>$(\omega,b)$</p><p>  $\omega\rightarrow$ 向量；维度等于 $x$ 的维度。</p><p>  b：常数</p></li><li><p>线性方程： $W^TX+b=0$</p><p>  $W^T \rightarrow 常数$</p></li></ul><p><em>用机器学习的算法在这个模型的限定下求出</em> $(\omega,b)$</p><h3 id="1-5-定义线性可分"><a href="#1-5-定义线性可分" class="headerlink" title="1.5 定义线性可分"></a>1.5 定义线性可分</h3><p>一个训练集线性可分是指 ${(x_i,y_i)}_{i=1…N}$ $\exists$ $(\omega,b), st. 对\forall i=1…N$ 有</p><p>a) IF $y_i= +1$ ，则 $W^Tx_i+b \geq 0$<br>b) IF $y_i= -1$ ，则 $W^Tx_i+b &lt; 0$</p><p>将a式与b式综合起来得出：</p><script type="math/tex; mode=display">y_i[W^TX_i+b] \ge 0\tag1</script><p>线性可分便是使得公式(1)存在解。</p><h3 id="1-6-优化问题"><a href="#1-6-优化问题" class="headerlink" title="1.6 优化问题"></a>1.6 优化问题</h3><blockquote><p>也是一个凸优化问题-二次规划</p></blockquote><p>最小化（Minimize）： 限制条件（Subject to) </p><script type="math/tex; mode=display">\frac{1} {2}||W||^2 \quad st. \quad y_i[W^TX_i+b] \ge C \quad(i=1...N)</script><p>$\frac{1} {2}$ ：求导方便</p><p>$C$ ：常数，常取1，方便计算</p><p><strong>两个事实</strong></p><ul><li><p>事实一： $W^Tx+b=0$ 与 $aW^tx+ab=0$ 是同一个平面。 $a \in R^+$ 若 $(\omega,b)$ 满足公式(1)，则 $(a\omega,ab)$ 也满足公式(1)</p></li><li><p>事实二：</p><ul><li><p>点到平面的距离公式</p><p>  平面： ${\omega}_1x+{\omega}_2y+b=0$ ，则 $(x_0,y_0)$ 到平面的距离：</p><script type="math/tex; mode=display">  d = \frac{|{\omega}_1x_0+{\omega}_2y_0+b|} {\sqrt{ {\omega}_1^2+{\omega}_2^2} }</script></li><li><p>同理，向量 $x_0$ 到超平面 $W^Tx+b=0$ 的距离</p><script type="math/tex; mode=display">  d = \frac{|W^Tx_0+b|} {||W||}</script><script type="math/tex; mode=display">  ||W||=\sqrt{ {\omega}_0^2+{\omega}_1^2+...}</script></li></ul></li></ul><p>所以，我们可以用a去缩放 $(\omega,b) \rightarrow (a\omega,ab)$ ，使得最终在支持向量 $x_0$ 上有 $|W^Tx_0+b|=1$</p><p>此时，支持向量与平面距离 $d = \frac{1} {||W||}$</p><p>那么，最小化 $||W||^2$ 就等于最大化 $d$</p><ul><li>$||W||^2$ 方便求导</li></ul><p>到这里问题转化为了凸优化-二次规划问题（Quadratic Programming）</p><blockquote><p>凸优化-二次规划问题的特点：<br>1.目标函数（Object Function）二次项 2.限制条件二次项。<br>这类问题要么无解，要么只有一个极值，且局部极值即为全局极值，因此使用梯度下降求解即可。</p></blockquote><h2 id="2-非线性模型"><a href="#2-非线性模型" class="headerlink" title="2 非线性模型"></a>2 非线性模型</h2><blockquote><p>大体思路是增加松弛变量，去高维空间找直线，理论涉及泛函</p></blockquote><h3 id="2-1-优化理论"><a href="#2-1-优化理论" class="headerlink" title="2.1 优化理论"></a>2.1 优化理论</h3><p>经典教材：<em>Convex Optimization-Stephen Boyol</em> - 凸优化；<em>Nonlinear Programming</em></p><p>介绍一下原问题与对偶问题。</p><h3 id="2-2-原问题（Prime-Problem）"><a href="#2-2-原问题（Prime-Problem）" class="headerlink" title="2.2 原问题（Prime Problem）"></a>2.2 原问题（Prime Problem）</h3><blockquote><p>非常普适的问题</p></blockquote><p>最小化：$f(\omega)$ 或者 最大化：$-f(\omega)$</p><p>限制条件：</p><script type="math/tex; mode=display">g_i(\omega) \leq 0 (i=1...K)</script><script type="math/tex; mode=display">h_i(\omega) = 0 (i=1...M)</script><p>欠着，日后更。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PythonBlog开发学习</title>
    <link href="/2022/05/19/PythonBlog/"/>
    <url>/2022/05/19/PythonBlog/</url>
    
    <content type="html"><![CDATA[<h1 id="毕业设计开发记录"><a href="#毕业设计开发记录" class="headerlink" title="毕业设计开发记录"></a>毕业设计开发记录</h1><h2 id="0-项目流程"><a href="#0-项目流程" class="headerlink" title="0 项目流程"></a>0 项目流程</h2><ul><li>架构设计<ul><li>功能模块</li><li>设计模式</li><li>项目服务器架构（Web/数据库服务器/负载均衡？）</li><li>数据库设计（什么数据库/多少张表/层次结构/关系图/分库？）</li></ul></li><li>代码模块实现</li><li>UI页面设计&amp;交互实现（用图的方式表现）</li><li>代码规范是PEP8</li></ul><h2 id="1-技术难点-amp-开发环境"><a href="#1-技术难点-amp-开发环境" class="headerlink" title="1  技术难点&amp;开发环境"></a>1  技术难点&amp;开发环境</h2><ul><li>开发环境<ul><li>Win10推荐Linux</li><li>python</li><li>django</li><li>mysql</li><li>mysql-python</li><li>pillow(图形处理库)</li></ul></li><li>表单提交与处理</li><li>文件上传</li><li>session&amp;cookie</li><li>ORM（对象映射关系 -&gt; 无需了解SQL细节）</li><li>Django模板语言（模板规划/父子模板继承/标签使用/过滤器）</li><li>JQuery（做表单验证/实现Ajax的请求/Json）</li><li>Ajax</li><li>xml</li><li>后台管理admin（很强大的后台换模板）</li><li>日志调试 （日志如何设置）</li><li>缓存 （博客以内容呈现为主-&gt;放入缓存提高效率）</li><li>安全功能（项目安全配置/防止非法远程提交 -&gt; Key/防止SQL注入）</li></ul><h2 id="2-项目搭建"><a href="#2-项目搭建" class="headerlink" title="2 项目搭建"></a>2 项目搭建</h2><ul><li>安装virtualenv,创建虚拟环境 <code>pip install virtualenv</code>，python三大神器</li><li>Pycharm新建项目，设置虚拟环境路径，安装相关库</li><li>配置静态文件&amp;模板</li><li>访问项目网页</li></ul><h2 id="3-日志器的使用"><a href="#3-日志器的使用" class="headerlink" title="3 日志器的使用"></a>3 日志器的使用</h2><p>1 如何在django中配置日志器的使用<br>2 如何调用setting.py的配置信息作为全局使用</p><h2 id="4-数据库设计"><a href="#4-数据库设计" class="headerlink" title="4 数据库设计"></a>4 数据库设计</h2><ol><li>使用的工具：PowerDesign,ERWin,Visio，Navicat Data Moduler…</li><li>数据库设计过程</li></ol><ul><li>分析可能存在的设计表<br>用户表，文章表，评论表，标签（tag)表，分类表，友链表，（后来迭代：信息表</li><li>分析可能存在的数据列，对应的数据类型及约束</li><li>设计数据模型图</li></ul><h2 id="5-Model的设计与使用"><a href="#5-Model的设计与使用" class="headerlink" title="5 Model的设计与使用"></a>5 Model的设计与使用</h2><p><code>net start mysql</code></p><ul><li>django model的设计与使用<br>主键自动维护生成</li><li>django中mysql数据库的配置</li><li>如何生成数据库<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">create database blogdb<span class="hljs-comment">;</span><br>python manage.py makemigrations blog<br><span class="hljs-meta"># 此处外键需要定义on_delete</span><br><span class="hljs-meta"># 代替syncdb使用migrate</span><br><span class="hljs-meta"># 以后model都先migration在migrate 同步更改数据库</span><br><span class="hljs-meta"># 创建超级用户</span><br>python manage.py createsuperuser<br><span class="hljs-symbol">username:</span>admin<br><span class="hljs-symbol">email:</span>ad66204635<span class="hljs-subst">@126</span>.com<br><span class="hljs-symbol">password:</span>admin<br><br>python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-admin配置"><a href="#6-admin配置" class="headerlink" title="6 admin配置"></a>6 admin配置</h2><ol><li>django admin是django.contrib的一部分<br>contrib下还包括auth，sessions，comments等模块</li><li>如何配置使用django admin<ul><li>在INSTALLED_APPS中添加django.contrib.admin</li><li>配置urls.py<br><code>url(r&#39;^admin/&#39;,include(admin.site.urls))</code></li><li>在admin中注册Model，（默认方式和自定义方式）,注意model中关于admin的一些配置<br>一些常用属性：</li><li>fields\exclude</li><li>fieldsets 编辑数据分组</li><li>list_display</li><li>list_display_links</li><li>list_editable</li><li>list_filter</li><li>inlines</li><li>…具体看文档</li><li>xadmin表现形式比较丰富</li><li>admindocs文档生成器</li></ul></li></ol><h2 id="7-增加富文本编辑器"><a href="#7-增加富文本编辑器" class="headerlink" title="7 增加富文本编辑器"></a>7 增加富文本编辑器</h2><ol><li>常见的富文本编辑器-&gt;目前需要markdown的</li><li>djangoadmin中添加富文本编辑器的几种方式：<ul><li>使用第三方的一些库ckeditor</li><li>在admin中定义富文本编辑器的widget</li><li>定义ModelAdmin的媒体文件</li></ul></li></ol><h2 id="8-图片上传"><a href="#8-图片上传" class="headerlink" title="8 图片上传"></a>8 图片上传</h2><ol><li>配置MEDIA_URL和MEDIA_ROOT</li><li>在urls.py中配置路由 url</li><li>在model中设置图片的上传位置和路径</li><li><p>一些BUG</p><ul><li>上传失败 setting的template没有<code>&#39;django.template.context_processors.media&#39;,</code></li><li><p>更新urls如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><span class="hljs-keyword">from</span> django.conf.urls.static <span class="hljs-keyword">import</span> static<br>urlpatterns = [    <br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls), <br>] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)<br><br>urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)<br></code></pre></td></tr></table></figure></li><li><p>STATICFILES_DIRS是List</p></li><li>MEDIA_ROOT是str</li></ul></li></ol><blockquote><p>进入前端开发</p></blockquote><h2 id="9-前台模板规划和设计"><a href="#9-前台模板规划和设计" class="headerlink" title="9 前台模板规划和设计"></a>9 前台模板规划和设计</h2><blockquote><p>个人认为html做的前端有点难看，使用bootstrap替换组件<br>参考博客：<a href="https://blog.csdn.net/weixin_43376839/article/details/90584377">Django制作个人博客——前端页面</a></p></blockquote><p>功能点：</p><ul><li>模板的规划和设计</li><li>导航数据获取（分类）<br>技术点：</li><li>拆分模板，抽离Base模板，block和include的使用-&gt;提高代码重用性</li><li>基本查询的使用</li></ul><blockquote><p>暂停看视频（<a href="https://www.bilibili.com/video/BV1mZ4y1p7oy?p=12）">https://www.bilibili.com/video/BV1mZ4y1p7oy?p=12）</a><br>去学一下bootstrap把前端先写了</p></blockquote><h2 id="10-Bootstrap"><a href="#10-Bootstrap" class="headerlink" title="10 Bootstrap"></a>10 Bootstrap</h2><p>学习博客：<a href="https://blog.csdn.net/python_jw/article/details/78914562?spm=1001.2101.3001.6650.5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-5.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-5.pc_relevant_paycolumn_v3&amp;utm_relevant_index=10">关于django写前端的几个好用的前端框架</a></p><ul><li>在Django中使用Bootstrap—crispy-forms<br><code>pip install django-crispy-forms</code></li><li>在settings.py添加如下配置<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">INSTALLED_APPS</span> = [    ...    <span class="hljs-string">&#x27;crispy_forms&#x27;</span>,]CRISPY_TEMPLATE_PACK = <span class="hljs-string">&#x27;bootstrap4&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>该方法有bug不好解决，替换成极客时间的方法</p></blockquote></li><li><p>在Django中使用Bootstrap</p><blockquote><p>动态方法</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pip <span class="hljs-keyword">install </span>django-<span class="hljs-keyword">bootstrap4</span><br><span class="hljs-keyword"></span>添加到app中<br>模板中使用<span class="hljs-keyword">bootstrap标签</span><br></code></pre></td></tr></table></figure><p>静态方法</p></blockquote></li><li><p>去Bootstrap官网下载（CSS/JS/FONT）</p></li><li>去JQuery官网下载JQuery</li><li>前台模板使用Clean Blog</li></ul><h2 id="11-admin使用simpleui美化"><a href="#11-admin使用simpleui美化" class="headerlink" title="11 admin使用simpleui美化"></a>11 admin使用simpleui美化</h2><ul><li>安装时遇到的问题<br>settings配置里注册app simpleui必须是第一个 覆盖默认的admin才可以</li><li>重写预设的menu</li><li>在admin中设置网站title</li></ul><p>app/admin.py中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">admin.site.site_header = <span class="hljs-string">&#x27;博客后台管理系统&#x27;</span> <br>admin.site.site_title = <span class="hljs-string">&#x27;博客后台管理系统&#x27;</span><br>admin.site.index_title = <span class="hljs-string">&#x27;博客后台管理系统&#x27;</span><br></code></pre></td></tr></table></figure></p><h2 id="12-分页器"><a href="#12-分页器" class="headerlink" title="12 分页器"></a>12 分页器</h2><blockquote><p>article表和tag表通过article_tag表连接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#分页器实现</span><br>        paginator = Paginator(all_article,<span class="hljs-number">10</span>)<br>        <span class="hljs-comment"># 分页器异常处理</span><br>        <span class="hljs-keyword">try</span>:<br>            page = <span class="hljs-built_in">int</span>(request.GET.get(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-number">1</span>))<br>            all_article = paginator.page(page)<br>        <span class="hljs-keyword">except</span> (EmptyPage,InvalidPage,PageNotAnInteger):<br>            <span class="hljs-comment"># 出错时默认第一页</span><br>            all_article = paginator.page(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></p></blockquote><h2 id="13-Manager管理器"><a href="#13-Manager管理器" class="headerlink" title="13 Manager管理器"></a>13 Manager管理器</h2><blockquote><p>开始接触一些关于数据联动的问题</p></blockquote><p>功能点：文章归档</p><p>技术点：</p><ol><li>使用<code>filter()</code>查询</li><li><code>values()</code> <code>distinct()</code>的使用 可以去重复 但还是不满足需求</li><li>django直接使用SQL的两种方式 - 不推荐<ul><li>raw （返回结果必须包含主键，因此异常）</li><li>excute （游标实现）</li></ul></li><li>尝试一些优雅的方式解决数据处理上的问题<br>自定义Manager的管理器 - 管理Modal方法</li></ol><h2 id="14-第一次代码重构"><a href="#14-第一次代码重构" class="headerlink" title="14 第一次代码重构"></a>14 第一次代码重构</h2><blockquote><p>提高代码可重用性</p></blockquote><p>技术点：</p><ol><li>orderby的使用，限制取出条数</li><li>使用filter()完成查询</li><li>提高代码可重用性<ul><li>分页代码重构</li><li>urls.py路由重构</li><li>全局代码重构</li></ul></li></ol><h2 id="15-文章详情页的实现"><a href="#15-文章详情页的实现" class="headerlink" title="15 文章详情页的实现"></a>15 文章详情页的实现</h2><ul><li>新增article.html、login.html、reg.html</li><li>修改了Comment Model和User Model-&gt;实现匿名评论</li><li>增加功能代码<br>技术点：</li><li>DoesNotExist异常,文章查询不出的异常,get方法查询数据。</li><li>safe过滤器的使用&amp;date过滤器的使用</li><li>自定义过滤器<br>难点：</li><li>将后台markdown格式的content渲染成前端的正常页面</li></ul><ol><li><p>使用django的django-markdown-deux模块</p><ul><li><code>pip install django-markdown-deux</code></li><li>修改setting.py,在installed_apps中加入django-markdown-deux</li><li>在文章内容后面加上<code>|markdown</code>过滤器</li></ul></li><li><p>模块不支持代码渲染</p></li><li>模块图片显示过大</li></ol><blockquote><p>因此更换第二种方法</p></blockquote><hr><p>备用方法：</p><ol><li><p>使用python的markdown模块</p><ul><li><p><code>pip install markdown</code></p></li><li><p>在文章view里引入</p></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">article = markdown.markdown(article.body,extensions=[<br>      <span class="hljs-string">&#x27;markdown.extensions.extra&#x27;</span>,<br>      <span class="hljs-string">&#x27;markdown.extensions.codehilite&#x27;</span>,<br>      <span class="hljs-string">&#x27;markdown.extensions.toc&#x27;</span>,<br>  ])<br></code></pre></td></tr></table></figure><ul><li>在文章内容后面加上<code>|markdown</code>过滤器</li></ul><ol><li>此时代码能正常显示，但没有高亮，增加高亮<ul><li><code>pip install Pygments</code></li><li>在静态资源库中新建<code>md_css</code>文件夹存放代码高亮的css</li><li>进入<code>md_css</code>执行指令<code>pygmentize -S monokai -f html -a .codehilite &gt; monokai.css</code> <code>-S</code>后面是风格样式；也可用<code>pygmentize -S default -f html -a .codehilite &gt; styles.css</code>这样就是默认样式</li><li>将<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static 'blogpost/css/styles.css' %&#125;&quot;&gt;</code>放到<code>article.html</code>的最前面</li></ul></li><li>注意上述方法都要加<code>&#123;|safe&#125;</code>过滤器，否则html会转义内容，造成乱码。</li><li>图片过大显示问题<ul><li>在上传时<code>![](/media/editor\Cygwin_20220501234455635202.PNG)&#123;:width=&quot;100%&quot; align=center&#125;</code>即可。</li></ul></li></ol><h2 id="16-第二次代码重构-页面管理解耦"><a href="#16-第二次代码重构-页面管理解耦" class="headerlink" title="16 第二次代码重构-页面管理解耦"></a>16 第二次代码重构-页面管理解耦</h2><blockquote><p>多表继承方法</p><ul><li>分开写设计网页管理父类<code>PageManager</code></li><li>About页面继承<code>PageManager</code>后进行修改（不可继承-还是分开写了</li><li>代码解耦（html)</li></ul></blockquote><h2 id="17-Contact-Me页面"><a href="#17-Contact-Me页面" class="headerlink" title="17 Contact Me页面"></a>17 Contact Me页面</h2><blockquote><p>sb-from 要钱才能获得API-Token 换成MUI的Form</p></blockquote><ol><li><a href="https://www.muicss.com/">MUI官网</a></li></ol><h2 id="18-增加文章目录"><a href="#18-增加文章目录" class="headerlink" title="18 增加文章目录"></a>18 增加文章目录</h2><blockquote><p>在view.py中 -&gt; 有bug暂缓 -&gt; 论如何在html里调用JS -&gt; 还是有bug</p></blockquote><ol><li>增加toc插件<code>markdown.extensions.toc</code></li><li>将md文件进行转义</li><li>目录美化</li></ol><h2 id="19-增加评论功能"><a href="#19-增加评论功能" class="headerlink" title="19 增加评论功能"></a>19 增加评论功能</h2><blockquote><p>单独写在comment.html里 先写评论功能</p></blockquote><ol><li>评论信息的读取。注意一些细节（减少数据库读写次数）</li><li>发表评论</li><li>客户端验证和服务器端验证</li><li>csrf验证，防止跨站请求伪造（Cross-site forgery)</li><li>表单的使用</li><li>评论表单路径配置与表单action功能绑定</li><li>articleId 获取失败 -&gt; 如何自动获取: action里绑定articleId <code>action=&quot;&#123;% url 'comment_post' %&#125;?id=&#123;&#123; article.id &#125;&#125;&quot;</code></li></ol><ul><li>技术点2： 回复评论功能</li></ul><ol><li>使用Modal，但是Bootstrap的Modal只加载一次，需要在JS里remove，再重新add。</li></ol><h2 id="20-登录功能"><a href="#20-登录功能" class="headerlink" title="20 登录功能"></a>20 登录功能</h2><blockquote><p>注册/登录/注销功能</p></blockquote><ol><li>django.contrib.auth(logout,login,authenticate)</li><li>django.contrib.auth.hashers(make_password) django的加密方式</li><li>使用redirect进行跳转</li><li>模板在如何判断用户是否登陆</li><li>django 和 bootstrap等前端模板的相互融合</li></ol><h2 id="21-ContactMe自动发邮件功能"><a href="#21-ContactMe自动发邮件功能" class="headerlink" title="21 ContactMe自动发邮件功能"></a>21 ContactMe自动发邮件功能</h2><ol><li>安装包<code>pip install flask -mail</code></li><li>开启邮箱POP3/SMTP服务</li><li>增加settings.py中的相关配置</li><li>在views.py里进行函数调用</li><li>防止表单重新提交-&gt; 用重定向解决</li></ol><h2 id="SPECIAL-一些问题"><a href="#SPECIAL-一些问题" class="headerlink" title="SPECIAL 一些问题"></a>SPECIAL 一些问题</h2><ul><li>Pycharm Community 对Django没有support，因此需要升级成Pycharm Professional版本</li><li>升级过后 开启项目设置中对django的支持(如下图)</li></ul><p><img src="/img/img_in_posts/PythonBlog/DjangoSupport.png" alt="DjangoSupport"></p><ul><li>Bootstrap下拉菜单失效问题<br>JS导入不全，必须按照以下顺序<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- JS顺序不可变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/jquery-3.6.0.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/bootstrap.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Bootstrap core JS--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/bootstrap.bundle.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Core theme JS--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/scripts.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些小技巧</title>
    <link href="/2022/04/14/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/04/14/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h1><h2 id="1-2022-4-14-列选择和正则选择"><a href="#1-2022-4-14-列选择和正则选择" class="headerlink" title="1 2022/4/14 - 列选择和正则选择"></a>1 2022/4/14 - 列选择和正则选择</h2><h3 id="1-1-列选择"><a href="#1-1-列选择" class="headerlink" title="1.1 列选择"></a>1.1 列选择</h3><blockquote><p>在后期将前端的dataIndex与数据库字段统一起来后，对前端默认测试数据字段进行统一，一个一个改太麻烦了，第一个进入脑海的便是列选择的功能</p></blockquote><ul><li>快捷键：<code>alt+shift+鼠标左键拖动</code></li><li>鼠标中键拖动</li></ul><h3 id="1-2-正则选择"><a href="#1-2-正则选择" class="headerlink" title="1.2 正则选择"></a>1.2 正则选择</h3><blockquote><p>极客时间Django开发的老师使用过这个方法</p></blockquote><ul><li><code>Ctrl+F</code>调出搜索框</li><li>输入正则匹配式</li></ul><h3 id="1-3-VScode好用的插件"><a href="#1-3-VScode好用的插件" class="headerlink" title="1.3 VScode好用的插件"></a>1.3 VScode好用的插件</h3><ul><li>koroFileHeader：用于生成注释</li><li>git-commit-plugin：辅助生成git上传的comment</li><li>ESLint：规范JS代码</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习之旅</title>
    <link href="/2022/03/28/MachineLearning/"/>
    <url>/2022/03/28/MachineLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习之旅"><a href="#机器学习之旅" class="headerlink" title="机器学习之旅"></a>机器学习之旅</h1><blockquote><p>考研有机会能上岸，因此下决心开始学习机器学习。</p><p>学习视频：<a href="https://www.bilibili.com/video/BV17J411C7zZ?p=1">一起啃书机器学习西瓜书白话解读</a></p><p>学习教材：西瓜书</p><p>学习代码：<a href="https://github.com/yui73/pumpkin-book">西瓜书代码</a></p></blockquote><h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0 准备工作"></a>0 准备工作</h2><h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1 绪论"></a>1 绪论</h2><h3 id="1-1-数据相关术语"><a href="#1-1-数据相关术语" class="headerlink" title="1.1 数据相关术语"></a>1.1 数据相关术语</h3><ul><li>数据集</li><li>样本</li><li>特征向量</li><li>属性</li></ul><h3 id="1-2-模型"><a href="#1-2-模型" class="headerlink" title="1.2 模型"></a>1.2 模型</h3><ul><li>有监督学习<ul><li>分类（二分类 - Y正负 / 多分类 - Y大于2）</li><li>回归（Y = R实数集）</li></ul></li><li>无监督学习<ul><li>聚类（我们不知道几类，机器自己分）</li></ul></li></ul><h3 id="1-3-预测"><a href="#1-3-预测" class="headerlink" title="1.3 预测"></a>1.3 预测</h3><ul><li>测试</li><li>测试样本</li><li><strong>泛化能力</strong></li></ul><h3 id="1-4-假设空间"><a href="#1-4-假设空间" class="headerlink" title="1.4 假设空间"></a>1.4 假设空间</h3><p>科学的推理手段</p><ul><li>归纳（特殊到一般）<ul><li>狭义（从数据集中得到概念-抽象）</li><li>广义（从样本中学习）</li></ul></li><li>演绎（一般到特殊）</li></ul><h3 id="1-5-归纳偏好"><a href="#1-5-归纳偏好" class="headerlink" title="1.5 归纳偏好"></a>1.5 归纳偏好</h3><p>对同一个数据集训练了不同的模型，如何选择模型。<strong>根据“奥卡姆剃刀”。</strong></p><h2 id="2-模型评估与选择-—-重要"><a href="#2-模型评估与选择-—-重要" class="headerlink" title="2 模型评估与选择 —- 重要"></a>2 模型评估与选择 —- 重要</h2><h3 id="2-1-一种训练集一种算法"><a href="#2-1-一种训练集一种算法" class="headerlink" title="2.1 一种训练集一种算法"></a>2.1 一种训练集一种算法</h3><ul><li>经验误差于过拟合<br>错误率：E=a/m<br>精度：1-E<br>误差：|Y-Y’|</li></ul><p>过拟合的定义：把训练样本自身的一些特点当作了所有潜在样本都会具有的一般性质，这样就会导致泛化能力的下降。</p><p>欠拟合的定义：对训练样本的一般性质尚未学好。</p><ul><li><p>模型评估方法</p><ul><li><p>泛化能力</p></li><li><p>Trainning Set 训练集</p></li><li><p>Testing Set 测试集的保留方法</p><ol><li><p>留出法<br> 直接将数据集划分为两个互斥集合，其中一个作为训练集S,一个作为测试集T。在S上训练模型，用T测试误差，估计泛化误差。</p></li><li><p>交叉验证法</p><p><strong>业界常用</strong></p><p><img src="/img/img_in_posts/MachineLearning/1.png" alt="10折交叉验证示意图"></p></li><li><p>自助法 </p></li></ol></li></ul></li></ul><ul><li>Validation Set 验证集</li></ul><ul><li>性能度量</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactJS 学习</title>
    <link href="/2022/02/22/ReactJSLearning/"/>
    <url>/2022/02/22/ReactJSLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-学习"><a href="#ReactJS-学习" class="headerlink" title="ReactJS 学习"></a>ReactJS 学习</h1><blockquote><p>学习视频：<a href="https://www.bilibili.com/video/BV164411s7RA?p=18">ReactJS入门</a></p></blockquote><h2 id="0-准备阶段"><a href="#0-准备阶段" class="headerlink" title="0 准备阶段"></a>0 准备阶段</h2><h3 id="i-前端开发的四个阶段"><a href="#i-前端开发的四个阶段" class="headerlink" title="i 前端开发的四个阶段"></a>i 前端开发的四个阶段</h3><ul><li>静态阶段<br>后端使用MVC模式，前端静态网页</li><li>Ajax阶段</li><li>前端MVC阶段<br>后来还有人提出了MVVM模式，使用ViewModel代替Controller</li><li>SPA阶段<br>网页前端变为一个应用程序，单网页应用程序称为SPA <code>single-page-application</code>,跑在浏览器里的应用程序。<br>当前的Vue,Angular,React都属于SPA开发框架。</li></ul><h3 id="ii-ReactJS什么"><a href="#ii-ReactJS什么" class="headerlink" title="ii ReactJS什么"></a>ii ReactJS什么</h3><p>React是一个用户构建用户界面的JavaScript框架。</p><ul><li>Flux: Flux补充了React的组合视图组件，它更是一种模式，非框架</li><li>Redux: Redux是JavaScript状态容器，使React组件状态共享变得简单。</li><li>Ant Design of React<br>集成了多种框架，包含了Flux、Redux；提供了丰富组件。</li></ul><blockquote><p>本次学习使用Ant Design of React</p></blockquote><h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1 搭建环境"></a>1 搭建环境</h2><h3 id="1-1-创建项目"><a href="#1-1-创建项目" class="headerlink" title="1.1 创建项目"></a>1.1 创建项目</h3><ul><li>使用UmiJS作为构建工具。<ul><li>在已有node.js和yarn的情况下，使用 <code>yarn global add umi</code>全局安装umi</li><li>使用<code>umi -v</code>确认是否安装成功</li><li>若出现<code>‘umi‘ 不是内部或外部命令，也不是可运行的程序 或批处理文件或者提示 umi: command not found</code>，使用<code>yarn global bin</code>命令，将路径添加到系统环境变量中，重启cmd，再次尝试。</li></ul></li><li>IntelliJ创建web项目的方法：先创建Java空项目，然后再add framework support，选择web application。</li><li>使用命令<code>tyarn init -y</code>进行初始化。生成一个<code>package.json</code>文件</li><li>使用命令<code>tyarn add umi --dev</code>添加Umi脚手架的依赖，增加了一个<code>node_modules</code>的一个文件夹，里面是各种各样的依赖。</li><li>Umi约定的目录结构</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── package<span class="hljs-selector-class">.json</span><br>├── <span class="hljs-selector-class">.umirc</span><span class="hljs-selector-class">.ts</span><br>├── <span class="hljs-selector-class">.env</span><br>├── dist<br>├── mock<br>├── public<br>└── <span class="hljs-attribute">src</span><br>    ├── <span class="hljs-selector-class">.umi</span><br>    ├── layouts/index<span class="hljs-selector-class">.tsx</span><br>    ├── pages<br>        ├── index<span class="hljs-selector-class">.less</span><br>        └── index<span class="hljs-selector-class">.tsx</span><br>    └── app.ts<br></code></pre></td></tr></table></figure><h3 id="1-2-Hello-World"><a href="#1-2-Hello-World" class="headerlink" title="1.2 Hello World!"></a>1.2 Hello World!</h3><ul><li>创建config目录，在该目录下创建config.js文件(Umi的全局配置文件)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//导出一个对象，暂时设置为空对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;&#125;;<br></code></pre></td></tr></table></figure><ul><li>创建pages目录，在pages目录下创建HelloWorld.js文件，输入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在js文件中写html代码叫做JSX,React自创的</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt;&#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>使用<code>umi dev</code>命令运行工程</li><li>进入<code>http://localhost:8000/HelloWorld</code></li></ul><blockquote><p>umi会给pages底下的内容自动添加路由映射</p></blockquote><h3 id="1-3-添加React插件"><a href="#1-3-添加React插件" class="headerlink" title="1.3 添加React插件"></a>1.3 添加React插件</h3><ul><li>使用命令<code>tyarn add umi-plugin-react --dev</code>，添加react插件。</li></ul><blockquote><p><code>--dev</code>将安装内容加入package.json的devDependencies</p></blockquote><ul><li>在config.js文件中引入插件（旧版本）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">plugins</span>:[<br>        [<span class="hljs-string">`umi-plugin-react`</span>,&#123;<br>            <span class="hljs-comment">//暂时不启用任何功能</span><br>        &#125;]<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>此处有问题，现在umi版本已经大于3，因此安装的React插件版本应该为<code>&quot;@umijs/preset-react&quot;: &quot;^1&quot;</code>,config.js应该如下，才可以成功使用<code>umi build</code>命令。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">dva</span>: &#123;&#125;,<br>  <span class="hljs-attr">antd</span>: &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2 快速入门"></a>2 快速入门</h2><h3 id="2-1-JSX语法"><a href="#2-1-JSX语法" class="headerlink" title="2.1 JSX语法"></a>2.1 JSX语法</h3><p>JSX就是在js文件中插入html代码片段，会被<code>Babel</code>等转码工具转码，得到正常的js文件后在执行。<br>JSX语法注意点：</p><ul><li>所有html的标签必须闭合</li><li>只能有一个根标签，不能有多个</li><li>在html中插入通过<code>&#123;&#125;</code>插入js脚本</li></ul><h3 id="2-2-组件"><a href="#2-2-组件" class="headerlink" title="2.2 组件"></a>2.2 组件</h3><h4 id="2-2-1-定义组件"><a href="#2-2-1-定义组件" class="headerlink" title="2.2.1 定义组件"></a>2.2.1 定义组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-comment">//导入React</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<span class="hljs-comment">//继承Component类</span><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//重写render方法，render方法渲染页面</span><br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HelloWorld!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloWorld</span>;<span class="hljs-comment">//导出HelloWorld类</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-引用组件"><a href="#2-2-2-引用组件" class="headerlink" title="2.2.2 引用组件"></a>2.2.2 引用组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./HelloWorld&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Show</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Show</span>;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-组件参数传递方式"><a href="#2-2-3-组件参数传递方式" class="headerlink" title="2.2.3 组件参数传递方式"></a>2.2.3 组件参数传递方式</h4><p><strong>属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Show类</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./HelloWorld&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Show</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="hljs-comment">//将该对象的props赋值为zhangsan</span><br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Show</span>;<br><br><span class="hljs-comment">//HelloWorld类</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//返回&#123;this.props.name&#125;</span><br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HelloWorld!Component! name = &#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloWorld</span>;<br></code></pre></td></tr></table></figure><p>  效果如下：<br>  HelloWorld类没有属性参数<br>  <img src="/img/img_in_posts/ReactJSLearning/HelloWorld.png" alt="HelloWorld"></p><p>  Show类有属性参数<br>  <img src="/img/img_in_posts/ReactJSLearning/Show.png" alt="Show"></p><p><strong>标签包裹</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Show类</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./HelloWorld&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Show</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> (<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span>标签包裹的内容<span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>      );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Show</span>;<br><br><span class="hljs-comment">//HelloWorld类</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HelloWorld!Component! Content=&#123;this.props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloWorld</span>;<br></code></pre></td></tr></table></figure><p>  效果如下：<br>  HelloWorld类没有获取到包裹参数</p><p>  <img src="/img/img_in_posts/ReactJSLearning/HelloWorld2.png" alt="HelloWorld2"></p><p>  Show类有包裹参数</p><p>  <img src="/img/img_in_posts/ReactJSLearning/Show2.png" alt="Show2"></p><h4 id="2-2-4-组件状态"><a href="#2-2-4-组件状态" class="headerlink" title="2.2.4 组件状态"></a>2.2.4 组件状态</h4><p>每个组件都有个状态，其保存在this.state中，当状态改变时，React会自动调用Render()方法，重新渲染页面。<br>注意点：</p><ul><li>this.state的值要在构造函数中设置</li><li>要修改state值要在this.setState()方法中设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            datalist : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>            <span class="hljs-title class_">MaxNum</span>:<span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                    &#123;</span><br><span class="language-xml">                        this.state.datalist.map((value,index) =&gt; &#123;</span><br><span class="language-xml">                            return <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                        &#125;)</span><br><span class="language-xml">                    &#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;</span><br><span class="language-xml">                    let MaxNum=this.state.MaxNum+1;</span><br><span class="language-xml">                    let newArray=[...this.state.datalist,MaxNum];</span><br><span class="language-xml">                    this.setState(</span><br><span class="language-xml">                        &#123;</span><br><span class="language-xml">                            datalist : newArray,</span><br><span class="language-xml">                            MaxNum:MaxNum,</span><br><span class="language-xml">                        &#125;</span><br><span class="language-xml">                    )</span><br><span class="language-xml">                &#125;&#125;&gt;点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">List</span>;<br></code></pre></td></tr></table></figure><p>一些解释</p><ul><li>构造函数必须要有<code>props</code>参数</li><li>map函数：返回一个数组 / 不检测空数组 / 不检测原始数组</li><li>箭头函数<code>()=&gt;&#123;...&#125;</code>：无构造函数/this/arguments/super/new</li><li>super函数：调用父类/父对象的…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">super</span>([<span class="hljs-variable language_">arguments</span>]):调用父类/父对象的构造函数<br><span class="hljs-variable language_">super</span>.<span class="hljs-title function_">functionOnParent</span>([<span class="hljs-variable language_">arguments</span>]):调用父类/父对象的方法<br></code></pre></td></tr></table></figure><h3 id="2-3-ReactJS-Model层"><a href="#2-3-ReactJS-Model层" class="headerlink" title="2.3 ReactJS-Model层"></a>2.3 ReactJS-Model层</h3><blockquote><p>与数据相关</p></blockquote><h4 id="2-3-1-一些概念"><a href="#2-3-1-一些概念" class="headerlink" title="2.3.1 一些概念"></a>2.3.1 一些概念</h4><p><strong>前端</strong></p><ul><li>Page层：与用户打交道，渲染页面</li><li>Model层：完成业务逻辑，给Page做数据</li><li>Service层：与HTTP接口对接，进行纯粹的数据读写，不会对数据进行处理</li></ul><p><strong>后端</strong></p><ul><li>Controller层</li><li>Service层</li><li>Data Access层</li></ul><h4 id="2-3-2-使用DVA框架对数据进行分层管理"><a href="#2-3-2-使用DVA框架对数据进行分层管理" class="headerlink" title="2.3.2 使用DVA框架对数据进行分层管理"></a>2.3.2 使用DVA框架对数据进行分层管理</h4><p><strong>1 一些关于DVA的概念</strong><br>DVA是基于Redux,Redux-saga和React-router的前端框架。<br>官网地址：<a href="https://dvajs.com/">DVA官网</a></p><blockquote><p>待更新。。。</p></blockquote><h1 id="React-Hooks学习笔记"><a href="#React-Hooks学习笔记" class="headerlink" title="React Hooks学习笔记"></a>React Hooks学习笔记</h1><h2 id="1-React的基础知识"><a href="#1-React的基础知识" class="headerlink" title="1 React的基础知识"></a>1 React的基础知识</h2><h3 id="1-1-组件"><a href="#1-1-组件" class="headerlink" title="1.1 组件"></a>1.1 组件</h3><p>React组件有以下两类：</p><ul><li>内置组件：映射到HTML节点(小写字母)</li><li>自定义组件：自己创建的组件(大写驼峰)<br>React组件只有一个根组件。</li></ul><h3 id="1-2-使用state和props管理状态"><a href="#1-2-使用state和props管理状态" class="headerlink" title="1.2 使用state和props管理状态"></a>1.2 使用state和props管理状态</h3><ul><li>state：用于保存状态的机制；使用useState这样一个Hook来保存状态。（具体后面说）</li><li>props：类似于HTML的属性，在父子组件传递状态用。</li></ul><h3 id="1-3-脚手架"><a href="#1-3-脚手架" class="headerlink" title="1.3 脚手架"></a>1.3 脚手架</h3><p>由于使用React时还需要路由管理，状态管理，UI层等……配置太麻烦，因此使用脚手架来创建项目。<br>好用的工具：</p><ul><li>codesandbox.io：网页，在线代码编辑器，用于分享少量代码。</li><li>create-react-app：命令行，需要Node.js环境，用于创建基础的React项目。</li></ul><h2 id="2-理解Hooks"><a href="#2-理解Hooks" class="headerlink" title="2 理解Hooks"></a>2 理解Hooks</h2><p>Hooks把某个结果钩到某个可能会变化的数据源或者事件源上。当被沟到的数据或者事件发生变化时，产生目标结果的代码重新执行。</p><p>如此实现了<strong>逻辑复用</strong>和<strong>关注分离</strong>。</p><h2 id="3-内置Hooks"><a href="#3-内置Hooks" class="headerlink" title="3 内置Hooks"></a>3 内置Hooks</h2><p>常用的Hooks有：<code>useState</code> / <code>useEffect</code> / <code>useCallback</code> / <code>useMemo</code> / <code>useRef</code> / <code>useContext</code>。</p><h4 id="Hooks的使用规则"><a href="#Hooks的使用规则" class="headerlink" title="Hooks的使用规则"></a>Hooks的使用规则</h4><ul><li>只能在函数组件的顶级作用域使用</li><li>只能函数组件或者其他Hooks中使用</li><li><strong>所有Hooks必须要被执行到，必须按顺序执行。</strong></li></ul><h4 id="Hooks的常用辅助工具"><a href="#Hooks的常用辅助工具" class="headerlink" title="Hooks的常用辅助工具"></a>Hooks的常用辅助工具</h4><p><code>eslint-plugin-react-hooks</code>：使用npm安装，加入两个规则：</p><ul><li><code>rules-of-hooks</code>：检查Hooks使用规则</li><li><code>exhaustive-deps</code>：检查依赖项的声明</li></ul><blockquote><p>下面先介绍两个最常用的Hooks。</p></blockquote><h3 id="3-1-useState"><a href="#3-1-useState" class="headerlink" title="3.1 useState"></a>3.1 useState</h3><p>让函数组件具有维持状态的能力。</p><ol><li><p><code>useState(initialState)</code>：initialState是创建State的初始值。</p></li><li><p>useState()的返回值是有着两个元素的数组：第一个用于读取state的值；第二个用于设置state的值。<strong>state只能通过第二个元素来设置。</strong></p></li><li><p>state中不保存可以通过计算得到的值：</p><ul><li>从props传来的</li><li>从URL读到的值</li><li>从cookie/localStorage中读取到的值 </li></ul></li></ol><h3 id="3-2-useEffect"><a href="#3-2-useEffect" class="headerlink" title="3.2 useEffect"></a>3.2 useEffect</h3><p>执行副作用，其中代码执行不影响渲染出来的UI。</p><ol><li><p><code>useEffect(callback, dependencies)</code>：callback是执行的函数；dependencies是可选的依赖数组。</p></li><li><p>useEffect是每次组件render完后判断依赖并执行。</p><ul><li>没有依赖项，每次render后会重新执行</li><li>空数组，只有首次执行时触发</li><li><strong>依赖项比较使用浅比较</strong></li></ul></li><li><p>useEffect允许你返回函数，用于组件销毁时做一些清理的操作。组件unmount后执行。</p></li></ol><h3 id="3-3-useCallback"><a href="#3-3-useCallback" class="headerlink" title="3.3 useCallback"></a>3.3 useCallback</h3><p>缓存回调函数，进行性能优化。API签名如下：</p><p><code>useCallback(fn,deps)</code>：fn定义的回调函数；deps依赖的变量数组。</p><p>只有当deps变化时，才会重新声明fn。</p><h3 id="3-4-useMemo"><a href="#3-4-useMemo" class="headerlink" title="3.4 useMemo"></a>3.4 useMemo</h3><p>缓存计算的结果，避免重复计算，避免子组件的重复渲染。</p><p><code>useMemo(fn,deps)</code>：fn定义的计算函数；deps依赖的变量数组。</p><h3 id="3-5-useRef"><a href="#3-5-useRef" class="headerlink" title="3.5 useRef"></a>3.5 useRef</h3><p>在多次渲染之间共享数据，可以用于保存某个DOM节点的引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myRefContainer = <span class="hljs-title function_">useRef</span>(initialValue)<br></code></pre></td></tr></table></figure><h3 id="3-6-useContext"><a href="#3-6-useContext" class="headerlink" title="3.6 useContext"></a>3.6 useContext</h3><p>定义全局状态，但是会造成调试困难，复用困难。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> value = <span class="hljs-title function_">useContext</span>(myContext)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(initialValue)<br></code></pre></td></tr></table></figure><h2 id="4-Hooks的四个典型使用场景"><a href="#4-Hooks的四个典型使用场景" class="headerlink" title="4 Hooks的四个典型使用场景"></a>4 Hooks的四个典型使用场景</h2><p>由于Hooks的目标是：<strong>逻辑复用</strong> + <strong>关注分离</strong></p><h3 id="4-1-抽取业务逻辑"><a href="#4-1-抽取业务逻辑" class="headerlink" title="4.1 抽取业务逻辑"></a>4.1 抽取业务逻辑</h3><pre><code class="hljs">自定义Hooks函数，函数名：`useXXX`，并在其中用到了其他Hooks函数。</code></pre><h3 id="4-2-封装通用逻辑"><a href="#4-2-封装通用逻辑" class="headerlink" title="4.2 封装通用逻辑"></a>4.2 封装通用逻辑</h3><p>自定义一个<code>useAsync</code>Hooks函数。</p><p>例如：发起一个异步请求获取数据并显示在页面上。</p><p>分析需要三个state：loading / error / data，将三个state和异步请求封装在useAsync函数里，实现如下（代码来源于课程）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useAsync</span> = (<span class="hljs-params">asyncFunction</span>) =&gt; &#123;<br><span class="hljs-comment">// 设置三个异步逻辑相关的 state</span><br><span class="hljs-keyword">const</span> [data, setData] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> [loading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [error, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">// 定义一个 callback 用于执行异步逻辑</span><br><span class="hljs-keyword">const</span> execute = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 请求开始时，设置 loading 为 true，清除已有数据和 error 状态</span><br>    <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_">setData</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-title function_">setError</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">asyncFunction</span>()<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 请求成功时，将数据写进 state，设置 loading 为 false</span><br>        <span class="hljs-title function_">setData</span>(response);<br>        <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">false</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 请求失败时，设置 loading 为 false，并设置错误状态</span><br>        <span class="hljs-title function_">setError</span>(error);<br>        <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">false</span>);<br>    &#125;);<br>&#125;, [asyncFunction]);<br><br><span class="hljs-keyword">return</span> &#123; execute, loading, data, error &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>业务逻辑部分代码变得更为清晰。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> useAsync <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useAsync&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">UserList</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 通过 useAsync 这个函数，只需要提供异步逻辑的实现</span><br><span class="hljs-keyword">const</span> &#123;<br>    <span class="hljs-attr">execute</span>: fetchUsers,<br>    <span class="hljs-attr">data</span>: users,<br>    loading,<br>    error,<br>&#125; = <span class="hljs-title function_">useAsync</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;https://reqres.in/api/users/&quot;</span>);<br>    <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-keyword">return</span> json.<span class="hljs-property">data</span>;<br>&#125;);<br><br><span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 根据状态渲染 UI...</span><br>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-监听浏览器状态"><a href="#4-3-监听浏览器状态" class="headerlink" title="4.3 监听浏览器状态"></a>4.3 监听浏览器状态</h3><p>自定义一个<code>useScroll</code>Hooks函数。（同上）</p><h3 id="4-4-拆分复杂组件"><a href="#4-4-拆分复杂组件" class="headerlink" title="4.4 拆分复杂组件"></a>4.4 拆分复杂组件</h3><p>将相关的逻辑做成独立的Hooks，在函数组件中使用Hooks。</p><h2 id="5-Redux"><a href="#5-Redux" class="headerlink" title="5 Redux"></a>5 Redux</h2><blockquote><p>这块内容还没来得及实践，日后有机会希望亲自体验。</p></blockquote><h3 id="5-1-Redux-的一些概念"><a href="#5-1-Redux-的一些概念" class="headerlink" title="5.1 Redux 的一些概念"></a>5.1 Redux 的一些概念</h3><ul><li>Redux Store 特点：全局唯一；树状结构。</li><li>好处：可预测性；易于调试。</li><li>三个基本概念：State、Action和Reducer<ul><li>State：即Store，一个纯JavaScript Object。</li><li>Action：一个Object，用于描述发生的动作。</li><li>Reducer：一个函数，用于接收State和Action，计算新的Store。</li></ul></li></ul><h3 id="5-2-在-React-中使用-Redux"><a href="#5-2-在-React-中使用-Redux" class="headerlink" title="5.2 在 React 中使用 Redux"></a>5.2 在 React 中使用 Redux</h3><p>将React和Redux建立联系主要是以下两点：</p><ol><li>当store变化时，React会重新Render</li><li>React中，在某些时机能dispatch一个action去触发Store的更新</li></ol><p>因此使用<code>react-redux</code>工具库去实现二者的联通。</p><p>因为Redux Store具有全局唯一性，因此使用React的Context去存放Store信息，同时Context作为整个React应用程序的根节点。</p><blockquote><p>待更新。。。</p><h2 id="6-复杂状态管理"><a href="#6-复杂状态管理" class="headerlink" title="6 复杂状态管理"></a>6 复杂状态管理</h2><h2 id="7-函数组件的设计模式"><a href="#7-函数组件的设计模式" class="headerlink" title="7 函数组件的设计模式"></a>7 函数组件的设计模式</h2><h2 id="8-React事件机制"><a href="#8-React事件机制" class="headerlink" title="8 React事件机制"></a>8 React事件机制</h2><h2 id="9-按领域组织文件夹结构"><a href="#9-按领域组织文件夹结构" class="headerlink" title="9 按领域组织文件夹结构"></a>9 按领域组织文件夹结构</h2><h2 id="10-React中使用表单和对话框"><a href="#10-React中使用表单和对话框" class="headerlink" title="10 React中使用表单和对话框"></a>10 React中使用表单和对话框</h2><h3 id="10-1-表单"><a href="#10-1-表单" class="headerlink" title="10.1 表单"></a>10.1 表单</h3><h3 id="10-2-对话框"><a href="#10-2-对话框" class="headerlink" title="10.2 对话框"></a>10.2 对话框</h3><h2 id="11-路由机制"><a href="#11-路由机制" class="headerlink" title="11 路由机制"></a>11 路由机制</h2><h2 id="12-按需加载"><a href="#12-按需加载" class="headerlink" title="12 按需加载"></a>12 按需加载</h2><h2 id="13-单元测试"><a href="#13-单元测试" class="headerlink" title="13 单元测试"></a>13 单元测试</h2><h2 id="14-第三方库"><a href="#14-第三方库" class="headerlink" title="14 第三方库"></a>14 第三方库</h2></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Front/Interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows命令集合</title>
    <link href="/2022/02/10/WindowCommand/"/>
    <url>/2022/02/10/WindowCommand/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows命令集合"><a href="#Windows命令集合" class="headerlink" title="Windows命令集合"></a>Windows命令集合</h1><blockquote><p>对一些不熟悉的Windows命令做一个汇总</p><ul><li>清屏：<code>clear</code></li><li>删除文件夹：<code>rd/s/q 文件路径</code> <code>/s参数为子目录</code> <code>/q参数为无需询问</code></li><li>删除子文件夹：<code>del/s/q 文件路径</code> <code>/s参数为子目录</code> <code>/q参数为无需询问</code></li><li>查看PowerShell的执行策略权限列表：<code>Get-ExecutionPolicy -List</code></li><li>更改PowerShell的执行策略权限（例如改成remotesigned）：<code>set-executionpolicy remotesigned</code></li><li>升级为管理员权限：<code>Start-Process powershell -Verb runAs</code>（不过是会弹出一个由管理员权限的新窗口）</li></ul></blockquote><h2 id="1-将win11右键菜单改为win10样式"><a href="#1-将win11右键菜单改为win10样式" class="headerlink" title="1 将win11右键菜单改为win10样式"></a>1 将win11右键菜单改为win10样式</h2><ul><li>win11 -&gt; win10<br>在终端（管理员）</li></ul><p>​    <code>reg.exe add &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot; /f /ve</code></p><ul><li>win10 -&gt; win11<br>恢复Win11新右键菜单的方法</li></ul><p>　还是一样打开 windows 终端(管理员)点击进入之后，直接输入这串代码 ：　</p><p>​    <code>reg.exe delete &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot; /va /f</code></p><p>　　然后显示操作成功，重启之后，就可以恢复了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ant Design Pro记录</title>
    <link href="/2022/02/10/AntDesignProLearning/"/>
    <url>/2022/02/10/AntDesignProLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="Ant-Design-Pro-前端学习"><a href="#Ant-Design-Pro-前端学习" class="headerlink" title="Ant Design Pro 前端学习"></a>Ant Design Pro 前端学习</h1><blockquote><p>文档：<a href="https://pro.ant.design/zh-CN/docs/overview">Ant Design Pro文档</a></p></blockquote><h2 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a>2.1 准备工作</h2><h3 id="2-1-1-推荐技术栈"><a href="#2-1-1-推荐技术栈" class="headerlink" title="2.1.1 推荐技术栈"></a>2.1.1 推荐技术栈</h3><ul><li><p>包管理：tyarn 安装<code>npm install yarn tyarn -g</code><br>文档：<a href="https://www.npmjs.com/package/tyarn">tyarn</a></p></li><li><p>Terminal：选择Windows Terminal</p></li></ul><h3 id="2-1-2-快速开始"><a href="#2-1-2-快速开始" class="headerlink" title="2.1.2 快速开始"></a>2.1.2 快速开始</h3><ul><li>初始化脚手架</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#使用yarn</span><br>yarn create umi app<br></code></pre></td></tr></table></figure><ul><li><p>遇到的问题<br><img src="/img/img_in_posts/AntDesignProLearning/yarnError.png" alt="yarnError"></p></li><li><p>解决方案：<a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7">官方解释</a><br>&lt;/br&gt;因此修改一下powershell的保护机制即可解决。使用<code>set-executionpolicy remotesigned</code>的命令。效果如下：<br><img src="/img/img_in_posts/AntDesignProLearning/yarnErrorSolution.png" alt="yarnErrorSolution"></p><p>再次安装，效果如下，成功安装：<br><img src="/img/img_in_posts/AntDesignProLearning/yarnSuccess.png" alt="yarnSuccess"></p></li></ul><h2 id="2-2-基础结构"><a href="#2-2-基础结构" class="headerlink" title="2.2 基础结构"></a>2.2 基础结构</h2><h3 id="2-2-1-目录结构"><a href="#2-2-1-目录结构" class="headerlink" title="2.2.1 目录结构"></a>2.2.1 目录结构</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">├── config                   <span class="hljs-comment"># umi 配置，包含路由，构建等配置</span><br>├── mock                     <span class="hljs-comment"># 本地模拟数据</span><br>├── public<br>│   └── favicon.png          <span class="hljs-comment"># Favicon</span><br>├── src<br>│   ├── assets               <span class="hljs-comment"># 本地静态资源</span><br>│   ├── components           <span class="hljs-comment"># 业务通用组件</span><br>│   ├── e2e                  <span class="hljs-comment"># 集成测试用例</span><br>│   ├── layouts              <span class="hljs-comment"># 通用布局</span><br>│   ├── models               <span class="hljs-comment"># 全局 dva model</span><br>│   ├── pages                <span class="hljs-comment"># 业务页面入口和常用模板</span><br>│   ├── services             <span class="hljs-comment"># 后台接口服务</span><br>│   ├── utils                <span class="hljs-comment"># 工具库</span><br>│   ├── locales              <span class="hljs-comment"># 国际化资源</span><br>│   ├── global.less          <span class="hljs-comment"># 全局样式</span><br>│   └── global.ts            <span class="hljs-comment"># 全局 JS</span><br>├── tests                    <span class="hljs-comment"># 测试工具</span><br>├── README.md<br>└── package.json<br></code></pre></td></tr></table></figure><h3 id="2-2-2-页面开发使用图表"><a href="#2-2-2-页面开发使用图表" class="headerlink" title="2.2.2 页面开发使用图表"></a>2.2.2 页面开发使用图表</h3><p>使用Ant Design的图表：<code>yarn add @ant-design/charts</code></p><h3 id="2-2-3一些报错"><a href="#2-2-3一些报错" class="headerlink" title="2.2.3一些报错"></a>2.2.3一些报错</h3><h4 id="网页控制台"><a href="#网页控制台" class="headerlink" title="网页控制台"></a>网页控制台</h4><p><img src="/img/img_in_posts/AntDesignProLearning/React.png" alt="ReactError"></p><ul><li>解决方案</li></ul><p>locales缺少对应字段的中文配置</p>]]></content>
    
    
    
    <tags>
      
      <tag>Front/Interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩游戏时的小发现</title>
    <link href="/2022/02/08/LittleDiscovery_20220208/"/>
    <url>/2022/02/08/LittleDiscovery_20220208/</url>
    
    <content type="html"><![CDATA[<h2 id="小小发现"><a href="#小小发现" class="headerlink" title="小小发现"></a>小小发现</h2><p>某天深夜在一晚上酣畅淋漓的游戏后，在退出Steam时瞟了一眼库，突然发现一个有趣的东西。<br><img src="/img/img_in_posts/LittleDiscovery_20220208/bobo.png" alt="bobo"><br>当下直觉觉得是ASCII码，于是采用比较熟悉的C++尝试翻译。<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//all</span><br>string s;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j=<span class="hljs-number">7</span>;<br><span class="hljs-comment">//2 to 10</span><br>string s1;<br>queue &lt;<span class="hljs-type">int</span>&gt; ansNum;<br><br><span class="hljs-comment">//翻译后压入队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">translateToNum</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tempans=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> temp=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)<br>    &#123;<br>        tempans = tempans + temp*(s1[k]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>        temp = temp*<span class="hljs-number">2</span>;<br>    &#125;<br>    ansNum.<span class="hljs-built_in">push</span>(tempans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//s为卡片上的字符串</span><br>    s=<span class="hljs-string">&quot;01010011 01101111 01101101 01100101 01110100 01101001 01101101 01100101 01110011 00100000 01001001 00100000 01100110 01100001 01101001 01101100 00100000 01101111 01110010 01100100 01100101 01110010 01110011 00100000 01101111 01101110 00100000 01110000 01110101 01110010 01110000 01101111 01110011 01100101 00100000 01110100 01101111 00100000 01100001 01101110 01101110 01101111 01111001 00100000 01101101 01111001 00100000 01110100 01100101 01100001 01101101 00100001&quot;</span>;<br>    <span class="hljs-keyword">while</span>(s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class="hljs-built_in">translateToNum</span>();<br>            j=<span class="hljs-number">7</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            s1[j]=s[i];<br>            j--;<br>        &#125;<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(!ansNum.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">char</span> tempChar;<br>        <span class="hljs-type">int</span> tempInt;<br>        tempInt = ansNum.<span class="hljs-built_in">front</span>();<br>        tempChar =tempInt;<br>        ansNum.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">//cout&lt;&lt;tempInt;</span><br>        cout&lt;&lt;tempChar;<br>    &#125;<br><br>    <span class="hljs-comment">//system(&quot;pause&quot;);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><br>运行结果：<br><img src="/img/img_in_posts/LittleDiscovery_20220208/result.png" alt="result.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django学习</title>
    <link href="/2022/01/08/DjangoLearning/"/>
    <url>/2022/01/08/DjangoLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="Django学习之旅"><a href="#Django学习之旅" class="headerlink" title="Django学习之旅"></a>Django学习之旅</h1><p>学习视频：<a href="https://time.geekbang.org/course/intro/100061901?tab=catalog">极客</a></p><p>学习博客：<a href="https://www.cnblogs.com/xiaoqingSister/p/13355832.html">小青姐姐</a></p><p>前言：公司给买的课 OvO</p><h2 id="1-初识Django"><a href="#1-初识Django" class="headerlink" title="1 初识Django"></a>1 初识Django</h2><ul><li><p>课程需要基础</p><ul><li>Python &amp; 前端三剑客(HTML CSS JS) &amp; 理解Web应用的前后端交互</li></ul></li><li><p>Django适用场景</p><ul><li>内容管理系统 &amp; 企业内部系统 &amp; 运维管理系统</li></ul></li><li><p>Django优缺点</p><ul><li>优点：代码干净；提供管理后台；复用度高；易于扩展复用的中间件；内置的安全框架，应付常见的Web攻击；丰富的第三方类库</li><li>缺点：不易并行开发，单点扩展；不适合高并发的to C项目；不适合非常小的项目</li></ul></li><li><p>哪些产品使用了Django</p></li><li><p>Django的MTV架构</p><ul><li><p>Model 层<br>View 层通过 Model 层和数据库交互</p></li><li><p>Template 层</p><p>View层使用数据填充到Template层模板里面；动态HTML文件里不变的部分</p></li><li><p>View 层<br>页面呈现 + 处理请求的业务逻辑；用户请求处理层</p></li><li><p>Controller层（非严格意义上</p><p>网站路由控制器；用正则表达分配路由</p></li></ul></li><li><p>Django的设计思想</p><ul><li>DRY:不重复造轮子</li><li>松耦合；快速开发；易于扩展</li></ul></li></ul><h2 id="2-搭建环境"><a href="#2-搭建环境" class="headerlink" title="2 搭建环境"></a>2 搭建环境</h2><ul><li>Pycharm</li><li>Anaconda</li></ul><h2 id="3-使用Django创建第一个项目"><a href="#3-使用Django创建第一个项目" class="headerlink" title="3 使用Django创建第一个项目"></a>3 使用Django创建第一个项目</h2><h3 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h3><p>创建Blog项目，项目名为 mydjangoblog</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ django-admin startproject mydjangoblog<br>$ <span class="hljs-built_in">cd</span> mydjangoblog<br>$ python ./manage.py runserver 0.0.0.0:8080 指定端口<br></code></pre></td></tr></table></figure><p>此时在项目文件夹中初始化了<code>db.sqlite3</code>的文件数据库，可以在<code>setting.py</code>中进行数据库配置的更改或更改数据库引擎，数据库访问层和Django是松耦合的。</p><p>接下来进行数据库的配置。（此步骤，老师的视频中无法访问admin页面，但我的已经可以访问了，但还是照葫芦画瓢做了一遍）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ python manage.py makemigrations //此步没有变更，因为是新项目没有Model层<br>$ python manage.py migrate //此步创建了不同的表和表字段<br>$ python manage.py createsuperuser //超级用户的用户名为admin 密码为1234<br></code></pre></td></tr></table></figure><p>此时就可以登录admin后台了</p><p>接下来将项目导入Pycharm，看目录结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">--mydjangoblog<br>|----iniy.py<br>|----asgi.py 异步网关接口<br>|----wsgi.py<br>|----setting.py 整个项目的配置文件<br>|----urls.py<br>|--db.sqlite3<br>|--manage.py<br></code></pre></td></tr></table></figure><p><code>setting.py</code>中有几项配置：</p><ul><li><code>DEBUG = True</code> - 展示调试信息</li><li><code>INSTALLED_APPS</code> - 安装的Django应用</li><li><code>MIDDLEWARE</code> - 使用的中间件</li><li><code>LANGUAGE_CODE</code> - 使用的默认语言</li></ul><h3 id="3-2-创建应用并添加相应的Model"><a href="#3-2-创建应用并添加相应的Model" class="headerlink" title="3.2 创建应用并添加相应的Model"></a>3.2 创建应用并添加相应的Model</h3><p>使用命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python manage.py startapp articles //文章管理并将articles应用添加到settings里面去<br></code></pre></td></tr></table></figure><blockquote><p>不加括号是引用函数 而非调用</p></blockquote><p>前端：bootstrap4</p><h2 id="后面直接上手写项目了O-V-O-啊吧啊吧"><a href="#后面直接上手写项目了O-V-O-啊吧啊吧" class="headerlink" title="后面直接上手写项目了O V O 啊吧啊吧~"></a>后面直接上手写项目了O V O 啊吧啊吧~</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub用法集合 + Git学习</title>
    <link href="/2021/07/13/GitHubUsage/"/>
    <url>/2021/07/13/GitHubUsage/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-用法集合-Git学习"><a href="#GitHub-用法集合-Git学习" class="headerlink" title="GitHub 用法集合 + Git学习"></a>GitHub 用法集合 + Git学习</h1><p>文章更新顺序：</p><blockquote><p>对GitHub一些常规操作做一些记录，关联电脑与GituHub，生成SSH密钥，已经在之前建站中完成了。<br>后续更新了Git的一些概念学习</p></blockquote><h3 id="1-验证是否连接成功"><a href="#1-验证是否连接成功" class="headerlink" title="1 验证是否连接成功"></a>1 验证是否连接成功</h3><p>输入：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>出现<code>Hi yui73! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>表示成功连接。</p><p><code>-T</code> 参数表示：不显示终端，只显示连接成功信息。</p><h3 id="2-上传Code"><a href="#2-上传Code" class="headerlink" title="2 上传Code"></a>2 上传Code</h3><ul><li>cd到目标文件夹内</li><li>输入以下指令</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br>git <span class="hljs-keyword">add</span><br>git commit -m <span class="hljs-string">&quot;Commit 备注&quot;</span><br>git remote <span class="hljs-keyword">add</span> origin git@github.com:... <span class="hljs-comment">//你仓库的SSH地址</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><h3 id="3-GitHub大文件限制"><a href="#3-GitHub大文件限制" class="headerlink" title="3 GitHub大文件限制"></a>3 GitHub大文件限制</h3><h4 id="3-1-报错形式"><a href="#3-1-报错形式" class="headerlink" title="3.1 报错形式"></a>3.1 报错形式</h4><p><img src="/img/img_in_posts/GitHubUsage/error.png" alt="Error"></p><h4 id="3-2-解决方法-Git-lfs"><a href="#3-2-解决方法-Git-lfs" class="headerlink" title="3.2 解决方法 Git-lfs"></a>3.2 解决方法 Git-lfs</h4><ul><li>去<a href="https://git-lfs.github.com/">官网</a>下载安装Git-lfs</li><li>重启Cygwim</li><li>输入<code>ssh -T git@github.com</code></li><li>cd到目标文件夹</li><li>输入<code>git lfs install</code><br><img src="/img/img_in_posts/GitHubUsage/lfs-install.PNG" alt="lfs-install"></li><li>Track你的大文件<br><img src="/img/img_in_posts/GitHubUsage/track.PNG" alt="Track"></li><li>重新<code>add commit push</code></li></ul><h3 id="4-Git理论学习"><a href="#4-Git理论学习" class="headerlink" title="4 Git理论学习"></a>4 Git理论学习</h3><blockquote><p>之前对于Git只是单纯的使用，对其原理并未有足够的了解导致时隔半年再度使用Git时又是一脸懵逼，因此决定重新学习一些原理<br>官方文档:<a href="https://git-scm.com/about">Git</a></p></blockquote><h4 id="4-1-版本控制系统"><a href="#4-1-版本控制系统" class="headerlink" title="4.1 版本控制系统"></a>4.1 版本控制系统</h4><p>版本控制系统分为如下三大类：</p><ul><li>本地版本控制</li><li>集中式版本控制</li><li>分布式版本控制<br>Git属于这种，一个命令行工具；Github为一个使用Git版本管理工具的代码托管云服务网站。</li></ul><h4 id="4-2-Git基础知识"><a href="#4-2-Git基础知识" class="headerlink" title="4.2 Git基础知识"></a>4.2 Git基础知识</h4><p>Git每次保存的的都是文件的完整快照。<br>Git工程的工作区域：</p><ul><li>Workplace（工作目录）</li><li>Index（暂存区域）</li><li>Local repository（本地仓库）</li><li>Remote repository （远程仓库）<br>下图为其工作流程：<br><img src="/img/img_in_posts/GitHubUsage/Git.png" alt="GitUsage"><br>文件的三种状态：</li><li>已提交</li><li>已修改</li><li>已暂存</li></ul><h3 id="5-常用Git指令"><a href="#5-常用Git指令" class="headerlink" title="5 常用Git指令"></a>5 常用Git指令</h3><blockquote><p>学习视频：<a href="https://time.geekbang.org/course/detail/100021601-71676">玩转Git三剑客</a></p></blockquote><h4 id="5-1-使用Git的最小配置"><a href="#5-1-使用Git的最小配置" class="headerlink" title="5.1 使用Git的最小配置"></a>5.1 使用Git的最小配置</h4><div class="table-container"><table><thead><tr><th></th><th>功能</th></tr></thead><tbody><tr><td>user.name</td><td>目标用户名</td></tr><tr><td>user.email</td><td>目标邮箱</td></tr></tbody></table></div><h4 id="5-2-给文件夹重命名"><a href="#5-2-给文件夹重命名" class="headerlink" title="5.2 给文件夹重命名"></a>5.2 给文件夹重命名</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>功能</th></tr></thead><tbody><tr><td>git mv</td><td>XXX(前)</td><td>XXX(后)</td><td>给文件夹重命名</td></tr></tbody></table></div><h4 id="5-3-查看版本历史"><a href="#5-3-查看版本历史" class="headerlink" title="5.3 查看版本历史"></a>5.3 查看版本历史</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>功能</th></tr></thead><tbody><tr><td>git log</td><td>—oneline</td><td></td><td>简洁</td></tr><tr><td></td><td>-nx</td><td></td><td>最近的x条记录</td></tr><tr><td></td><td>—all</td><td></td><td>所有分支</td></tr><tr><td></td><td></td><td>—graph</td><td>分支图形化</td></tr></tbody></table></div><h4 id="5-4-切换分支"><a href="#5-4-切换分支" class="headerlink" title="5.4 切换分支"></a>5.4 切换分支</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>功能</th></tr></thead><tbody><tr><td>git</td><td>checkout</td><td>XXX</td><td>切换到XXX分支</td></tr></tbody></table></div><h4 id="5-5-git文件解释"><a href="#5-5-git文件解释" class="headerlink" title="5.5 git文件解释"></a>5.5 git文件解释</h4><div class="table-container"><table><thead><tr><th>文件名</th><th>解释</th></tr></thead><tbody><tr><td>head</td><td>存放当前工作分支</td></tr><tr><td>config</td><td>当前git的配置</td></tr><tr><td>refs</td><td>存放tags和heads</td></tr><tr><td>objects</td><td>存放对象，文件夹名以哈希值前2位字符命名，每个object由40位字符组成，前2位为文件夹，后38位为文件。文件类型：commit/tree/blob。</td></tr></tbody></table></div><p>文件夹逻辑树如下：</p><p><strong>整棵树的叶子结点为blob。</strong></p><h4 id="5-6-显示版本库对象的内容-p-、类型-t-、大小-s"><a href="#5-6-显示版本库对象的内容-p-、类型-t-、大小-s" class="headerlink" title="5.6 显示版本库对象的内容(-p)、类型(-t)、大小(-s)"></a>5.6 显示版本库对象的内容(-p)、类型(-t)、大小(-s)</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>功能</th></tr></thead><tbody><tr><td>git cat-file</td><td>-p/-t/-s</td><td>显示版本库对象的内容(-p)、类型(-t)、大小(-s)</td></tr></tbody></table></div><h4 id="5-7-分离头指针"><a href="#5-7-分离头指针" class="headerlink" title="5.7 分离头指针"></a>5.7 分离头指针</h4><p>当Head指向某个commit的时候处于分离头指针的状态，此时没和任何分支挂钩，在切换分支时会丢失数据。</p><h4 id="5-8-删除分支"><a href="#5-8-删除分支" class="headerlink" title="5.8 删除分支"></a>5.8 删除分支</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>解释</th></tr></thead><tbody><tr><td>git branch</td><td>-d</td><td>XXX</td><td>会检查merge</td></tr><tr><td>git branch</td><td>-D</td><td>XXX</td><td>强制删除</td></tr></tbody></table></div><h4 id="5-9-修改Message"><a href="#5-9-修改Message" class="headerlink" title="5.9 修改Message"></a>5.9 修改Message</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>解释</th></tr></thead><tbody><tr><td>git commit</td><td>—amend</td><td></td><td>修改最新的commit信息</td></tr><tr><td>git rebase</td><td>-i</td><td>XXX</td><td>交互，此时Head哈希发生变化，blob未变化。</td></tr></tbody></table></div><p><strong>commit合并也使用rebase交互实现。</strong></p><h4 id="5-10-比较差异"><a href="#5-10-比较差异" class="headerlink" title="5.10 比较差异"></a>5.10 比较差异</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>功能</th></tr></thead><tbody><tr><td>git diff</td><td>—cached</td><td></td><td>暂存区 VS Head</td></tr><tr><td>git diff</td><td></td><td></td><td>暂存区 VS 工作区</td></tr><tr><td>git diff</td><td>XXX(分支) YYY(分支)</td><td>— XX(文件)</td><td>查看不同提交的指定文件的差异</td></tr></tbody></table></div><h4 id="5-11-恢复操作"><a href="#5-11-恢复操作" class="headerlink" title="5.11 恢复操作"></a>5.11 恢复操作</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>功能</th></tr></thead><tbody><tr><td>git reset</td><td>HEAD</td><td>—(空格)XXX</td><td>将暂存区恢复成HEAD</td></tr><tr><td>git reset</td><td>—hard</td><td>XXX</td><td>消除最近几次提交</td></tr><tr><td>git chechout</td><td>—(空格)XXX</td><td></td><td>工作区恢复成暂存区</td></tr></tbody></table></div><h4 id="5-12-删除文件"><a href="#5-12-删除文件" class="headerlink" title="5.12 删除文件"></a>5.12 删除文件</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>功能</th></tr></thead><tbody><tr><td>git rm</td><td>XXX</td><td>更改直接写入暂存区</td></tr></tbody></table></div><h4 id="5-13-加塞任务-暂存功能"><a href="#5-13-加塞任务-暂存功能" class="headerlink" title="5.13 加塞任务 - 暂存功能"></a>5.13 加塞任务 - 暂存功能</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>功能</th></tr></thead><tbody><tr><td>git stash</td><td>list</td><td>查看暂存列表</td></tr><tr><td></td><td>pop</td><td>释放暂存后，会删掉stash</td></tr><tr><td></td><td>apply</td><td>释放暂存后，不会删掉stash</td></tr></tbody></table></div><h4 id="5-14-拉取代码"><a href="#5-14-拉取代码" class="headerlink" title="5.14 拉取代码"></a>5.14 拉取代码</h4><div class="table-container"><table><thead><tr><th>1</th><th>功能</th></tr></thead><tbody><tr><td>git fetch</td><td>只拉取代码</td></tr><tr><td>git pull</td><td>fetch + merge</td></tr></tbody></table></div><p><strong>当远端分支和本地分支不是fastforward的关系，则需要merge或者rebase，rebase则项目结构更为线性。</strong></p><blockquote><p>小技巧：当Git中远端的Hash值和本地的Hash值一致则指向一致。</p></blockquote><h4 id="5-15-团队仓库"><a href="#5-15-团队仓库" class="headerlink" title="5.15 团队仓库"></a>5.15 团队仓库</h4><p><strong>团队合作禁止：</strong></p><ul><li><code>push -f</code>操作</li><li>向集成分支执行变更历史的操作</li><li><code>rebase</code>操作</li></ul><h4 id="5-16-淘Github项目"><a href="#5-16-淘Github项目" class="headerlink" title="5.16 淘Github项目"></a>5.16 淘Github项目</h4><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>功能</th></tr></thead><tbody><tr><td>in:</td><td>XXX</td><td>在XXX文件中搜索</td></tr><tr><td>stars:</td><td>&gt;XXX</td><td>搜索星数大于XXX</td></tr><tr><td>filename:</td><td>XXX</td><td>搜索文件名为XXX</td></tr></tbody></table></div>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WPF + MVVM 学习</title>
    <link href="/2021/07/01/WPFLearning/"/>
    <url>/2021/07/01/WPFLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="WPF学习"><a href="#WPF学习" class="headerlink" title="WPF学习"></a>WPF学习</h1><blockquote><p>学习视频：<a href="https://www.bilibili.com/video/BV1ht411e7Fe">刘铁猛</a></p><p>学习教材：《深入浅出WPF》</p></blockquote><h3 id="0-预备知识"><a href="#0-预备知识" class="headerlink" title="0 预备知识"></a>0 预备知识</h3><ul><li>什么是WPF<br>三层结构：<code>（数据层-&gt;业务逻辑层-&gt;表示层）</code></li><li>什么是XAML<br>是WPF技术中专门用于设计UI的语言。<br>实现了UI与逻辑分离。<br>是一种单纯的声明型语言，无法加入程序逻辑，与逻辑相关的代码统统集中在程序逻辑层<ul><li>“高内聚-低耦合”</li><li>Template功能。</li><li>Atrribute-属性</li></ul></li><li>将cs文件编译完成过后会生成.dll文件，别的程序员可以直接引用这个.dll文件</li><li>Solution层</li><li>Project层(窗口/控制台应用程序/类库)：编译的结果叫做<br><code>项目集Assembly</code> <ul><li>Properties装着资源文件的描述 </li><li>Resources装着类库：<code>&#123;&#125;</code>是一个命名空间；</li><li>两对<code>.xaml</code>文件：<code>APP.xaml</code>对应应用程序本身，其中<code>StartupUri:MainWindow.xaml</code>表示MainWindow为程序启动时的主窗体。</li></ul></li><li>Canvas可以进行拖拽式界面设计</li></ul><h3 id="Lesson-1"><a href="#Lesson-1" class="headerlink" title="Lesson 1"></a>Lesson 1</h3><h4 id="1-1-解析-xaml和-cs文件"><a href="#1-1-解析-xaml和-cs文件" class="headerlink" title="1.1 解析.xaml和.cs文件"></a>1.1 解析.xaml和.cs文件</h4><ul><li><code>partial</code>关键字：分部类，类可以分开在两个地方写，编译时会进行合并（也就是将<code>.xaml</code>和<code>.cs</code>合并在一个类里）</li></ul><h4 id="1-2-浅析用户界面的树形结构"><a href="#1-2-浅析用户界面的树形结构" class="headerlink" title="1.2 浅析用户界面的树形结构"></a>1.2 浅析用户界面的树形结构</h4><ul><li>Dos用户界面 - 文字用户界面</li><li>GUI - 图形用户界面 - 友好的用户界面</li></ul><p>WPF制作的用户界面是树形结构。Visual C++、Delphi、VB都是平面结构的。</p><h3 id="Lesson-2"><a href="#Lesson-2" class="headerlink" title="Lesson 2"></a>Lesson 2</h3><h5 id="在-xaml中为对象属性赋值"><a href="#在-xaml中为对象属性赋值" class="headerlink" title="在.xaml中为对象属性赋值"></a>在<code>.xaml</code>中为对象属性赋值</h5><p>对象的数据存储方式有：字段+属性；属性在对外暴露的场景里更加安全，当遇到脏数据时，可以使用set方法对脏数据进行过滤。</p><h6 id="方法一：使用Attribute进行赋值"><a href="#方法一：使用Attribute进行赋值" class="headerlink" title="方法一：使用Attribute进行赋值"></a>方法一：使用Attribute进行赋值</h6><p>这种方法为三种之中最简单的，也很方便。<br>缺陷：只能使用简单的字符串赋值，没有办法赋非常复杂的值。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;Grid&gt;<br>  &lt;Path Data<span class="hljs-operator">=</span><span class="hljs-string">&quot;M 0,0 L 200,100 L 100,200 Z&quot;</span> Stroke<span class="hljs-operator">=</span><span class="hljs-string">&quot;Black&quot;</span> Fill<span class="hljs-operator">=</span><span class="hljs-string">&quot;Red&quot;</span> /&gt;<br>&lt;/Grid&gt;<br></code></pre></td></tr></table></figure><br>使用TypeConverter类进行映射（在MVVM中有自带的）</p><blockquote><p>当前程序集的名空间一般定义为：local<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">xmlns:<span class="hljs-keyword">local</span>=<span class="hljs-string">&quot;clr-namespace:XXX&quot;</span><br></code></pre></td></tr></table></figure></p><h6 id="方法二：用属性标签赋值"><a href="#方法二：用属性标签赋值" class="headerlink" title="方法二：用属性标签赋值"></a>方法二：用属性标签赋值</h6><p>对应对象属性。<br>缺陷：程序变得很繁琐。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;Button /&gt;</span>          <span class="hljs-comment">#空标签</span><br><span class="hljs-section">&lt;Button&gt;</span><span class="hljs-section">&lt;/Button&gt;</span>   <span class="hljs-comment">#标签的内容 与对象的内容区分</span><br></code></pre></td></tr></table></figure></p><h6 id="方法三：使用标签扩展的方式赋值"><a href="#方法三：使用标签扩展的方式赋值" class="headerlink" title="方法三：使用标签扩展的方式赋值"></a>方法三：使用标签扩展的方式赋值</h6><p>方法如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Text</span>=<span class="hljs-string">&quot;&#123;StaticResource ResourceKey=stringHello&#125;&quot;</span><br><span class="hljs-attr">Text</span>=<span class="hljs-string">&quot;&#123;Binding ElementName=sld, Path=Value&#125;&quot;</span><br><br><span class="hljs-comment"># 标签扩展的属性用`逗号`隔开</span><br></code></pre></td></tr></table></figure></p></blockquote><h3 id="Lesson-3"><a href="#Lesson-3" class="headerlink" title="Lesson 3"></a>Lesson 3</h3><h4 id="3-1-事件处理器与代码后置"><a href="#3-1-事件处理器与代码后置" class="headerlink" title="3.1 事件处理器与代码后置"></a>3.1 事件处理器与代码后置</h4><blockquote><p>.NET平台的处理机制为事件</p></blockquote><p>事件五个关键点</p><ul><li>事件拥有者</li><li>事件拥有者 拥有 哪些事件</li><li>事件响应者</li><li>事件响应者 用哪些方法 响应 事件</li><li>其间的事件订阅关系<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Button x:<span class="hljs-attribute">Name</span>=<span class="hljs-string">&quot;Button1&quot;</span> <span class="hljs-attribute">Content</span>=<span class="hljs-string">&quot;Click Me!&quot;</span> <span class="hljs-attribute">Width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attribute">Height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attribute">Click</span>=<span class="hljs-string">&quot;Button_Click&quot;</span> /&gt;<br><span class="hljs-comment"># Click属性为事件处理器 方法的命名一般是Pascal法</span><br></code></pre></td></tr></table></figure><h4 id="3-2-导入程序集和引用其中的名称空间"><a href="#3-2-导入程序集和引用其中的名称空间" class="headerlink" title="3.2 导入程序集和引用其中的名称空间"></a>3.2 导入程序集和引用其中的名称空间</h4><blockquote><p>模块化程序设计 - User Control - 项目组件 </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;Window xmlns:<span class="hljs-keyword">uc</span>=<span class="hljs-string">&quot;clr-namespace:RPARobot.UserControls&quot;</span>&gt;<br><br>&lt;<span class="hljs-keyword">uc</span>:....&gt;<br><span class="hljs-comment">#要先add Reference 才可以使用</span><br><br></code></pre></td></tr></table></figure><h4 id="3-3-XAML的注释"><a href="#3-3-XAML的注释" class="headerlink" title="3.3 XAML的注释"></a>3.3 XAML的注释</h4><p>选中需要注释的内容，有个注释按钮。<br>其注释方法与HTML是一样的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- XXX --&gt;</span><br>#注释之间不可嵌套<br>#快捷键是：crtl+e+c;crtl+e+u;crtl+k+c;crtl+k+u;<br></code></pre></td></tr></table></figure></blockquote></li></ul><h3 id="Lesson-4"><a href="#Lesson-4" class="headerlink" title="Lesson 4"></a>Lesson 4</h3><h4 id="4-1-x名称空间的由来和作用"><a href="#4-1-x名称空间的由来和作用" class="headerlink" title="4.1 x名称空间的由来和作用"></a>4.1 x名称空间的由来和作用</h4><p>xmlns：xml语言的namespace<br>x名空间专门用于映射：<br><code>http://schemas.microsoft.com/winfx/2006/xaml</code><br>该类专门用于解析并分析<code>.xaml</code>代码的。</p><h4 id="4-2-x名称空间里都有什么"><a href="#4-2-x名称空间里都有什么" class="headerlink" title="4.2 x名称空间里都有什么"></a>4.2 x名称空间里都有什么</h4><p>详情见书。</p><h4 id="4-3-x-Class"><a href="#4-3-x-Class" class="headerlink" title="4.3 x:Class"></a>4.3 x:Class</h4><p>x:Class里的类就是最后要进行合并的类。<br>IntializeComponent();这个方法是由.xaml里生成的。</p><h4 id="4-4-x-ClassModifier"><a href="#4-4-x-ClassModifier" class="headerlink" title="4.4 x:ClassModifier"></a>4.4 x:ClassModifier</h4><blockquote><p>ClassModifier：类修饰符 默认为Public</p></blockquote><h4 id="4-5-x-Name"><a href="#4-5-x-Name" class="headerlink" title="4.5 x:Name"></a>4.5 x:Name</h4><blockquote><p>.xaml见到一个标签会创建一个实例，不是变量</p></blockquote><p>x:name相当于给了一个变量引用这个实例，后台可以直接引用这个变量。</p><p>当一个控件有Name属性时，使用起来x:name等于name。</p><h4 id="4-6-x-FieldModifier"><a href="#4-6-x-FieldModifier" class="headerlink" title="4.6 x:FieldModifier"></a>4.6 x:FieldModifier</h4><blockquote><p>控制类字段的访问级别</p></blockquote><h3 id="Lesson-5"><a href="#Lesson-5" class="headerlink" title="Lesson 5"></a>Lesson 5</h3><blockquote><p>MVVM入门与提高</p></blockquote><h4 id="5-1-基本常识"><a href="#5-1-基本常识" class="headerlink" title="5.1 基本常识"></a>5.1 基本常识</h4><h5 id="5-1-1-开发环境"><a href="#5-1-1-开发环境" class="headerlink" title="5.1.1 开发环境"></a>5.1.1 开发环境</h5><ul><li>Visual Studio</li><li>Microsoft Prism</li><li>Microsoft Blend SDK</li></ul><h5 id="5-1-2-Nuget-Package-Manager-安装"><a href="#5-1-2-Nuget-Package-Manager-安装" class="headerlink" title="5.1.2 Nuget Package Manager 安装"></a>5.1.2 Nuget Package Manager 安装</h5><p>无需安装 Visual Studio 已经集成。</p><h5 id="5-1-3-必备知识的准备"><a href="#5-1-3-必备知识的准备" class="headerlink" title="5.1.3 必备知识的准备"></a>5.1.3 必备知识的准备</h5><ul><li><p>Data Binding</p></li><li><p>Dependency Property</p></li><li><p>Dependency Object</p></li><li><p>了解WPF中的命令</p><blockquote><p>委托式命令</p></blockquote></li><li><p>Lambda表达式</p></li></ul><h5 id="5-1-4-Code-Snippet"><a href="#5-1-4-Code-Snippet" class="headerlink" title="5.1.4 Code Snippet"></a>5.1.4 Code Snippet</h5><blockquote><p>代码模板</p></blockquote><p><strong>使用/创建</strong></p><h4 id="5-2-MVVM设计模式详解"><a href="#5-2-MVVM设计模式详解" class="headerlink" title="5.2 MVVM设计模式详解"></a>5.2 MVVM设计模式详解</h4><blockquote><p>MVVM = Model + View + ViewModel</p></blockquote><p><em>View 和 ViewModel 的解耦</em></p><h5 id="5-2-1-基础概念"><a href="#5-2-1-基础概念" class="headerlink" title="5.2.1 基础概念"></a>5.2.1 基础概念</h5><ul><li>Model： 现实世界中对象的抽象结果</li><li>View = UI</li><li>ViewModel = Model for View</li><li>ViewModel与View的沟通<ul><li>传递数据 — 数据属性</li><li>传递操作 — 命令属性<blockquote><p>模块化技术 依赖注入技术 — 更高阶内容</p></blockquote></li></ul></li></ul><p><em>View做操作 ViewModel响应操作</em></p><p><em>ViewModel是桥梁的作用？</em></p><p><em>MVVM适合去写企业级程序</em></p><h4 id="5-3-案例讲解"><a href="#5-3-案例讲解" class="headerlink" title="5.3 案例讲解"></a>5.3 案例讲解</h4><blockquote><p>预备知识：Binding+Command</p><h5 id="5-3-1-小程序"><a href="#5-3-1-小程序" class="headerlink" title="5.3.1 小程序"></a>5.3.1 小程序</h5><p><code>crtl+.</code>可以自动添加类库 <br>界面一动；后台就动；如何更新？</p><ul><li>重要类库：NotificationObject</li><li>重要类库：DelegateCommand</li><li>View和ViewModel交互</li></ul></blockquote><h1 id="一些小知识"><a href="#一些小知识" class="headerlink" title="一些小知识"></a>一些小知识</h1><blockquote><p>学习文档：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">C#官方文档</a></p><h3 id="0-基础知识"><a href="#0-基础知识" class="headerlink" title="0 基础知识"></a>0 基础知识</h3><h5 id="运算符"><a href="#运算符" class="headerlink" title="??运算符"></a>??运算符</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">??</span>  <span class="hljs-comment">#双问号运算符 </span><br></code></pre></td></tr></table></figure><p>提供了一种快捷方式，可以在处理可空类型和引用类型时表示null值的可能性，这个运算符放在两个操作数之间。<br>第一个操作数必须是一个可空类型或者引用类型，第二个操作数必须与第一个操作数类型相同，或者可以隐式转换为第一个操作数的类型。<br> 1、如果第一个操作数不是null，整个表达式就等于第一个操作数的值；<br>2、如果第一个操作数是null， 整个表达式就等于第二个操作数的值<br>例子如下：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">int</span>? a = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">int</span> b;<br>b = a ?? <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">3</span>;<br>Console.WriteLine(b); <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure></p><h5 id="gt-运算符"><a href="#gt-运算符" class="headerlink" title="=&gt;运算符"></a>=&gt;运算符</h5><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda表达式</a></p></blockquote><h1 id="一些文档"><a href="#一些文档" class="headerlink" title="一些文档"></a>一些文档</h1><h3 id="1-WPF文档"><a href="#1-WPF文档" class="headerlink" title="1 WPF文档"></a>1 WPF文档</h3><div class="row">    <embed src="/doc/doc_in_posts/WPFLearning/Prism5forWPF.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
    <tags>
      
      <tag>CSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown用法集合</title>
    <link href="/2021/05/14/MarkdownUsage/"/>
    <url>/2021/05/14/MarkdownUsage/</url>
    
    <content type="html"><![CDATA[<p>1 给字体换颜色<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#191970&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br></code></pre></td></tr></table></figure><br>2 插入希腊字母<br>例：&lambda;<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$\lambda$ <br><span class="hljs-regexp">//</span>该方法无法转义成HTML，但仅Markdown是支持的<br><span class="hljs-regexp">//</span>因此推荐直接使用HTML支持的字符如下:<br>&amp;lambda;<br></code></pre></td></tr></table></figure><br><img src="/img/img_in_posts/MarkdownUsage/Markdown.png" alt="Markdown字符"><br>3 插入上下标<br>H<sub>2</sub>O<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">H<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>O<br></code></pre></td></tr></table></figure><br>H<sup>2</sup><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">H<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理学习记录</title>
    <link href="/2021/05/14/CompilerStudyRecord/"/>
    <url>/2021/05/14/CompilerStudyRecord/</url>
    
    <content type="html"><![CDATA[<h2 id="1-引论"><a href="#1-引论" class="headerlink" title="1 引论"></a>1 引论</h2><blockquote><p>背书.GIF</p><h2 id="2-编译基础知识"><a href="#2-编译基础知识" class="headerlink" title="2 编译基础知识"></a>2 编译基础知识</h2><h3 id="2-1-高级语言"><a href="#2-1-高级语言" class="headerlink" title="2.1 高级语言"></a>2.1 高级语言</h3><p>程序语言是一个记号系统。<br><code>语言=语法+语义</code></p><h3 id="2-2-语法"><a href="#2-2-语法" class="headerlink" title="2.2 语法"></a>2.2 语法</h3><p>语法：使得字符形成一个形式上正确的程序<br><code>语法=词法规则 + 语法规则</code></p><h4 id="2-2-1-单词符号"><a href="#2-2-1-单词符号" class="headerlink" title="2.2.1 单词符号"></a>2.2.1 单词符号</h4><p>单词符号：语言中具有独立意义的基本结构</p><font size='3' color='#6495ED'>一般来说有：常数，标识符，基本字，算符，界限符</font></blockquote><p>词法规则：规定字母表哪些字符串是单词符号<br>可以使用<font size='3' color='#6495ED'>正规式和有限自动机</font>来描述词法结构和进行词法分析</p><h4 id="2-2-2-语法单位"><a href="#2-2-2-语法单位" class="headerlink" title="2.2.2 语法单位"></a>2.2.2 语法单位</h4><p>语法单位：表达式，子句，语句，函数，过程，程序</p><p>语法规则：规定了如何从单词符号来形成语法单位</p><blockquote><p>语言的<code>词法规则</code>和<code>语法规则</code>定义了程序的形式结构，是判断输入字符是否构成一个形式上正确的程序的依据。</p></blockquote><h3 id="2-3-字母表和符号串"><a href="#2-3-字母表和符号串" class="headerlink" title="2.3 字母表和符号串"></a>2.3 字母表和符号串</h3><h4 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h4><ol><li>字母表：非空有穷集合；用&Sigma;和V表示</li><li>符号：是语言中最基本的不可再分的单位 </li><li>符号串：空串&xi;</li><li>句子：字母表上符合某种规则构成的串</li><li>语言：句子的集合</li></ol><blockquote><p>习惯：a,b,c,…表示符号；&alpha;,&beta;,&upsilon;,…表示符号串；A,B,C,…表示集合。</p><h4 id="2-3-2-符号串的集合"><a href="#2-3-2-符号串的集合" class="headerlink" title="2.3.2 符号串的集合"></a>2.3.2 符号串的集合</h4><ol><li>连接（乘积）运算：<font size='3' color='#6495ED'>类似笛卡尔积</font>，若A={&alpha;<sub>1</sub>,&alpha;<sub>2</sub>,&alpha;<sub>3</sub>,…},B={&beta;<sub>1</sub>,&beta;<sub>2</sub>,&beta;<sub>3</sub>,…},则AB={&alpha;&beta;|&alpha;&in;A且&beta;&in;B}</li></ol><ul><li>串集自身的乘积称作串集的方幂</li><li>A<sup>0</sup>={&xi;}</li><li>字母表A的n次幂是字母表A上所有长度为n的串集</li><li>乘积有顺序的A={a,b};B={c,e,d},则AB={ac,ad,ae,bc,bd,be} <code>ac</code>的顺序不可调换<br> <br></li></ul><ol><li>字母表的闭包 <strong>A<sup>*</sup></strong>= A<sup>0</sup> &bigcup; A<sup>1</sup> &bigcup; A<sup>2</sup> &bigcup; … <br><font size='3' color='#6495ED'>即由A上符号组成的所有穿的集合，包括空串&xi;</font><br><br>字母表的正闭包 <strong>A<sup>+</sup></strong>= <strong>A<sup>*</sup></strong> - {&xi;}</li></ol><p>字母表上的语言是字母表上正闭包的子集</p></blockquote><h3 id="2-4-文法与语言"><a href="#2-4-文法与语言" class="headerlink" title="2.4 文法与语言"></a>2.4 文法与语言</h3><h4 id="2-4-1-文法的概念"><a href="#2-4-1-文法的概念" class="headerlink" title="2.4.1 文法的概念"></a>2.4.1 文法的概念</h4><blockquote><p>文法是描述语言的语法结构的形式规则</p><ol><li>非终结符：出现在规则左部；大写字母或用<code>&lt;&gt;</code>括起来，表示一定语法概念的词；用 V<sub>N</sub>表示</li><li>终结符：语言中不可分割的字符串，是组成句子的基本单位；用V<sub>T</sub>表示。</li><li>开始符号：<font size='3' color='#6495ED'>又称识别符号</font>，所定义语法范畴的非终结符</li><li>产生式：形式 A &rightarrow; &alpha;，A产生&alpha;</li><li>推导：事实上，你替换任何一个都可以…<br><font size='3' color='#6495ED'>最左（右）推导：<br>每次使用一个规则，以其右部取代符号串最左（右）非终结符<br></font><code>都为规范推导</code></li><li>归约：归约是推导的逆过程，最左（右）归约是最右（左）推导的逆过程<br><code>都为规范归约</code><br><font size='3' color='#6495ED'>若某个父亲节点的所有孩子都为叶子节点时才能归约</font></li><li>句型、句子和语言</li></ol><ul><li>句型：</li><li>句子：</li><li>语言：</li></ul><ol><li>语法扩充：BNF、元语言符号（指路第一章）</li></ol></blockquote><h4 id="2-4-2-文法与语言的形式定义"><a href="#2-4-2-文法与语言的形式定义" class="headerlink" title="2.4.2 文法与语言的形式定义"></a>2.4.2 文法与语言的形式定义</h4><ol><li>Chomsky的定义：G(V<sub>N</sub>,V<sub>T</sub>,P,S)</li><li>Chomsky的分类：</li></ol><ul><li>0型文法：（短语文法或无限制文法）P中产生式&alpha;&rightarrow;&beta;,&alpha;&in;V<sup>+</sup>并至少含有1个非终结符，&beta;&in;V<sup>*</sup><br><font size='3' color='#6495ED'>识别0型文法的自动机为图灵机；产生式限制最少，可枚举，可递归</font></li><li>1型文法：定义看书P25;<br>（上下文有关、长度增加文法）<br><font size='3' color='#6495ED'>识别1型文法的自动机为线性界限自动机；理解定义：非终结符替换必须在某个特定的上下文中且不可替换为&xi;，除非是S&rightarrow;&xi;</font></li><li>2型文法：上下文无关<br><font size='3' color='#6495ED'>识别1型文法的自动机为下推自动机（PDA）</font><font size='3' color='#DC143C'>是判断句子是否正确的标准</font></li><li>3型文法：正规文法，非终结符全在最右边<code>右线性文法</code>or最左边<code>左线性文法</code>or没有） <br><font size='3' color='#6495ED'>识别3型文法的自动机为有限状态自动机</font><br><font size='3' color='#DC143C'>是判断单词是否正确的标准</font><blockquote><p>上下文无关文法包含了正规文法</p></blockquote></li></ul><ol><li>文法分类的具象表现</li></ol><ul><li>0型文法　 &alpha;&rightarrow;&beta;</li><li>1型文法 　&alpha;A&beta;&rightarrow;&alpha;&upsilon;&beta;</li><li>2型文法　 A&rightarrow;&alpha;（任意符号串）</li><li>3型文法　 A&rightarrow;B&alpha;|&alpha;<br>　　　　　A&rightarrow;&alpha;B|&alpha;</li></ul><ol><li>文法化简的步骤</li><li>构造无&xi;产生式的上下文无关文法的条件<font size='3' color='#6495ED'> (&xi;规则)</font></li></ol><ul><li>P中要么不含有&xi;产生式，要么只有S&rightarrow;&xi;</li><li>若S&rightarrow;&xi;，则S不出现在任何产生式的右部</li></ul><h3 id="2-5-语法树与文法的二义性"><a href="#2-5-语法树与文法的二义性" class="headerlink" title="2.5 语法树与文法的二义性"></a>2.5 语法树与文法的二义性</h3><h4 id="2-5-1-语法树"><a href="#2-5-1-语法树" class="headerlink" title="2.5.1 语法树"></a>2.5.1 语法树</h4><ol><li>定义：用来表示语言句子结构的树</li><li>作用：易于判断文法二义性</li></ol><h4 id="2-5-2-语法树的一些概念"><a href="#2-5-2-语法树的一些概念" class="headerlink" title="2.5.2 语法树的一些概念"></a>2.5.2 语法树的一些概念</h4><ol><li>句型：在一棵语法树生长过程中的任何时刻，所有那些叶子节点排列起来就是一个句型</li><li>短语：子树的末端符号自左向右连成串，相对于子树树根而言称为短语<br>简单短语（直接短语）：若短语是某子树根进过一步推导得到的</li><li>句柄：句型中的最左简单短语；句柄是最左归约时要寻找的简单短语 </li></ol><h4 id="2-5-3-文法的二义性"><a href="#2-5-3-文法的二义性" class="headerlink" title="2.5.3 文法的二义性"></a>2.5.3 文法的二义性</h4><ol><li>句子二义性：若一个句子存在对应的两棵或两棵以上的语法树，则句子是二义的</li><li>文法二义性：有句子二义性的文法</li></ol><h2 id="3-词法分析"><a href="#3-词法分析" class="headerlink" title="3 词法分析"></a>3 词法分析</h2><h3 id="3-1-正则表达式（正规式）"><a href="#3-1-正则表达式（正规式）" class="headerlink" title="3.1 正则表达式（正规式）"></a>3.1 正则表达式（正规式）</h3><blockquote><p>用来描述正则语言更紧凑的表示方法</p><ol><li>定义：正则表达式可以由较小的正则表达式按照特定规则递归地构建。每个正则表达式r定义一个语言L(r)</li><li>若r,s都是RE<br>r|s是RE, L(r|s)=L(r) &bigcup; L(s)<br>rs是RE, L(rs)=L(r)L(s)<br>r<sup>* </sup>是RE, L(r<sup>* </sup>)=(L(r))<sup>*</sup><br>(r)是RE, L((r))=L(r)<br>运算优先级：() &rightarrow; * &rightarrow; 连接 &rightarrow; |</li></ol></blockquote><ol><li>RE的代数定律<br><br><img src="/img/img_in_posts/CompilerStudyRecord/1.PNG" alt="RE的代数定律"><h3 id="3-2-正则定义"><a href="#3-2-正则定义" class="headerlink" title="3.2 正则定义"></a>3.2 正则定义</h3><blockquote><p>给一些RE命名， 并在之后的RE中像使用字母表中的符号一样使用这些名字</p></blockquote></li></ol><h3 id="3-3-有穷自动机-FA"><a href="#3-3-有穷自动机-FA" class="headerlink" title="3.3 有穷自动机(FA)"></a>3.3 有穷自动机(FA)</h3><blockquote><p>经典例子：电梯控制装置</p><h4 id="3-3-1-转换图（Transition-Graph）"><a href="#3-3-1-转换图（Transition-Graph）" class="headerlink" title="3.3.1 转换图（Transition Graph）"></a>3.3.1 转换图（Transition Graph）</h4><ul><li>结点：FA的状态<br>初始状态(开始状态)：只有一个，由start箭头指向 <br>终止状态(接收状态)：可以有多个，用<strong>双圈</strong>表示</li><li>带标记的有向边：边上标记为输入</li></ul></blockquote><h4 id="3-3-2-FA定义-接收-的语言"><a href="#3-3-2-FA定义-接收-的语言" class="headerlink" title="3.3.2 FA定义(接收)的语言"></a>3.3.2 FA定义(接收)的语言<br></h4><p>   输入串能让有穷状态机从初始状态转换到终止状态，该串被接收。<br><br>   所有可接收串构成的集合为FA定义（或接收）的语言，记为L(M)</p><h4 id="3-3-3-有穷自动机的分类"><a href="#3-3-3-有穷自动机的分类" class="headerlink" title="3.3.3 有穷自动机的分类"></a>3.3.3 有穷自动机的分类</h4><ol><li>确定的FA(Deterministic finite automata, DFA)</li></ol><ul><li>定义为五元组 M=(K,&Sigma;,f,S,Z),书P48</li><li>DFA即可以用<strong>转换图</strong>表示，也可以用<strong>转换表</strong>表示</li></ul><ol><li>非确实的FA(Nondeterministic finite automata, NFA)</li></ol><ul><li>与DFA的唯一区别：沿着标记能到达的状态不唯一</li><li>NFA的边上还能标记&xi;, 带有“&xi;-边”的NFA<blockquote><p> 带有“&xi;-边”的NFA与不带“&xi;-边”的NFA等价<br>DFA与NFA具有等价性<br><br>DFA与RE也等价<br><br>四者相互等价</p></blockquote></li></ul><ol><li>DFA与NFA比较</li></ol><ul><li>DFA计算机更好实现</li><li>NFA更加直观 </li></ul><ol><li>DFA的算法实现<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">K=S；<br>c=getchar();<span class="hljs-comment">//当前输入符号</span><br><span class="hljs-keyword">while</span> (c&lt;&gt;eof()) <br>&#123;K=f(K,c);<br>c=getchar();<br>&#125;<br><span class="hljs-keyword">if</span> (K <span class="hljs-keyword">in</span> Z) <span class="hljs-keyword">return</span> (“yes”)<span class="hljs-comment">//遇到文件结束符号</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (“no”)<br></code></pre></td></tr></table></figure><h4 id="3-3-4-从正则表达式到有穷自动机"><a href="#3-3-4-从正则表达式到有穷自动机" class="headerlink" title="3.3.4 从正则表达式到有穷自动机"></a>3.3.4 从正则表达式到有穷自动机</h4></li><li>从RE到NFA</li></ol><ul><li>套用下面</li></ul><ol><li>从NFA到DFA</li></ol><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#6495ED&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br>&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#DC143C&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CompulsoryCourse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的建站方法记录</title>
    <link href="/2021/05/12/MyBlogBuildWay/"/>
    <url>/2021/05/12/MyBlogBuildWay/</url>
    
    <content type="html"><![CDATA[<h1 id="我的建站方法记录"><a href="#我的建站方法记录" class="headerlink" title="我的建站方法记录"></a>我的建站方法记录</h1><p>环境：Windows10</p><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1 安装git"></a>1 安装git</h2><h3 id="1-1-安装Cygwin"><a href="#1-1-安装Cygwin" class="headerlink" title="1.1 安装Cygwin"></a>1.1 安装Cygwin</h3><blockquote><p>下载地址:<a href="http://www.cygwin.com/">Cygwin官网</a></p></blockquote><p><img src="/img/img_in_posts/MyBlogBuildWay/Cygwin.PNG" alt="Cygwin-1"></p><blockquote><p>直接安装一路默认</p></blockquote><p><img src="/img/img_in_posts/MyBlogBuildWay/Cygwin2.PNG" alt="Cygwin-2"><br><img src="/img/img_in_posts/MyBlogBuildWay/Cygwin3.PNG" alt="Cygwin-3"><br><img src="/img/img_in_posts/MyBlogBuildWay/Cygwin4.PNG" alt="Cygwin-4"><br><img src="/img/img_in_posts/MyBlogBuildWay/Cygwin5.PNG" alt="Cygwin-5"></p><blockquote><p>这里推荐使用国内的镜像网站（找不到得自己添加）</p></blockquote><p><img src="/img/img_in_posts/MyBlogBuildWay/Cygwin6.PNG" alt="Cygwin-6"></p><blockquote><p>这里是一些必须安装的包</p></blockquote><p><img src="/img/img_in_posts/MyBlogBuildWay/Cygwin7.PNG" alt="Cygwin-7"></p><h3 id="1-2-在Cygwin下使用git的SSH服务"><a href="#1-2-在Cygwin下使用git的SSH服务" class="headerlink" title="1.2 在Cygwin下使用git的SSH服务"></a>1.2 在Cygwin下使用git的SSH服务</h3><h4 id="1-2-1-在Cygwin打开后，默认在-目录，使用如下命令查看实际在Windows中的路径"><a href="#1-2-1-在Cygwin打开后，默认在-目录，使用如下命令查看实际在Windows中的路径" class="headerlink" title="1.2.1 在Cygwin打开后，默认在~目录，使用如下命令查看实际在Windows中的路径"></a>1.2.1 在Cygwin打开后，默认在~目录，使用如下命令查看实际在Windows中的路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">cygpath -w ~/</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/img_in_posts/MyBlogBuildWay/Cygwin8.PNG" alt="Cygwin-8"></p><h4 id="1-2-2-使用ssh-keygen命令生成密钥"><a href="#1-2-2-使用ssh-keygen命令生成密钥" class="headerlink" title="1.2.2 使用ssh-keygen命令生成密钥"></a>1.2.2 使用ssh-keygen命令生成密钥</h4><p>生成的.ssh文件夹在C:\cygwin64\home\ad662下，.ssh文件夹里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，id_rsa.pub是公钥。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@163.com&quot;</span></span><br></code></pre></td></tr></table></figure><h4 id="1-2-3-设置GitHub-SSH-Keys"><a href="#1-2-3-设置GitHub-SSH-Keys" class="headerlink" title="1.2.3 设置GitHub SSH Keys"></a>1.2.3 设置GitHub SSH Keys</h4><p>登陆GitHub-&gt;Settings-&gt;“SSH Keys”，然后，点“Add SSH Key”，起个Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”。</p><h4 id="1-2-4-创建Repository"><a href="#1-2-4-创建Repository" class="headerlink" title="1.2.4 创建Repository"></a>1.2.4 创建Repository</h4><p>在github上创建一个仓库<br>注意repository的名字要与github的用户名一致。(如下形式)<br><code>your_user_name.github.io</code><br>其他保持默认即可。</p><h4 id="1-2-5-在本地创建一个同名仓库"><a href="#1-2-5-在本地创建一个同名仓库" class="headerlink" title="1.2.5 在本地创建一个同名仓库"></a>1.2.5 在本地创建一个同名仓库</h4><p>回到Cygwin<br>使用如下命令在~目录下，创建一个名为<code>your_user_name.github.io</code>的仓库，初始化，并上传一两个文件测试能否使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir xxx（仓库名）<br>git init<br>touch README<br>git add README <br>git commit -m &#x27;first commit&#x27;<br>git push origin master<br></code></pre></td></tr></table></figure><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2 安装Node.js"></a>2 安装Node.js</h2><blockquote><p>下载地址：<a href="https://nodejs.org/en/">Node.js官网</a><br>安装一路默认即可。</p></blockquote><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3 安装Hexo"></a>3 安装Hexo</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>打开Cygwin，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g hexo</span><br></code></pre></td></tr></table></figure><h3 id="3-2-初始化"><a href="#3-2-初始化" class="headerlink" title="3.2 初始化"></a>3.2 初始化</h3><p>新建一个名为Hexo的文件夹，cd到该文件夹，输入如下命令进行初始化及初始化下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install <span class="hljs-comment">#会在目录中安装 node_modules。</span></span><br></code></pre></td></tr></table></figure><h3 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3 启动服务"></a>3.3 启动服务</h3><p>输入如下命令，启动服务；启动后，在浏览器中输入<a href="http://localhost:4000/，可见已经生成好了一篇模板blog。">http://localhost:4000/，可见已经生成好了一篇模板blog。</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo server</span><br>[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><h3 id="3-4-生成静态网页"><a href="#3-4-生成静态网页" class="headerlink" title="3.4 生成静态网页"></a>3.4 生成静态网页</h3><p>输入如下命令，将.md文件转换为.html网页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo g</span><br></code></pre></td></tr></table></figure><h3 id="3-5-部署到Github上"><a href="#3-5-部署到Github上" class="headerlink" title="3.5 部署到Github上"></a>3.5 部署到Github上</h3><h4 id="3-5-1-修改-config-yml文件"><a href="#3-5-1-修改-config-yml文件" class="headerlink" title="3.5.1 修改_config.yml文件"></a>3.5.1 修改_config.yml文件</h4><p>将下面的第一段内容修改成第二段</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: http://hexo.io/docs/deployment.html</span><br>deploy:<br>  <span class="hljs-built_in">type</span>:<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: http://hexo.io/docs/deployment.html</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repository: git@github.com:yui73/yui73.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><h4 id="3-5-2-测试"><a href="#3-5-2-测试" class="headerlink" title="3.5.2 测试"></a>3.5.2 测试</h4><p>在浏览器中打开(<a href="http://yui73.github.io/">http://yui73.github.io/</a>) ，正常显示网页，表明部署成功。</p><h2 id="4-开始操作"><a href="#4-开始操作" class="headerlink" title="4 开始操作"></a>4 开始操作</h2><h3 id="4-1-部署操作"><a href="#4-1-部署操作" class="headerlink" title="4.1 部署操作"></a>4.1 部署操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章(不用引号)</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo generate <span class="hljs-comment">#生成静态页面至public目录</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo server <span class="hljs-comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo deploy <span class="hljs-comment">#将.deploy目录部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</span></span><br></code></pre></td></tr></table></figure><p>每次更新完，都可使用三步走进行部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo clean</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo s -g</span><br></code></pre></td></tr></table></figure><p>假设只执行<code>hexo g</code>，不执行<code>hexo s</code>的时候，则会在<code>hexo</code>文件夹下生成public文件夹，当遇到一些bug的时候，直接去看html文件有奇效。</p><h3 id="4-2-更换主题-Way1"><a href="#4-2-更换主题-Way1" class="headerlink" title="4.2 更换主题-Way1"></a>4.2 更换主题-Way1</h3><blockquote><p><a href="https://github.com/hexojs/hexo/wiki/Themes">主题仓库</a></p></blockquote><h4 id="4-2-1-在Cygwin下，cd到D-hexo目录下，clone想要的主题仓库"><a href="#4-2-1-在Cygwin下，cd到D-hexo目录下，clone想要的主题仓库" class="headerlink" title="4.2.1 在Cygwin下，cd到D:/hexo目录下，clone想要的主题仓库"></a>4.2.1 在Cygwin下，cd到D:/hexo目录下，clone想要的主题仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> git://github.com/A-limon/pacman.git themes/pacman<br><span class="hljs-comment">#将链接中的https换成git，能避免一些clone失败的情况</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2-修改你的博客根目录-D-Hexo下的-config-yml配置文件中的theme属性，将其设置为pacman。"><a href="#4-2-2-修改你的博客根目录-D-Hexo下的-config-yml配置文件中的theme属性，将其设置为pacman。" class="headerlink" title="4.2.2 修改你的博客根目录/D/Hexo下的_config.yml配置文件中的theme属性，将其设置为pacman。"></a>4.2.2 修改你的博客根目录/D/Hexo下的_config.yml配置文件中的theme属性，将其设置为pacman。</h4><h4 id="4-2-3-更新主题"><a href="#4-2-3-更新主题" class="headerlink" title="4.2.3 更新主题"></a>4.2.3 更新主题</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">cd</span> themes/pacman<br>$ git pull<br></code></pre></td></tr></table></figure><h3 id="4-3-更换主题"><a href="#4-3-更换主题" class="headerlink" title="4.3 更换主题"></a>4.3 更换主题</h3><p>有些主题有自己推荐的安装方式，详情见文档。</p><blockquote><p><a href="https://hexo.fluid-dev.com/docs/start/">Fluid</a></p></blockquote><h3 id="4-4-增加Live2D小人"><a href="#4-4-增加Live2D小人" class="headerlink" title="4.4 增加Live2D小人"></a>4.4 增加Live2D小人</h3><blockquote><p>GitHub仓库：<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md#hexo">Hexo-Live2D</a></p></blockquote><h4 id="4-4-1-安装插件"><a href="#4-4-1-安装插件" class="headerlink" title="4.4.1 安装插件"></a>4.4.1 安装插件</h4><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install --save hexo-helper-live2d</span><br></code></pre></td></tr></table></figure><h4 id="4-4-2-修改配置"><a href="#4-4-2-修改配置" class="headerlink" title="4.4.2 修改配置"></a>4.4.2 修改配置</h4><p>配置_config.yml文件（我一般都配根目录下面那个）</p><h3 id="4-5-插入pdf"><a href="#4-5-插入pdf" class="headerlink" title="4.5 插入pdf"></a>4.5 插入pdf</h3><p>先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install --save hexo-pdf</span><br></code></pre></td></tr></table></figure><p>在markdown对应的文件夹中存放你的pdf,输入：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% pdf ./Prism5forWPF.pdf %&#125;<br></code></pre></td></tr></table></figure><h2 id="5-一些问题"><a href="#5-一些问题" class="headerlink" title="5 一些问题"></a>5 一些问题</h2><h3 id="5-1-图片加载不出来"><a href="#5-1-图片加载不出来" class="headerlink" title="5.1 图片加载不出来"></a>5.1 图片加载不出来</h3><h4 id="5-1-1-注意图片是-png还是-PNG，在本地测试无关，在Github上区分大小写。"><a href="#5-1-1-注意图片是-png还是-PNG，在本地测试无关，在Github上区分大小写。" class="headerlink" title="5.1.1 注意图片是.png还是.PNG，在本地测试无关，在Github上区分大小写。"></a>5.1.1 注意图片是<code>.png</code>还是<code>.PNG</code>，在本地测试无关，在Github上区分大小写。</h4><h4 id="5-1-2-直接找html文件看路径是否正确，路径可能不支持中文。"><a href="#5-1-2-直接找html文件看路径是否正确，路径可能不支持中文。" class="headerlink" title="5.1.2 直接找html文件看路径是否正确，路径可能不支持中文。"></a>5.1.2 直接找<code>html</code>文件看路径是否正确，路径可能不支持中文。</h4><h3 id="5-2-hexo-g-时的报错"><a href="#5-2-hexo-g-时的报错" class="headerlink" title="5.2 hexo g 时的报错"></a>5.2 hexo g 时的报错</h3><p>报错内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sh">FATAL &#123;<br>  err: Template render error: (unknown path)<br>    Error: expected end of comment, got end of file<br>      at Object._prettifyError (D:\Hexo\node_modules\nunjucks\src\lib.js:36:11)<br>      at Template.render (D:\Hexo\node_modules\nunjucks\src\environment.js:538:21)<br>      at Environment.renderString (D:\Hexo\node_modules\nunjucks\src\environment.js:380:17)<br>      at D:\Hexo\node_modules\hexo\lib\extend\tag.js:236:16<br>      at tryCatcher (D:\Hexo\node_modules\bluebird\js\release\util.js:16:23)<br>      at Function.Promise.fromNode.Promise.fromCallback (D:\Hexo\node_modules\bluebird\js\release\promise.js:209:30)<br>      at Tag.render (D:\Hexo\node_modules\hexo\lib\extend\tag.js:235:20)<br>      at Object.onRenderEnd (D:\Hexo\node_modules\hexo\lib\hexo\post.js:297:22)<br>      at D:\Hexo\node_modules\hexo\lib\hexo\render.js:79:21<br>      at tryCatcher (D:\Hexo\node_modules\bluebird\js\release\util.js:16:23)<br>      at Promise._settlePromiseFromHandler (D:\Hexo\node_modules\bluebird\js\release\promise.js:547:31)<br>      at Promise._settlePromise (D:\Hexo\node_modules\bluebird\js\release\promise.js:604:18)<br>      at Promise._settlePromise0 (D:\Hexo\node_modules\bluebird\js\release\promise.js:649:10)<br>      at Promise._settlePromises (D:\Hexo\node_modules\bluebird\js\release\promise.js:729:18)<br>      at _drainQueueStep (D:\Hexo\node_modules\bluebird\js\release\async.js:93:12)<br>      at _drainQueue (D:\Hexo\node_modules\bluebird\js\release\async.js:86:9)<br>      at Async._drainQueues (D:\Hexo\node_modules\bluebird\js\release\async.js:102:5)<br>      at Immediate.Async.drainQueues (D:\Hexo\node_modules\bluebird\js\release\async.js:15:14)<br>      at processImmediate (internal/timers.js:462:21) &#123;<br>    cause: Template render error: (unknown path)<br>      Error: expected end of comment, got end of file<br>        at Object._prettifyError (D:\Hexo\node_modules\nunjucks\src\lib.js:36:11)<br>        at Template.render (D:\Hexo\node_modules\nunjucks\src\environment.js:538:21)<br>        at Environment.renderString (D:\Hexo\node_modules\nunjucks\src\environment.js:380:17)<br>        at D:\Hexo\node_modules\hexo\lib\extend\tag.js:236:16<br>        at tryCatcher (D:\Hexo\node_modules\bluebird\js\release\util.js:16:23)<br>        at Function.Promise.fromNode.Promise.fromCallback (D:\Hexo\node_modules\bluebird\js\release\promise.js:209:30)<br>        at Tag.render (D:\Hexo\node_modules\hexo\lib\extend\tag.js:235:20)<br>        at Object.onRenderEnd (D:\Hexo\node_modules\hexo\lib\hexo\post.js:297:22)<br>        at D:\Hexo\node_modules\hexo\lib\hexo\render.js:79:21<br>        at tryCatcher (D:\Hexo\node_modules\bluebird\js\release\util.js:16:23)<br>        at Promise._settlePromiseFromHandler (D:\Hexo\node_modules\bluebird\js\release\promise.js:547:31)<br>        at Promise._settlePromise (D:\Hexo\node_modules\bluebird\js\release\promise.js:604:18)<br>        at Promise._settlePromise0 (D:\Hexo\node_modules\bluebird\js\release\promise.js:649:10)<br>        at Promise._settlePromises (D:\Hexo\node_modules\bluebird\js\release\promise.js:729:18)<br>        at _drainQueueStep (D:\Hexo\node_modules\bluebird\js\release\async.js:93:12)<br>        at _drainQueue (D:\Hexo\node_modules\bluebird\js\release\async.js:86:9)<br>        at Async._drainQueues (D:\Hexo\node_modules\bluebird\js\release\async.js:102:5)<br>        at Immediate.Async.drainQueues (D:\Hexo\node_modules\bluebird\js\release\async.js:15:14)<br>        at processImmediate (internal/timers.js:462:21),<br>    isOperational: <span class="hljs-literal">true</span><br>  &#125;<br>&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></code></pre></td></tr></table></figure><p>主要报错要看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">err: Template render error: (unknown path)<br>   Error: expected end of comment, got end of file<br></code></pre></td></tr></table></figure><p>错误原因：Markdown文件中存在不能转义的字符<br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;#<br><span class="hljs-meta prompt_"># </span><span class="language-bash">//<span class="hljs-comment">#单独出现</span></span><br></code></pre></td></tr></table></figure><h3 id="5-3-希腊字母和数学符号无法在网页显示"><a href="#5-3-希腊字母和数学符号无法在网页显示" class="headerlink" title="5.3 希腊字母和数学符号无法在网页显示"></a>5.3 希腊字母和数学符号无法在网页显示</h3><p>错误原因：使用Markdown语法写的希腊字母在转义成HTML时，无法被HTML识别</p><p>解决办法：直接在Markdown里面使用HTML语法的希腊字母和数学符号即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web前端开发学习</title>
    <link href="/2021/04/25/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/25/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>仅用于自己学习时知识点的整理<br>学习视频：<a href="https://www.bilibili.com/video/BV1QW411N762?p=11">鱼C-小甲鱼</a></p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>q元素<br>用于定义比较短的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>q元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>孔子有云：<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>学而不思则罔，思而不学则殆<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>blockquote元素<br>通过缩进的形式区分</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blockquote元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>未被引用段<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>被引用段<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>cite元素<br>用于定义作品的标题，默认为斜体</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>CITE元素<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>abbr元素<br>用于定义缩写，与全局属性title配合使用可展示完整含义</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>abbr元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abbreviate&quot;</span>&gt;</span>abbr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>dfn元素<br>用于定义术语（试了一下，默认也是斜体）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>abbr元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abbreviate&quot;</span>&gt;</span>abbr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>address元素<br>用于定义联系信息的元素，默认斜体</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>address元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度网址<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>ruby、rt、rp元素<br>rt：用于标记注音符号<br>rp：当浏览器不支持ruby替代的显示内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ruby元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>我<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>wǒ<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>爱<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ài<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>上<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>shàng<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>海<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>hǎi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>bdo元素<br>具有dir属性，有两个值：<br><code>lfr</code>(left to right)：为默认的<br><code>rtl</code>(right to left)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>bdo元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bdo</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;rtl&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>从右往左<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>我<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>wǒ<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>爱<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ài<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>上<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>shàng<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>海<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>hǎi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bdo</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="样式格式"><a href="#样式格式" class="headerlink" title="样式格式"></a>样式格式</h2><ul><li><p>粗体<br>strong元素：粗体+表示重要的含义<br>b元素：仅表示粗体</p></li><li><p>斜体<br>em元素：斜体+表示强调的含义<br>i元素：仅表示斜体<br><strong>也使用css样式表来代替实现b和i元素</strong></p></li><li><p>del元素<br><del>删除内容</del><br>含义正确，只是做一个更新</p></li><li>ins元素<br>改为下划线</li><li>s元素<br><del>删除内容</del><br>含义不正确</li><li>u元素<br>下划线，含义为拼写错误的单词或者汉语的专有名词。</li><li>mark元素<br>标记文本的作用，默认黄色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>mark元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>标记1<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>标记2<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>sup元素<br>表示上标</li><li>sub元素<br>表示下标</li><li>small元素<br>把文本变小</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>无序列表(Unordered List)<br><code>ul</code>来定义列表<br><code>li</code>来包裹列表项<br>左边默认为 ：<br><strong>·</strong> 这样的样式<br><strong>·</strong> 这样的样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Unordered List<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>有序列表(Ordered List)<br><code>ol</code>来定义列表<br><code>li</code>来包裹列表项<br>左边默认为 ：<br><strong>1.</strong> 这样的样式<br><strong>2.</strong> 这样的样式</li><li>表格<br><code>tr</code>来定义表格<br><em>HTML5之后的表格边框样式都要使用CSS来实现：</em><br><code>border</code>属性<br><code>border-collapse</code>属性-用于合并边框线</li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li>一个简单的表单</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>一个简单的表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;welcome.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>名字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>br&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>text</code>：明文<br><code>method</code>：post(将参数整合到url中)/post<br><code>bottom</code>：submmit/bottom/reset；可以覆盖表单的一些属性（formmethod）<br><code>autocomplete</code>：浏览器是否帮你自动填充<br><code>value</code>：设置默认值<br><code>autofocus</code>：会自动聚焦到某个input框<br><code>disable</code>：禁用元素，FormData不提交这个数据了<br><code>readonly</code>：不允许修改默认值，FormData依然提交这个数据</p><hr><p><code>fieldset</code>：分组元素 -&gt; <code>legend</code>：fieldset子元素，用于设计分组的title<br><code>select</code>&amp;<code>option</code>：用于实现下拉框<br><code>optgroup</code>：对下拉框进行分组</p>]]></content>
    
    
    
    <tags>
      
      <tag>Front/Interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合计数</title>
    <link href="/2020/01/09/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    <url>/2020/01/09/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="组合计数-专题"><a href="#组合计数-专题" class="headerlink" title="组合计数-专题"></a>组合计数-专题</h1><hr><h2 id="·-模运算"><a href="#·-模运算" class="headerlink" title="· 模运算"></a>· 模运算</h2><p><strong>性质</strong>：</p><ol><li>(a + b)%p=(a%p + b%p)%p</li><li><p>(a <em> b)%p=((a%p)</em>(b%p))%p<br>【性质不适用于==除法==】</p><p><strong>除法处理方式</strong>：<br><strong>公式</strong>：(b/a)%p=(b*a^(p-2)^)%p</p><h3 id="例题（A-B-HDU-1576）"><a href="#例题（A-B-HDU-1576）" class="headerlink" title="例题（A/B-HDU-1576）"></a>例题（A/B-HDU-1576）</h3><p><strong>题目</strong>：<br>要求(A/B)%9973，但由于A很大，我们只给出n(n=A%9973)(我们给定的A必能被B整除，且gcd(B,9973) = 1)。  </p></li></ol><p><strong>样例输入</strong>：<br>2<br>1000 53<br>87 123456789</p><p><strong>样例输出</strong>：<br>7922<br>6060</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mod</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> mod)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> b1=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9971</span>;i++)<br>    &#123;<br>        b1=(b1*b)%mod;<br>    &#125;<br>    ans=(n*b1)%<span class="hljs-number">9973</span>;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,b;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-type">int</span> ans;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n&gt;&gt;b;<br>        ans=<span class="hljs-built_in">mod</span>(n,b,<span class="hljs-number">9973</span>);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>o(´^｀)o ~ 此处有待更新</p><hr><h2 id="·组合数求法"><a href="#·组合数求法" class="headerlink" title="·组合数求法"></a>·组合数求法</h2><ol><li>杨辉三角：C(n,m) = C(n-1,m) +C(n-1,m-1)</li><li>公式：C(n,m)=n! / m! / (n-m)!<br>【大约 20！就到达了10^18^】</li></ol><p><strong>思考</strong>：<br>通常题目中的数据不会小于20，该如何避免强行计算阶乘 。</p><h3 id="例题（Divisors-POJ-2992）"><a href="#例题（Divisors-POJ-2992）" class="headerlink" title="例题（Divisors-POJ-2992）"></a>例题（Divisors-POJ-2992）</h3><p><strong>题目</strong>：<br>Your task in this problem is to determine the number of divisors of C(n,k). Just for fun — or do you need any special reason for such a useful computation?</p><p><strong>Input</strong>：<br>The input consists of several instances. Each instance consists of a single line containing two integers n and k (0 ≤ k ≤ n ≤ 431), separated by a single space.</p><p><strong>Output</strong>：<br>For each instance, output a line containing exactly one integer — the number of distinct divisors of C(n,k). For the input instances, this number does not exceed 2^63^ - 1.</p><p><strong>样例输入</strong>：<br>5 1<br>6 3<br>10 4</p><p><strong>样例输出</strong>：<br>2<br>6<br>16</p><p><strong>思考</strong>：</p><ol><li>避开计算C(n,k)</li><li>打表素数</li><li>整数 n 的拆分: n=p~1~^a1^ p~2~^a2^ p~3~^a3^… p~m~^am^</li><li>计算指数：a~1~ = n / p~1~ + n / p~1~^2^ + n / p~1~^3^+… </li><li>n! 的因子个数：(a~1~+1) <em> (a~2~+1)  </em> … * (a~m~+1)</li><li>C(n,k)=n! / k! / (n-k)! 的因子数：<br>[(a~1n~-a~1k~-a~1(n-k)~)+1] <em> [(a~2n~-a~2k~-a~2(n-k)~)+1]  </em> … * [(a~mn~-a~mk~-a~m(n-k)~)+1]</li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> primenums[<span class="hljs-number">450</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">prime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//打表</span><br>    <span class="hljs-type">int</span> cot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">450</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||i==<span class="hljs-number">2</span>)<br>        &#123;<br>            primenums[cot]=i;<br>            cot++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-built_in">sqrt</span>(i);j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)<br>                &#123;<br>                    flag=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>            &#123;<br>                primenums[cot]=i;<br>                cot++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">coot2</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//计算指数个数</span><br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        ans=ans+n/p;<br>        n=n/p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">coot1</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//计算约数个数</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(primenums[i]&lt;=n)<br>    &#123;<br>        ans=ans*(<span class="hljs-built_in">coot2</span>(n,primenums[i])-<span class="hljs-built_in">coot2</span>(k,primenums[i])-<span class="hljs-built_in">coot2</span>(n-k,primenums[i])+<span class="hljs-number">1</span>);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans;<br>    <span class="hljs-built_in">prime</span>();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k)==<span class="hljs-number">2</span>)<br>    &#123;<br><br>        ans=<span class="hljs-built_in">coot1</span>(n,k);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举排列</title>
    <link href="/2020/01/07/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97%E6%B3%95/"/>
    <url>/2020/01/07/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举排列"><a href="#枚举排列" class="headerlink" title="枚举排列"></a>枚举排列</h1><p><strong>题目</strong>：输入正整数 n ，按照字典序从小到大的顺序的前 n 个数的所有排列。</p><p><strong>提示</strong>：两个序列字典序关系大小关系等价于从头开始第一个不相同位置大小关系。（即： {1,3,2} &lt; {2,1,3} ）</p><hr><h2 id="·-生成-1-n-的排列"><a href="#·-生成-1-n-的排列" class="headerlink" title="· 生成 1 ~ n 的排列"></a>· 生成 1 ~ n 的排列</h2><p><strong>思考</strong>：<br>以 1 开头的排列开始讨论：第一位是 1，后面 2~9 按照字典序排序，2 ~ 9 的排列又符合 ：以 2 开头的排列。<br>(出现了！是你！递归！)</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_permutation</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(cur==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,A[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;cur;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(A[j]==i)<br>                    flag=<span class="hljs-number">0</span>;<br>            &#125;        <br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                A[cur]=i;<br>                <span class="hljs-built_in">print_permutation</span>(n,A,cur+<span class="hljs-number">1</span>);<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> A[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">print_permutation</span>(n,A,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二级指针</title>
    <link href="/2019/11/28/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/"/>
    <url>/2019/11/28/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><p><strong>笔记</strong>：</p><ol><li>**p 指向值</li><li>*p 指向1级指针地址</li><li>p 二级指针地址</li></ol><p><strong>代码测试</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-type">int</span> **i,<span class="hljs-type">int</span> **j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Before:%d %d\n&quot;</span>,*i,*j);<br>    <span class="hljs-type">int</span> *t;<br>    t=*i;<br>    *i=*j;<br>    *j=t;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After:%d %d\n&quot;</span>,*i,*j);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">4</span>,b=<span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> *p1=&amp;a,*p2=&amp;b;<br>    <span class="hljs-type">int</span> **p3=&amp;p1,**p4=&amp;p2;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BeforeSwap:%d %d\n&quot;</span>,p1,p2);<br>    <span class="hljs-built_in">Swap</span>(p3,p4);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AfterSwap:%d %d\n&quot;</span>,p1,p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,*p1,*p2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CPlusPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暴力求解法</title>
    <link href="/2019/11/27/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3%E6%B3%95/"/>
    <url>/2019/11/27/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="暴力求解法"><a href="#暴力求解法" class="headerlink" title="暴力求解法"></a>暴力求解法</h1><h2 id="2019-11-26"><a href="#2019-11-26" class="headerlink" title="2019/11/26"></a>2019/11/26</h2><p>第一次通过写博客来记录自己的学习进程。<br>在之前的学习过程中，<br>深刻认识到我应该与自己的键盘多多培养感情。</p><p>于是，放下我的纸笔，开始写这第一篇博客。</p><h3 id="除法（Division，UVa-725）"><a href="#除法（Division，UVa-725）" class="headerlink" title="除法（Division，UVa 725）"></a>除法（Division，UVa 725）</h3><p><strong>题目</strong>：<br>输入整数n，按从小到大的顺序输出所有形如 <strong>abcde/ fghij = n</strong>  的表达式，其中 a ~ j 恰好为数字 0 ~ 9 的一个排列（可以有前导0），2&lt;= n &lt;= 79  。</p><p><strong>样例输入</strong>：<br>62</p><p><strong>样例输出</strong>：<br>79546 / 01283 = 62<br>94736 / 01528 = 62</p><p><strong>骚操作</strong>：</p><ol><li>使用 <strong>sprintf</strong>函数快速将两个int型数据转换成字符串并且进行拼接</li><li>按照题意，满足条件的必须是 0 ~ 9 的一个排列，因此，先进行排序，再进行判断，会更加迅速且准确。<br>（判断条件：<strong>‘0’+i</strong>）</li><li>利用 bool 型 flag 对其是否满足条件进行标记<br>（应该属于基操）</li></ol><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">99</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fghij=<span class="hljs-number">1234</span>;;fghij++)<br>        &#123;<br>            <span class="hljs-type">int</span> abcde=fghij*n;<br>            <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%05d%05d&quot;</span>,abcde,fghij);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(s)&gt;<span class="hljs-number">10</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-built_in">sort</span>(s,s+<span class="hljs-number">10</span>);<br>            <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i]!=<span class="hljs-string">&#x27;0&#x27;</span>+i) flag=<span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                cnt++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d / %05d = %d\n&quot;</span>,abcde,fghij,n);<br>            &#125;<br>           <br>        &#125;<br>         <span class="hljs-keyword">if</span>(!cnt)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There is no solutions!&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最大乘积（Maximum-Product-UVa-11059）"><a href="#最大乘积（Maximum-Product-UVa-11059）" class="headerlink" title="最大乘积（Maximum Product,UVa 11059）"></a>最大乘积（Maximum Product,UVa 11059）</h3><p><strong>题目</strong>：<br>输入n个元素组成的序列S，你需要找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，应输出0（表示无解）<br>1 &lt;= n &lt;= 18, -10 &lt;= Si &lt;= 10。</p><p><strong>样例输入</strong>：<br>3<br>2 4 -3<br>5<br>2 5 -1 2 -1</p><p><strong>样例输出</strong>：<br>8<br>20</p><p><strong>骚操作</strong>：</p><ol><li>数据范围：1 &lt;= n &lt;= 18, -10 &lt;= Si &lt;= 10<br>刚好最大可能乘积不超过10^18，使用 long long 存储。</li><li>从头到尾枚举，max判断大小。</li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> s[<span class="hljs-number">19</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">1</span>,temp=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;s[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>         temp=temp*s[i];<br>         ans=<span class="hljs-built_in">max</span>(ans,temp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分数拆分（Fractions-Again，UVa-10976）"><a href="#分数拆分（Fractions-Again，UVa-10976）" class="headerlink" title="分数拆分（Fractions Again，UVa 10976）"></a>分数拆分（Fractions Again，UVa 10976）</h3><p><strong>题目</strong>：<br>输入正整数k,找到所有的正整数x&gt;=y,使得 1 / k = 1 / x + 1 / y </p><p><strong>样例输入</strong>：<br>2<br>12</p><p><strong>样例输出</strong>：<br> 2<br>1 / 2 = 1 / 6 +1 / 3<br>1 / 2 = 1 / 4 +1 / 4<br>8<br>1 / 12 = 1 / 156 +1 / 13<br>1 / 12 = 1 / 84 +1 / 14<br>1 / 12 = 1 / 60 +1 / 15<br>1 / 12 = 1 / 48 +1 / 16<br>1 / 12 = 1 / 36 +1 / 18<br>1 / 12 = 1 / 30 +1 / 20<br>1 / 12 = 1 / 28 +1 / 21<br>1 / 12 = 1 / 24 +1 / 24</p><p><strong>骚操作</strong>：</p><ol><li>由于 x &gt;= y ,有 1 / x &lt;= 1 / y ,因此 1 / k - 1 / y &lt;= 1 / y<br>即 y &lt;= 2k (暴力枚举)  </li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k)==<span class="hljs-number">1</span> &amp;&amp; k)<br>    &#123;<br>        <span class="hljs-type">int</span> kase=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">float</span> x=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>],b[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">float</span> i=k+<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*k;i++)<br>        &#123;<br>            x=(i*k)/(i-k);<br>            <span class="hljs-type">int</span> temp;<br>            temp = (<span class="hljs-type">int</span>) x;<br>            <span class="hljs-keyword">if</span>(x==temp)<br>            &#123;<br>                kase++;<br>                a[j]=x;<br>                b[j]=i;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,kase);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;j;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 / %d = 1 / %d +1 / %d\n&quot;</span>,k,a[i],b[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
