<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>机器学习之旅</title>
    <link href="/2022/03/28/MachineLearning/"/>
    <url>/2022/03/28/MachineLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习之旅"><a href="#机器学习之旅" class="headerlink" title="机器学习之旅"></a>机器学习之旅</h1><blockquote><p>考研有机会能上岸，因此下决心开始学习机器学习。</p><p>学习视频：<a href="https://www.bilibili.com/video/BV17J411C7zZ?p=1">一起啃书机器学习西瓜书白话解读</a></p><p>学习教材：西瓜书</p><p>学习代码：<a href="https://github.com/yui73/pumpkin-book">西瓜书代码</a></p></blockquote><h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0 准备工作"></a>0 准备工作</h2><h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1 绪论"></a>1 绪论</h2><h3 id="1-1-数据相关术语"><a href="#1-1-数据相关术语" class="headerlink" title="1.1 数据相关术语"></a>1.1 数据相关术语</h3><ul><li>数据集</li><li>样本</li><li>特征向量</li><li>属性</li></ul><h3 id="1-2-模型"><a href="#1-2-模型" class="headerlink" title="1.2 模型"></a>1.2 模型</h3><ul><li>有监督学习<ul><li>分类（二分类 - Y正负 / 多分类 - Y大于2）</li><li>回归（Y = R实数集）</li></ul></li><li>无监督学习<ul><li>聚类（我们不知道几类，机器自己分）</li></ul></li></ul><h3 id="1-3-预测"><a href="#1-3-预测" class="headerlink" title="1.3 预测"></a>1.3 预测</h3><ul><li>测试</li><li>测试样本</li><li><strong>泛化能力</strong></li></ul><h3 id="1-4-假设空间"><a href="#1-4-假设空间" class="headerlink" title="1.4 假设空间"></a>1.4 假设空间</h3><p>科学的推理手段</p><ul><li>归纳（特殊到一般）<ul><li>狭义（从数据集中得到概念-抽象）</li><li>广义（从样本中学习）</li></ul></li><li>演绎（一般到特殊）</li></ul><h3 id="1-5-归纳偏好"><a href="#1-5-归纳偏好" class="headerlink" title="1.5 归纳偏好"></a>1.5 归纳偏好</h3><p>对同一个数据集训练了不同的模型，如何选择模型。<strong>根据“奥卡姆剃刀”。</strong></p><h2 id="2-模型评估与选择-—-重要"><a href="#2-模型评估与选择-—-重要" class="headerlink" title="2 模型评估与选择 — 重要"></a>2 模型评估与选择 — 重要</h2><h3 id="2-1-一种训练集一种算法"><a href="#2-1-一种训练集一种算法" class="headerlink" title="2.1 一种训练集一种算法"></a>2.1 一种训练集一种算法</h3><ul><li>经验误差于过拟合<br>错误率：E=a/m<br>精度：1-E<br>误差：|Y-Y’|</li></ul><p>过拟合的定义：把训练样本自身的一些特点当作了所有潜在样本都会具有的一般性质，这样就会导致泛化能力的下降。</p><p>欠拟合的定义：对训练样本的一般性质尚未学好。</p><ul><li>模型评估方法<ul><li><p>泛化能力</p></li><li><p>Trainning Set 训练集</p></li><li><p>Testing Set 测试集的保留方法</p><ol><li><p>留出法<br> 直接将数据集划分为两个互斥集合，其中一个作为训练集S,一个作为测试集T。在S上训练模型，用T测试误差，估计泛化误差。</p></li><li><p>交叉验证法</p><p><strong>业界常用</strong></p><p><img src="/2022/03/28/MachineLearning/1.png" alt="10折交叉验证示意图"></p></li><li><p>自助法 </p></li></ol></li><li><p>Validation Set 验证集</p></li></ul></li></ul><ul><li>性能度量</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactJS 学习</title>
    <link href="/2022/02/22/ReactJSLearning/"/>
    <url>/2022/02/22/ReactJSLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="ReactJS-学习"><a href="#ReactJS-学习" class="headerlink" title="ReactJS 学习"></a>ReactJS 学习</h1><blockquote><p>学习视频：<a href="https://www.bilibili.com/video/BV164411s7RA?p=18">ReactJS入门</a></p></blockquote><h2 id="0-准备阶段"><a href="#0-准备阶段" class="headerlink" title="0 准备阶段"></a>0 准备阶段</h2><h3 id="i-前端开发的四个阶段"><a href="#i-前端开发的四个阶段" class="headerlink" title="i 前端开发的四个阶段"></a>i 前端开发的四个阶段</h3><ul><li>静态阶段<br>后端使用MVC模式，前端静态网页</li><li>Ajax阶段</li><li>前端MVC阶段<br>后来还有人提出了MVVM模式，使用ViewModel代替Controller</li><li>SPA阶段<br>网页前端变为一个应用程序，单网页应用程序称为SPA <code>single-page-application</code>,跑在浏览器里的应用程序。<br>当前的Vue,Angular,React都属于SPA开发框架。</li></ul><h3 id="ii-ReactJS什么"><a href="#ii-ReactJS什么" class="headerlink" title="ii ReactJS什么"></a>ii ReactJS什么</h3><p>React是一个用户构建用户界面的JavaScript框架。</p><ul><li>Flux: Flux补充了React的组合视图组件，它更是一种模式，非框架</li><li>Redux: Redux是JavaScript状态容器，使React组件状态共享变得简单。</li><li>Ant Design of React<br>集成了多种框架，包含了Flux、Redux；提供了丰富组件。</li></ul><blockquote><p>本次学习使用Ant Design of React</p></blockquote><h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1 搭建环境"></a>1 搭建环境</h2><h3 id="1-1-创建项目"><a href="#1-1-创建项目" class="headerlink" title="1.1 创建项目"></a>1.1 创建项目</h3><ul><li>使用UmiJS作为构建工具。<ul><li>在已有node.js和yarn的情况下，使用 <code>yarn global add umi</code>全局安装umi</li><li>使用<code>umi -v</code>确认是否安装成功</li><li>若出现<code>‘umi‘ 不是内部或外部命令，也不是可运行的程序 或批处理文件或者提示 umi: command not found</code>，使用<code>yarn global bin</code>命令，将路径添加到系统环境变量中，重启cmd，再次尝试。</li></ul></li><li>IntelliJ创建web项目的方法：先创建Java空项目，然后再add framework support，选择web application。</li><li>使用命令<code>tyarn init -y</code>进行初始化。生成一个<code>package.json</code>文件</li><li>使用命令<code>tyarn add umi --dev</code>添加Umi脚手架的依赖，增加了一个<code>node_modules</code>的一个文件夹，里面是各种各样的依赖。</li><li>Umi约定的目录结构</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── package<span class="hljs-selector-class">.json</span><br>├── <span class="hljs-selector-class">.umirc</span><span class="hljs-selector-class">.ts</span><br>├── <span class="hljs-selector-class">.env</span><br>├── dist<br>├── mock<br>├── public<br>└── <span class="hljs-attribute">src</span><br>    ├── <span class="hljs-selector-class">.umi</span><br>    ├── layouts/index<span class="hljs-selector-class">.tsx</span><br>    ├── pages<br>        ├── index<span class="hljs-selector-class">.less</span><br>        └── index<span class="hljs-selector-class">.tsx</span><br>    └── app.ts<br></code></pre></td></tr></table></figure><h3 id="1-2-Hello-World"><a href="#1-2-Hello-World" class="headerlink" title="1.2 Hello World!"></a>1.2 Hello World!</h3><ul><li>创建config目录，在该目录下创建config.js文件(Umi的全局配置文件)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//导出一个对象，暂时设置为空对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li>创建pages目录，在pages目录下创建HelloWorld.js文件，输入<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在js文件中写html代码叫做JSX,React自创的</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt;&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br></code></pre></td></tr></table></figure></li><li>使用<code>umi dev</code>命令运行工程</li><li>进入<code>http://localhost:8000/HelloWorld</code><blockquote><p>umi会给pages底下的内容自动添加路由映射</p></blockquote></li></ul><h3 id="1-3-添加React插件"><a href="#1-3-添加React插件" class="headerlink" title="1.3 添加React插件"></a>1.3 添加React插件</h3><ul><li>使用命令<code>tyarn add umi-plugin-react --dev</code>，添加react插件。</li></ul><blockquote><p><code>--dev</code>将安装内容加入package.json的devDependencies</p></blockquote><ul><li>在config.js文件中引入插件（旧版本）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">plugins</span>:[<br>        [<span class="hljs-string">`umi-plugin-react`</span>,&#123;<br>            <span class="hljs-comment">//暂时不启用任何功能</span><br>        &#125;]<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>此处有问题，现在umi版本已经大于3，因此安装的React插件版本应该为<code>&quot;@umijs/preset-react&quot;: &quot;^1&quot;</code>,config.js应该如下，才可以成功使用<code>umi build</code>命令。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">dva</span>: &#123;&#125;,<br>  <span class="hljs-attr">antd</span>: &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2 快速入门"></a>2 快速入门</h2><h3 id="2-1-JSX语法"><a href="#2-1-JSX语法" class="headerlink" title="2.1 JSX语法"></a>2.1 JSX语法</h3><p>JSX就是在js文件中插入html代码片段，会被<code>Babel</code>等转码工具转码，得到正常的js文件后在执行。<br>JSX语法注意点：</p><ul><li>所有html的标签必须闭合</li><li>只能有一个根标签，不能有多个</li><li>在html中插入通过<code>&#123;&#125;</code>插入js脚本</li></ul><h3 id="2-2-组件"><a href="#2-2-组件" class="headerlink" title="2.2 组件"></a>2.2 组件</h3><h4 id="2-2-1-定义组件"><a href="#2-2-1-定义组件" class="headerlink" title="2.2.1 定义组件"></a>2.2.1 定义组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-comment">//导入React</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<span class="hljs-comment">//继承Component类</span><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//重写render方法，render方法渲染页面</span><br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HelloWorld!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> HelloWorld;<span class="hljs-comment">//导出HelloWorld类</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-引用组件"><a href="#2-2-2-引用组件" class="headerlink" title="2.2.2 引用组件"></a>2.2.2 引用组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./HelloWorld&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Show;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-组件参数传递方式"><a href="#2-2-3-组件参数传递方式" class="headerlink" title="2.2.3 组件参数传递方式"></a>2.2.3 组件参数传递方式</h4><p><strong>属性</strong><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Show类</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./HelloWorld&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="hljs-comment">//将该对象的props赋值为zhangsan</span><br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Show;<br><br><span class="hljs-comment">//HelloWorld类</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//返回&#123;this.props.name&#125;</span><br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HelloWorld!Component! name = &#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> HelloWorld;<br></code></pre></td></tr></table></figure><br>  效果如下：<br>  HelloWorld类没有属性参数<br>  <img src="/2022/02/22/ReactJSLearning/HelloWorld.png" alt="HelloWorld"></p><p>  Show类有属性参数<br>  <img src="/2022/02/22/ReactJSLearning/Show.png" alt="Show"></p><p><strong>标签包裹</strong><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Show类</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./HelloWorld&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> (<br>          <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span>标签包裹的内容<span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>      );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Show;<br><br><span class="hljs-comment">//HelloWorld类</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HelloWorld!Component! Content=&#123;this.props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> HelloWorld;<br></code></pre></td></tr></table></figure><br>  效果如下：<br>  HelloWorld类没有获取到包裹参数<br>  <img src="/2022/02/22/ReactJSLearning/HelloWorld2.png" alt="HelloWorld2"><br>  Show类有包裹参数<br>  <img src="/2022/02/22/ReactJSLearning/Show2.png" alt="Show2"></p><h4 id="2-2-4-组件状态"><a href="#2-2-4-组件状态" class="headerlink" title="2.2.4 组件状态"></a>2.2.4 组件状态</h4><p>每个组件都有个状态，其保存在this.state中，当状态改变时，React会自动调用Render()方法，重新渲染页面。<br>注意点：</p><ul><li>this.state的值要在构造函数中设置</li><li>要修改state值要在this.setState()方法中设置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            <span class="hljs-attr">datalist</span> : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>            <span class="hljs-attr">MaxNum</span>:<span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">                    &#123;</span><br><span class="xml">                        this.state.datalist.map((value,index) =&gt; &#123;</span><br><span class="xml">                            return <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                        &#125;)</span><br><span class="xml">                    &#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;</span><br><span class="xml">                    let MaxNum=this.state.MaxNum+1;</span><br><span class="xml">                    let newArray=[...this.state.datalist,MaxNum];</span><br><span class="xml">                    this.setState(</span><br><span class="xml">                        &#123;</span><br><span class="xml">                            datalist : newArray,</span><br><span class="xml">                            MaxNum:MaxNum,</span><br><span class="xml">                        &#125;</span><br><span class="xml">                    )</span><br><span class="xml">                &#125;&#125;&gt;点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> List;<br><br></code></pre></td></tr></table></figure>一些解释</li><li>构造函数必须要有<code>props</code>参数</li><li>map函数：返回一个数组 / 不检测空数组 / 不检测原始数组</li><li>箭头函数<code>()=&gt;&#123;...&#125;</code>：无构造函数/this/arguments/super/new</li><li>super函数：调用父类/父对象的…<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">super</span><span class="hljs-params">([arguments])</span></span>:调用父类/父对象的构造函数<br>super<span class="hljs-selector-class">.functionOnParent</span>(<span class="hljs-selector-attr">[arguments]</span>):调用父类/父对象的方法<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-ReactJS-Model层"><a href="#2-3-ReactJS-Model层" class="headerlink" title="2.3 ReactJS-Model层"></a>2.3 ReactJS-Model层</h3><blockquote><p>与数据相关</p></blockquote><h4 id="2-3-1-一些概念"><a href="#2-3-1-一些概念" class="headerlink" title="2.3.1 一些概念"></a>2.3.1 一些概念</h4><p><strong>前端</strong></p><ul><li>Page层：与用户打交道，渲染页面</li><li>Model层：完成业务逻辑，给Page做数据</li><li>Service层：与HTTP接口对接，进行纯粹的数据读写，不会对数据进行处理</li></ul><p><strong>后端</strong></p><ul><li>Controller层</li><li>Service层</li><li>Data Access层</li></ul><h4 id="2-3-2-使用DVA框架对数据进行分层管理"><a href="#2-3-2-使用DVA框架对数据进行分层管理" class="headerlink" title="2.3.2 使用DVA框架对数据进行分层管理"></a>2.3.2 使用DVA框架对数据进行分层管理</h4><p><strong>1 一些关于DVA的概念</strong><br>DVA是基于Redux,Redux-saga和React-router的前端框架。<br>官网地址：<a href="https://dvajs.com/">DVA官网</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Front/Interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows命令集合</title>
    <link href="/2022/02/10/WindowCommand/"/>
    <url>/2022/02/10/WindowCommand/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows命令集合"><a href="#Windows命令集合" class="headerlink" title="Windows命令集合"></a>Windows命令集合</h1><blockquote><p>对一些不熟悉的Windows命令做一个汇总</p></blockquote><ul><li>清屏：<code>clear</code></li><li>删除文件夹：<code>rd/s/q 文件路径</code> <code>/s参数为子目录</code> <code>/q参数为无需询问</code></li><li>删除子文件夹：<code>del/s/q 文件路径</code> <code>/s参数为子目录</code> <code>/q参数为无需询问</code></li><li>查看PowerShell的执行策略权限列表：<code>Get-ExecutionPolicy -List</code></li><li>更改PowerShell的执行策略权限（例如改成remotesigned）：<code>set-executionpolicy remotesigned</code></li><li>升级为管理员权限：<code>Start-Process powershell -Verb runAs</code>（不过是会弹出一个由管理员权限的新窗口）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ant Design Pro 学习</title>
    <link href="/2022/02/10/AntDesignProLearning/"/>
    <url>/2022/02/10/AntDesignProLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="Ant-Design-Pro-学习"><a href="#Ant-Design-Pro-学习" class="headerlink" title="Ant Design Pro 学习"></a>Ant Design Pro 学习</h1><blockquote><p>文档：<a href="https://pro.ant.design/zh-CN/docs/overview">Ant Design Pro文档</a></p></blockquote><h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0 准备工作"></a>0 准备工作</h2><h3 id="推荐技术栈"><a href="#推荐技术栈" class="headerlink" title="推荐技术栈"></a>推荐技术栈</h3><ul><li>包管理：tyarn 安装<code>npm install yarn tyarn -g</code><br>文档：<a href="https://www.npmjs.com/package/tyarn">tyarn</a></li><li>Terminal：选择Windows Terminal</li></ul><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><ul><li><p>初始化脚手架</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">#使用yarn</span><br>yarn <span class="hljs-keyword">create</span> umi app<br></code></pre></td></tr></table></figure></li><li><p>遇到的问题<br><img src="/2022/02/10/AntDesignProLearning/yarnError.png" alt="yarnError"></p></li><li><p>解决方案：<a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7">官方解释</a><br><br>因此修改一下powershell的保护机制即可解决。使用<code>set-executionpolicy remotesigned</code>的命令。效果如下：<br><img src="/2022/02/10/AntDesignProLearning/yarnErrorSolution.png" alt="yarnErrorSolution"></p><p>再次安装，效果如下，成功安装：<br><img src="/2022/02/10/AntDesignProLearning/yarnSuccess.png" alt="yarnSuccess"></p></li></ul><h2 id="1-基础结构"><a href="#1-基础结构" class="headerlink" title="1 基础结构"></a>1 基础结构</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">├── config                   <span class="hljs-meta"># umi 配置，包含路由，构建等配置</span><br>├── mock                     <span class="hljs-meta"># 本地模拟数据</span><br>├── <span class="hljs-keyword">public</span><br>│   └── favicon.png          <span class="hljs-meta"># Favicon</span><br>├── src<br>│   ├── assets               <span class="hljs-meta"># 本地静态资源</span><br>│   ├── components           <span class="hljs-meta"># 业务通用组件</span><br>│   ├── e2e                  <span class="hljs-meta"># 集成测试用例</span><br>│   ├── layouts              <span class="hljs-meta"># 通用布局</span><br>│   ├── models               <span class="hljs-meta"># 全局 dva model</span><br>│   ├── pages                <span class="hljs-meta"># 业务页面入口和常用模板</span><br>│   ├── services             <span class="hljs-meta"># 后台接口服务</span><br>│   ├── utils                <span class="hljs-meta"># 工具库</span><br>│   ├── locales              <span class="hljs-meta"># 国际化资源</span><br>│   ├── <span class="hljs-keyword">global</span>.less          <span class="hljs-meta"># 全局样式</span><br>│   └── <span class="hljs-keyword">global</span>.ts            <span class="hljs-meta"># 全局 JS</span><br>├── tests                    <span class="hljs-meta"># 测试工具</span><br>├── README.md<br>└── package.json<br></code></pre></td></tr></table></figure><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><h4 id="页面开发使用图表"><a href="#页面开发使用图表" class="headerlink" title="页面开发使用图表"></a>页面开发使用图表</h4><p>使用Ant Design的图表：<code>yarn add @ant-design/charts</code></p><h3 id="一些报错"><a href="#一些报错" class="headerlink" title="一些报错"></a>一些报错</h3><h4 id="1-网页控制台"><a href="#1-网页控制台" class="headerlink" title="1 网页控制台"></a>1 网页控制台</h4><p><img src="/2022/02/10/AntDesignProLearning/React.png" alt="ReactError"></p><ul><li>解决方案</li></ul><blockquote><p>待更新 &gt; v &lt;</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Front/Interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩游戏时的小发现</title>
    <link href="/2022/02/08/LittleDiscovery_20220208/"/>
    <url>/2022/02/08/LittleDiscovery_20220208/</url>
    
    <content type="html"><![CDATA[<h2 id="小小发现"><a href="#小小发现" class="headerlink" title="小小发现"></a>小小发现</h2><p>某天深夜在一晚上酣畅淋漓的游戏后，在退出Steam时瞟了一眼库，突然发现一个有趣的东西。<br><img src="/2022/02/08/LittleDiscovery_20220208/bobo.png" alt="bobo"><br>当下直觉觉得是ASCII码，于是采用比较熟悉的C++尝试翻译。<br>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//all</span><br>string s;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> j=<span class="hljs-number">7</span>;<br><span class="hljs-comment">//2 to 10</span><br>string s1;<br>queue &lt;<span class="hljs-keyword">int</span>&gt; ansNum;<br><br><span class="hljs-comment">//翻译后压入队列</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">translateToNum</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tempans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> temp=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)<br>    &#123;<br>        tempans = tempans + temp*(s1[k]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>        temp = temp*<span class="hljs-number">2</span>;<br>    &#125;<br>    ansNum.<span class="hljs-built_in">push</span>(tempans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//s为卡片上的字符串</span><br>    s=<span class="hljs-string">&quot;01010011 01101111 01101101 01100101 01110100 01101001 01101101 01100101 01110011 00100000 01001001 00100000 01100110 01100001 01101001 01101100 00100000 01101111 01110010 01100100 01100101 01110010 01110011 00100000 01101111 01101110 00100000 01110000 01110101 01110010 01110000 01101111 01110011 01100101 00100000 01110100 01101111 00100000 01100001 01101110 01101110 01101111 01111001 00100000 01101101 01111001 00100000 01110100 01100101 01100001 01101101 00100001&quot;</span>;<br>    <span class="hljs-keyword">while</span>(s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class="hljs-built_in">translateToNum</span>();<br>            j=<span class="hljs-number">7</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            s1[j]=s[i];<br>            j--;<br>        &#125;<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(!ansNum.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">char</span> tempChar;<br>        <span class="hljs-keyword">int</span> tempInt;<br>        tempInt = ansNum.<span class="hljs-built_in">front</span>();<br>        tempChar =tempInt;<br>        ansNum.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">//cout&lt;&lt;tempInt;</span><br>        cout&lt;&lt;tempChar;<br>    &#125;<br><br>    <span class="hljs-comment">//system(&quot;pause&quot;);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/2022/02/08/LittleDiscovery_20220208/result.png" alt="result.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub用法集合 + Git学习</title>
    <link href="/2021/07/13/GitHubUsage/"/>
    <url>/2021/07/13/GitHubUsage/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-用法集合-Git学习"><a href="#GitHub-用法集合-Git学习" class="headerlink" title="GitHub 用法集合 + Git学习"></a>GitHub 用法集合 + Git学习</h1><blockquote><p>对GitHub一些常规操作做一些记录，关联电脑与GituHub，生成SSH密钥，已经在之前建站中完成了。</p></blockquote><blockquote><p>后续更新了Git的一些概念学习</p></blockquote><h3 id="1-验证是否连接成功"><a href="#1-验证是否连接成功" class="headerlink" title="1 验证是否连接成功"></a>1 验证是否连接成功</h3><p>输入：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>出现<code>Hi yui73! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>表示成功连接。</p><p><code>-T</code> 参数表示：不显示终端，只显示连接成功信息。</p><h3 id="2-上传Code"><a href="#2-上传Code" class="headerlink" title="2 上传Code"></a>2 上传Code</h3><ul><li>cd到目标文件夹内</li><li>输入以下指令</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br>git <span class="hljs-keyword">add</span><br>git commit -m <span class="hljs-string">&quot;Commit 备注&quot;</span><br>git remote <span class="hljs-keyword">add</span> origin git@github.com:... <span class="hljs-comment">//你仓库的SSH地址</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><h3 id="3-GitHub大文件限制"><a href="#3-GitHub大文件限制" class="headerlink" title="3 GitHub大文件限制"></a>3 GitHub大文件限制</h3><h4 id="3-1-报错形式"><a href="#3-1-报错形式" class="headerlink" title="3.1 报错形式"></a>3.1 报错形式</h4><p><img src="/2021/07/13/GitHubUsage/error.png" alt="Error"></p><h4 id="3-2-解决方法-Git-lfs"><a href="#3-2-解决方法-Git-lfs" class="headerlink" title="3.2 解决方法 Git-lfs"></a>3.2 解决方法 Git-lfs</h4><ul><li>去<a href="https://git-lfs.github.com/">官网</a>下载安装Git-lfs</li><li>重启Cygwim</li><li>输入<code>ssh -T git@github.com</code></li><li>cd到目标文件夹</li><li>输入<code>git lfs install</code><br><img src="/2021/07/13/GitHubUsage/lfs-install.PNG" alt="lfs-install"></li><li>Track你的大文件<br><img src="/2021/07/13/GitHubUsage/track.PNG" alt="Track"></li><li>重新<code>add commit push</code></li></ul><h3 id="4-Git理论学习"><a href="#4-Git理论学习" class="headerlink" title="4 Git理论学习"></a>4 Git理论学习</h3><blockquote><p>之前对于Git只是单纯的使用，对其原理并未有足够的了解导致时隔半年再度使用Git时又是一脸懵逼，因此决定重新学习一些原理<br>官方文档:<a href="https://git-scm.com/about">Git</a></p></blockquote><h4 id="4-1-版本控制系统"><a href="#4-1-版本控制系统" class="headerlink" title="4.1 版本控制系统"></a>4.1 版本控制系统</h4><p>版本控制系统分为如下三大类：</p><ul><li>本地版本控制</li><li>集中式版本控制</li><li>分布式版本控制<br>Git属于这种，一个命令行工具；Github为一个使用Git版本管理工具的代码托管云服务网站。</li></ul><h4 id="4-2-Git基础知识"><a href="#4-2-Git基础知识" class="headerlink" title="4.2 Git基础知识"></a>4.2 Git基础知识</h4><p>Git每次保存的的都是文件的完整快照。<br>Git工程的工作区域：</p><ul><li>Workplace（工作目录）</li><li>Index（暂存区域）</li><li>Local repository（本地仓库）</li><li>Remote repository （远程仓库）<br>下图为其工作流程：<br><img src="/2021/07/13/GitHubUsage/Git.png" alt="GitUsage"><br>文件的三种状态：</li><li>已提交</li><li>已修改</li><li>已暂存<h3 id="5-SourceTree使用学习"><a href="#5-SourceTree使用学习" class="headerlink" title="5 SourceTree使用学习"></a>5 SourceTree使用学习</h3></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WPF + MVVM 学习</title>
    <link href="/2021/07/01/WPFLearning/"/>
    <url>/2021/07/01/WPFLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="WPF学习"><a href="#WPF学习" class="headerlink" title="WPF学习"></a>WPF学习</h1><blockquote><p>学习视频：<a href="https://www.bilibili.com/video/BV1ht411e7Fe">刘铁猛</a></p></blockquote><blockquote><p>学习教材：《深入浅出WPF》</p></blockquote><h3 id="0-预备知识"><a href="#0-预备知识" class="headerlink" title="0 预备知识"></a>0 预备知识</h3><ul><li>什么是WPF<br>三层结构：<code>（数据层-&gt;业务逻辑层-&gt;表示层）</code></li><li>什么是XAML<br>是WPF技术中专门用于设计UI的语言。<br>实现了UI与逻辑分离。<br>是一种单纯的声明型语言，无法加入程序逻辑，与逻辑相关的代码统统集中在程序逻辑层<ul><li>“高内聚-低耦合”</li><li>Template功能。</li><li>Atrribute-属性</li></ul></li><li> 将cs文件编译完成过后会生成.dll文件，别的程序员可以直接引用这个.dll文件</li><li>Solution层</li><li>Project层(窗口/控制台应用程序/类库)：编译的结果叫做<br><code>项目集Assembly</code> <ul><li>Properties装着资源文件的描述 </li><li>Resources装着类库：<code>&#123;&#125;</code>是一个命名空间；</li><li>两对<code>.xaml</code>文件：<code>APP.xaml</code>对应应用程序本身，其中<code>StartupUri:MainWindow.xaml</code>表示MainWindow为程序启动时的主窗体。</li></ul></li><li>Canvas可以进行拖拽式界面设计</li></ul><h3 id="Lesson-1"><a href="#Lesson-1" class="headerlink" title="Lesson 1"></a>Lesson 1</h3><h4 id="1-1-解析-xaml和-cs文件"><a href="#1-1-解析-xaml和-cs文件" class="headerlink" title="1.1 解析.xaml和.cs文件"></a>1.1 解析.xaml和.cs文件</h4><ul><li><code>partial</code>关键字：分部类，类可以分开在两个地方写，编译时会进行合并（也就是将<code>.xaml</code>和<code>.cs</code>合并在一个类里）</li></ul><h4 id="1-2-浅析用户界面的树形结构"><a href="#1-2-浅析用户界面的树形结构" class="headerlink" title="1.2 浅析用户界面的树形结构"></a>1.2 浅析用户界面的树形结构</h4><ul><li>Dos用户界面 - 文字用户界面</li><li>GUI - 图形用户界面 - 友好的用户界面</li></ul><p>WPF制作的用户界面是树形结构。Visual C++、Delphi、VB都是平面结构的。</p><h3 id="Lesson-2"><a href="#Lesson-2" class="headerlink" title="Lesson 2"></a>Lesson 2</h3><h5 id="在-xaml中为对象属性赋值"><a href="#在-xaml中为对象属性赋值" class="headerlink" title="在.xaml中为对象属性赋值"></a>在<code>.xaml</code>中为对象属性赋值</h5><p>对象的数据存储方式有：字段+属性；属性在对外暴露的场景里更加安全，当遇到脏数据时，可以使用set方法对脏数据进行过滤。</p><h6 id="方法一：使用Attribute进行赋值"><a href="#方法一：使用Attribute进行赋值" class="headerlink" title="方法一：使用Attribute进行赋值"></a>方法一：使用Attribute进行赋值</h6><p>这种方法为三种之中最简单的，也很方便。<br>缺陷：只能使用简单的字符串赋值，没有办法赋非常复杂的值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Grid</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Path</span> <span class="hljs-attr">Data</span>=<span class="hljs-string">&quot;M 0,0 L 200,100 L 100,200 Z&quot;</span> <span class="hljs-attr">Stroke</span>=<span class="hljs-string">&quot;Black&quot;</span> <span class="hljs-attr">Fill</span>=<span class="hljs-string">&quot;Red&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Grid</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用TypeConverter类进行映射（在MVVM中有自带的）</p><blockquote><p>当前程序集的名空间一般定义为：local</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">xmlns:<span class="hljs-keyword">local</span>=<span class="hljs-string">&quot;clr-namespace:XXX&quot;</span><br></code></pre></td></tr></table></figure><h6 id="方法二：用属性标签赋值"><a href="#方法二：用属性标签赋值" class="headerlink" title="方法二：用属性标签赋值"></a>方法二：用属性标签赋值</h6><blockquote><p>对应对象属性。<br>缺陷：程序变得很繁琐。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;Button /&gt;</span>          <span class="hljs-comment">#空标签</span><br><span class="hljs-section">&lt;Button&gt;</span><span class="hljs-section">&lt;/Button&gt;</span>   <span class="hljs-comment">#标签的内容 与对象的内容区分</span><br></code></pre></td></tr></table></figure><h6 id="方法三：使用标签扩展的方式赋值"><a href="#方法三：使用标签扩展的方式赋值" class="headerlink" title="方法三：使用标签扩展的方式赋值"></a>方法三：使用标签扩展的方式赋值</h6><p>方法如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Text</span>=<span class="hljs-string">&quot;&#123;StaticResource ResourceKey=stringHello&#125;&quot;</span><br><span class="hljs-attr">Text</span>=<span class="hljs-string">&quot;&#123;Binding ElementName=sld, Path=Value&#125;&quot;</span><br><br><span class="hljs-comment"># 标签扩展的属性用`逗号`隔开</span><br></code></pre></td></tr></table></figure><h3 id="Lesson-3"><a href="#Lesson-3" class="headerlink" title="Lesson 3"></a>Lesson 3</h3><h4 id="3-1-事件处理器与代码后置"><a href="#3-1-事件处理器与代码后置" class="headerlink" title="3.1 事件处理器与代码后置"></a>3.1 事件处理器与代码后置</h4><blockquote><p>.NET平台的处理机制为事件</p></blockquote><p>事件五个关键点</p><ul><li>事件拥有者</li><li>事件拥有者 拥有 哪些事件</li><li>事件响应者</li><li>事件响应者 用哪些方法 响应 事件</li><li>其间的事件订阅关系<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Button x:<span class="hljs-attribute">Name</span>=<span class="hljs-string">&quot;Button1&quot;</span> <span class="hljs-attribute">Content</span>=<span class="hljs-string">&quot;Click Me!&quot;</span> <span class="hljs-attribute">Width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attribute">Height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attribute">Click</span>=<span class="hljs-string">&quot;Button_Click&quot;</span> /&gt;<br><span class="hljs-comment"># Click属性为事件处理器 方法的命名一般是Pascal法</span><br></code></pre></td></tr></table></figure><h4 id="3-2-导入程序集和引用其中的名称空间"><a href="#3-2-导入程序集和引用其中的名称空间" class="headerlink" title="3.2 导入程序集和引用其中的名称空间"></a>3.2 导入程序集和引用其中的名称空间</h4><blockquote><p>模块化程序设计 - User Control - 项目组件 </p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;Window xmlns:<span class="hljs-keyword">uc</span>=<span class="hljs-string">&quot;clr-namespace:RPARobot.UserControls&quot;</span>&gt;<br><br>&lt;<span class="hljs-keyword">uc</span>:....&gt;<br><span class="hljs-comment">#要先add Reference 才可以使用</span><br><br></code></pre></td></tr></table></figure><h4 id="3-3-XAML的注释"><a href="#3-3-XAML的注释" class="headerlink" title="3.3 XAML的注释"></a>3.3 XAML的注释</h4>选中需要注释的内容，有个注释按钮。<br>其注释方法与HTML是一样的。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- XXX --&gt;</span><br>#注释之间不可嵌套<br>#快捷键是：crtl+e+c;crtl+e+u;crtl+k+c;crtl+k+u;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Lesson-4"><a href="#Lesson-4" class="headerlink" title="Lesson 4"></a>Lesson 4</h3><h4 id="4-1-x名称空间的由来和作用"><a href="#4-1-x名称空间的由来和作用" class="headerlink" title="4.1 x名称空间的由来和作用"></a>4.1 x名称空间的由来和作用</h4><p>xmlns：xml语言的namespace<br>x名空间专门用于映射：<br><code>http://schemas.microsoft.com/winfx/2006/xaml</code><br>该类专门用于解析并分析<code>.xaml</code>代码的。</p><h4 id="4-2-x名称空间里都有什么"><a href="#4-2-x名称空间里都有什么" class="headerlink" title="4.2 x名称空间里都有什么"></a>4.2 x名称空间里都有什么</h4><p>详情见书。</p><h4 id="4-3-x-Class"><a href="#4-3-x-Class" class="headerlink" title="4.3 x:Class"></a>4.3 x:Class</h4><p>x:Class里的类就是最后要进行合并的类。<br>IntializeComponent();这个方法是由.xaml里生成的。</p><h4 id="4-4-x-ClassModifier"><a href="#4-4-x-ClassModifier" class="headerlink" title="4.4 x:ClassModifier"></a>4.4 x:ClassModifier</h4><blockquote><p>ClassModifier：类修饰符 默认为Public</p></blockquote><h4 id="4-5-x-Name"><a href="#4-5-x-Name" class="headerlink" title="4.5 x:Name"></a>4.5 x:Name</h4><blockquote><p>.xaml见到一个标签会创建一个实例，不是变量</p></blockquote><p>x:name相当于给了一个变量引用这个实例，后台可以直接引用这个变量。</p><p>当一个控件有Name属性时，使用起来x:name等于name。</p><h4 id="4-6-x-FieldModifier"><a href="#4-6-x-FieldModifier" class="headerlink" title="4.6 x:FieldModifier"></a>4.6 x:FieldModifier</h4><blockquote><p>控制类字段的访问级别</p></blockquote><h3 id="Lesson-5"><a href="#Lesson-5" class="headerlink" title="Lesson 5"></a>Lesson 5</h3><blockquote><p>MVVM入门与提高</p></blockquote><h4 id="5-1-基本常识"><a href="#5-1-基本常识" class="headerlink" title="5.1 基本常识"></a>5.1 基本常识</h4><h5 id="5-1-1-开发环境"><a href="#5-1-1-开发环境" class="headerlink" title="5.1.1 开发环境"></a>5.1.1 开发环境</h5><ul><li>Visual Studio</li><li>Microsoft Prism</li><li>Microsoft Blend SDK</li></ul><h5 id="5-1-2-Nuget-Package-Manager-安装"><a href="#5-1-2-Nuget-Package-Manager-安装" class="headerlink" title="5.1.2 Nuget Package Manager 安装"></a>5.1.2 Nuget Package Manager 安装</h5><p>无需安装 Visual Studio 已经集成。</p><h5 id="5-1-3-必备知识的准备"><a href="#5-1-3-必备知识的准备" class="headerlink" title="5.1.3 必备知识的准备"></a>5.1.3 必备知识的准备</h5><ul><li><p>Data Binding</p></li><li><p>Dependency Property</p></li><li><p>Dependency Object</p></li><li><p>了解WPF中的命令</p><blockquote><p>委托式命令</p></blockquote></li><li><p>Lambda表达式</p></li></ul><h5 id="5-1-4-Code-Snippet"><a href="#5-1-4-Code-Snippet" class="headerlink" title="5.1.4 Code Snippet"></a>5.1.4 Code Snippet</h5><blockquote><p>代码模板</p></blockquote><p><strong>使用/创建</strong></p><h4 id="5-2-MVVM设计模式详解"><a href="#5-2-MVVM设计模式详解" class="headerlink" title="5.2 MVVM设计模式详解"></a>5.2 MVVM设计模式详解</h4><blockquote><p>MVVM = Model + View + ViewModel</p></blockquote><p><em>View 和 ViewModel 的解耦</em></p><h5 id="5-2-1-基础概念"><a href="#5-2-1-基础概念" class="headerlink" title="5.2.1 基础概念"></a>5.2.1 基础概念</h5><ul><li>Model： 现实世界中对象的抽象结果</li><li>View = UI</li><li>ViewModel = Model for View</li><li>ViewModel与View的沟通<ul><li>传递数据 – 数据属性</li><li>传递操作 – 命令属性<blockquote><p>模块化技术 依赖注入技术 – 更高阶内容</p></blockquote></li></ul></li></ul><p><em>View做操作 ViewModel响应操作</em></p><p><em>ViewModel是桥梁的作用？</em></p><p><em>MVVM适合去写企业级程序</em></p><h4 id="5-3-案例讲解"><a href="#5-3-案例讲解" class="headerlink" title="5.3 案例讲解"></a>5.3 案例讲解</h4><blockquote><p>预备知识：Binding+Command</p></blockquote><h5 id="5-3-1-小程序"><a href="#5-3-1-小程序" class="headerlink" title="5.3.1 小程序"></a>5.3.1 小程序</h5><blockquote><p><code>crtl+.</code>可以自动添加类库 <br>界面一动；后台就动；如何更新？</p></blockquote><ul><li>重要类库：NotificationObject</li><li>重要类库：DelegateCommand</li><li>View和ViewModel交互</li></ul><h1 id="一些小知识"><a href="#一些小知识" class="headerlink" title="一些小知识"></a>一些小知识</h1><blockquote><p>学习文档：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">C#官方文档</a></p></blockquote><h3 id="0-基础知识"><a href="#0-基础知识" class="headerlink" title="0 基础知识"></a>0 基础知识</h3><h5 id="运算符"><a href="#运算符" class="headerlink" title="??运算符"></a>??运算符</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">??</span>  <span class="hljs-comment">#双问号运算符 </span><br></code></pre></td></tr></table></figure><p>提供了一种快捷方式，可以在处理可空类型和引用类型时表示null值的可能性，这个运算符放在两个操作数之间。<br>第一个操作数必须是一个可空类型或者引用类型，第二个操作数必须与第一个操作数类型相同，或者可以隐式转换为第一个操作数的类型。<br> 1、如果第一个操作数不是null，整个表达式就等于第一个操作数的值；<br>2、如果第一个操作数是null， 整个表达式就等于第二个操作数的值<br>例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C#">int? a = null;<br>int b;<br>b = a ?? 10;<br>a = 3;<br>Console.WriteLine(b); // 10<br></code></pre></td></tr></table></figure><h5 id="gt-运算符"><a href="#gt-运算符" class="headerlink" title="=&gt;运算符"></a>=&gt;运算符</h5><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda表达式</a></p><h1 id="一些文档"><a href="#一些文档" class="headerlink" title="一些文档"></a>一些文档</h1><h3 id="1-WPF文档"><a href="#1-WPF文档" class="headerlink" title="1 WPF文档"></a>1 WPF文档</h3><div class="row">    <embed src="./Prism5forWPF.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
    <tags>
      
      <tag>CSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown用法集合</title>
    <link href="/2021/05/14/MarkdownUsage/"/>
    <url>/2021/05/14/MarkdownUsage/</url>
    
    <content type="html"><![CDATA[<p>1 给字体换颜色</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#191970&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br></code></pre></td></tr></table></figure><p>2 插入希腊字母<br>例：&lambda;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$\lambda$ <br><span class="hljs-regexp">//</span>该方法无法转义成HTML，但仅Markdown是支持的<br><span class="hljs-regexp">//</span>因此推荐直接使用HTML支持的字符如下:<br>&amp;lambda;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/14/MarkdownUsage/Markdown.png" alt="Markdown字符"><br>3 插入上下标<br>H<sub>2</sub>O</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">H<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>O<br></code></pre></td></tr></table></figure><p>H<sup>2</sup></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">H<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理学习记录</title>
    <link href="/2021/05/14/CompilerStudyRecord/"/>
    <url>/2021/05/14/CompilerStudyRecord/</url>
    
    <content type="html"><![CDATA[<h2 id="1-引论"><a href="#1-引论" class="headerlink" title="1 引论"></a>1 引论</h2><blockquote><p>背书.GIF</p></blockquote><h2 id="2-编译基础知识"><a href="#2-编译基础知识" class="headerlink" title="2 编译基础知识"></a>2 编译基础知识</h2><h3 id="2-1-高级语言"><a href="#2-1-高级语言" class="headerlink" title="2.1 高级语言"></a>2.1 高级语言</h3><p>程序语言是一个记号系统。<br><code>语言=语法+语义</code></p><h3 id="2-2-语法"><a href="#2-2-语法" class="headerlink" title="2.2 语法"></a>2.2 语法</h3><blockquote><p>语法：使得字符形成一个形式上正确的程序<br><code>语法=词法规则 + 语法规则</code></p></blockquote><h4 id="2-2-1-单词符号"><a href="#2-2-1-单词符号" class="headerlink" title="2.2.1 单词符号"></a>2.2.1 单词符号</h4><p>单词符号：语言中具有独立意义的基本结构<br><font size="3" color="#6495ED">一般来说有：常数，标识符，基本字，算符，界限符</font></p><p>词法规则：规定字母表哪些字符串是单词符号<br>可以使用<font size="3" color="#6495ED">正规式和有限自动机</font>来描述词法结构和进行词法分析</p><h4 id="2-2-2-语法单位"><a href="#2-2-2-语法单位" class="headerlink" title="2.2.2 语法单位"></a>2.2.2 语法单位</h4><p>语法单位：表达式，子句，语句，函数，过程，程序</p><p>语法规则：规定了如何从单词符号来形成语法单位</p><blockquote><p>语言的<code>词法规则</code>和<code>语法规则</code>定义了程序的形式结构，是判断输入字符是否构成一个形式上正确的程序的依据。</p></blockquote><h3 id="2-3-字母表和符号串"><a href="#2-3-字母表和符号串" class="headerlink" title="2.3 字母表和符号串"></a>2.3 字母表和符号串</h3><h4 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h4><ol><li>字母表：非空有穷集合；用&Sigma;和V表示</li><li>符号：是语言中最基本的不可再分的单位 </li><li>符号串：空串&xi;</li><li>句子：字母表上符合某种规则构成的串</li><li>语言：句子的集合</li></ol><blockquote><p>习惯：a,b,c,…表示符号；&alpha;,&beta;,&upsilon;,…表示符号串；A,B,C,…表示集合。</p></blockquote><h4 id="2-3-2-符号串的集合"><a href="#2-3-2-符号串的集合" class="headerlink" title="2.3.2 符号串的集合"></a>2.3.2 符号串的集合</h4><ol><li>连接（乘积）运算：<font size="3" color="#6495ED">类似笛卡尔积</font>，若A={&alpha;<sub>1</sub>,&alpha;<sub>2</sub>,&alpha;<sub>3</sub>,…},B={&beta;<sub>1</sub>,&beta;<sub>2</sub>,&beta;<sub>3</sub>,…},则AB={&alpha;&beta;|&alpha;&in;A且&beta;&in;B}</li></ol><ul><li>串集自身的乘积称作串集的方幂</li><li>A<sup>0</sup>={&xi;}</li><li>字母表A的n次幂是字母表A上所有长度为n的串集</li><li>乘积有顺序的A={a,b};B={c,e,d},则AB={ac,ad,ae,bc,bd,be} <code>ac</code>的顺序不可调换 <br></li></ul><ol start="2"><li>字母表的闭包 <strong>A<sup>*</sup></strong>= A<sup>0</sup> &bigcup; A<sup>1</sup> &bigcup; A<sup>2</sup> &bigcup; … <br><font size="3" color="#6495ED">即由A上符号组成的所有穿的集合，包括空串&xi;</font><br><br>字母表的正闭包 <strong>A<sup>+</sup></strong>= <strong>A<sup>*</sup></strong> - {&xi;}</li></ol><blockquote><p>字母表上的语言是字母表上正闭包的子集</p></blockquote><h3 id="2-4-文法与语言"><a href="#2-4-文法与语言" class="headerlink" title="2.4 文法与语言"></a>2.4 文法与语言</h3><h4 id="2-4-1-文法的概念"><a href="#2-4-1-文法的概念" class="headerlink" title="2.4.1 文法的概念"></a>2.4.1 文法的概念</h4><blockquote><p>文法是描述语言的语法结构的形式规则</p></blockquote><ol><li>非终结符：出现在规则左部；大写字母或用<code>&lt;&gt;</code>括起来，表示一定语法概念的词；用 V<sub>N</sub>表示</li><li>终结符：语言中不可分割的字符串，是组成句子的基本单位；用V<sub>T</sub>表示。</li><li>开始符号：<font size="3" color="#6495ED">又称识别符号</font>，所定义语法范畴的非终结符</li><li>产生式：形式 A &rightarrow; &alpha;，A产生&alpha;</li><li>推导：事实上，你替换任何一个都可以…<br><font size="3" color="#6495ED">最左（右）推导：<br>每次使用一个规则，以其右部取代符号串最左（右）非终结符<br></font><code>都为规范推导</code></li><li>归约：归约是推导的逆过程，最左（右）归约是最右（左）推导的逆过程<br><code>都为规范归约</code><br><font size="3" color="#6495ED">若某个父亲节点的所有孩子都为叶子节点时才能归约</font></li><li>句型、句子和语言</li></ol><ul><li>句型：</li><li>句子：</li><li>语言：</li></ul><ol start="8"><li>语法扩充：BNF、元语言符号（指路第一章）</li></ol><h4 id="2-4-2-文法与语言的形式定义"><a href="#2-4-2-文法与语言的形式定义" class="headerlink" title="2.4.2 文法与语言的形式定义"></a>2.4.2 文法与语言的形式定义</h4><ol><li>Chomsky的定义：G(V<sub>N</sub>,V<sub>T</sub>,P,S)</li><li>Chomsky的分类：</li></ol><ul><li>0型文法：（短语文法或无限制文法）P中产生式&alpha;&rightarrow;&beta;,&alpha;&in;V<sup>+</sup>并至少含有1个非终结符，&beta;&in;V<sup>*</sup><br><font size="3" color="#6495ED">识别0型文法的自动机为图灵机；产生式限制最少，可枚举，可递归</font></li><li>1型文法：定义看书P25;<br>（上下文有关、长度增加文法）<br><font size="3" color="#6495ED">识别1型文法的自动机为线性界限自动机；理解定义：非终结符替换必须在某个特定的上下文中且不可替换为&xi;，除非是S&rightarrow;&xi;</font></li><li>2型文法：上下文无关<br><font size="3" color="#6495ED">识别1型文法的自动机为下推自动机（PDA）</font><font size="3" color="#DC143C">是判断句子是否正确的标准</font></li><li>3型文法：正规文法，非终结符全在最右边<code>右线性文法</code>or最左边<code>左线性文法</code>or没有） <br><font size="3" color="#6495ED">识别3型文法的自动机为有限状态自动机</font><br><font size="3" color="#DC143C">是判断单词是否正确的标准</font><blockquote><p>上下文无关文法包含了正规文法</p></blockquote></li></ul><ol start="3"><li>文法分类的具象表现</li></ol><ul><li>0型文法　 &alpha;&rightarrow;&beta;</li><li>1型文法 　&alpha;A&beta;&rightarrow;&alpha;&upsilon;&beta;</li><li>2型文法　 A&rightarrow;&alpha;（任意符号串）</li><li>3型文法　 A&rightarrow;B&alpha;|&alpha;<br>　　　　　A&rightarrow;&alpha;B|&alpha;</li></ul><ol start="4"><li>文法化简的步骤</li><li>构造无&xi;产生式的上下文无关文法的条件<font size="3" color="#6495ED"> (&xi;规则)</font></li></ol><ul><li>P中要么不含有&xi;产生式，要么只有S&rightarrow;&xi;</li><li>若S&rightarrow;&xi;，则S不出现在任何产生式的右部</li></ul><h3 id="2-5-语法树与文法的二义性"><a href="#2-5-语法树与文法的二义性" class="headerlink" title="2.5 语法树与文法的二义性"></a>2.5 语法树与文法的二义性</h3><h4 id="2-5-1-语法树"><a href="#2-5-1-语法树" class="headerlink" title="2.5.1 语法树"></a>2.5.1 语法树</h4><ol><li>定义：用来表示语言句子结构的树</li><li>作用：易于判断文法二义性</li></ol><h4 id="2-5-2-语法树的一些概念"><a href="#2-5-2-语法树的一些概念" class="headerlink" title="2.5.2 语法树的一些概念"></a>2.5.2 语法树的一些概念</h4><ol><li>句型：在一棵语法树生长过程中的任何时刻，所有那些叶子节点排列起来就是一个句型</li><li>短语：子树的末端符号自左向右连成串，相对于子树树根而言称为短语<br>简单短语（直接短语）：若短语是某子树根进过一步推导得到的</li><li>句柄：句型中的最左简单短语；句柄是最左归约时要寻找的简单短语 </li></ol><h4 id="2-5-3-文法的二义性"><a href="#2-5-3-文法的二义性" class="headerlink" title="2.5.3 文法的二义性"></a>2.5.3 文法的二义性</h4><ol><li>句子二义性：若一个句子存在对应的两棵或两棵以上的语法树，则句子是二义的</li><li>文法二义性：有句子二义性的文法</li></ol><h2 id="3-词法分析"><a href="#3-词法分析" class="headerlink" title="3 词法分析"></a>3 词法分析</h2><h3 id="3-1-正则表达式（正规式）"><a href="#3-1-正则表达式（正规式）" class="headerlink" title="3.1 正则表达式（正规式）"></a>3.1 正则表达式（正规式）</h3><blockquote><p>用来描述正则语言更紧凑的表示方法</p></blockquote><ol><li><p>定义：正则表达式可以由较小的正则表达式按照特定规则递归地构建。每个正则表达式r定义一个语言L(r)</p></li><li><p>若r,s都是RE<br>r|s是RE, L(r|s)=L(r) &bigcup; L(s)<br>rs是RE, L(rs)=L(r)L(s)<br>r<sup>* </sup>是RE, L(r<sup>* </sup>)=(L(r))<sup>*</sup><br>(r)是RE, L((r))=L(r)</p><blockquote><p>运算优先级：() &rightarrow; * &rightarrow; 连接 &rightarrow; |</p></blockquote></li><li><p>RE的代数定律<br><br><img src="/2021/05/14/CompilerStudyRecord/1.PNG" alt="RE的代数定律"></p><h3 id="3-2-正则定义"><a href="#3-2-正则定义" class="headerlink" title="3.2 正则定义"></a>3.2 正则定义</h3><blockquote><p>给一些RE命名， 并在之后的RE中像使用字母表中的符号一样使用这些名字</p></blockquote></li></ol><h3 id="3-3-有穷自动机-FA"><a href="#3-3-有穷自动机-FA" class="headerlink" title="3.3 有穷自动机(FA)"></a>3.3 有穷自动机(FA)</h3><blockquote><p>经典例子：电梯控制装置</p></blockquote><h4 id="3-3-1-转换图（Transition-Graph）"><a href="#3-3-1-转换图（Transition-Graph）" class="headerlink" title="3.3.1 转换图（Transition Graph）"></a>3.3.1 转换图（Transition Graph）</h4><ul><li>结点：FA的状态<br>初始状态(开始状态)：只有一个，由start箭头指向 <br>终止状态(接收状态)：可以有多个，用<strong>双圈</strong>表示</li><li>带标记的有向边：边上标记为输入</li></ul><h4 id="3-3-2-FA定义-接收-的语言"><a href="#3-3-2-FA定义-接收-的语言" class="headerlink" title="3.3.2 FA定义(接收)的语言"></a>3.3.2 FA定义(接收)的语言<br></h4><p>   输入串能让有穷状态机从初始状态转换到终止状态，该串被接收。<br><br>   所有可接收串构成的集合为FA定义（或接收）的语言，记为L(M)</p><h4 id="3-3-3-有穷自动机的分类"><a href="#3-3-3-有穷自动机的分类" class="headerlink" title="3.3.3 有穷自动机的分类"></a>3.3.3 有穷自动机的分类</h4><ol><li>确定的FA(Deterministic finite automata, DFA)</li></ol><ul><li>定义为五元组 M=(K,&Sigma;,f,S,Z),书P48</li><li>DFA即可以用<strong>转换图</strong>表示，也可以用<strong>转换表</strong>表示</li></ul><ol start="2"><li>非确实的FA(Nondeterministic finite automata, NFA)</li></ol><ul><li>与DFA的唯一区别：沿着标记能到达的状态不唯一</li><li>NFA的边上还能标记&xi;, 带有“&xi;-边”的NFA<blockquote><p> 带有“&xi;-边”的NFA与不带“&xi;-边”的NFA等价<br>DFA与NFA具有等价性<br><br>DFA与RE也等价<br><br>四者相互等价</p></blockquote></li></ul><ol start="3"><li>DFA与NFA比较</li></ol><ul><li>DFA计算机更好实现</li><li>NFA更加直观 </li></ul><ol start="4"><li>DFA的算法实现<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">K=S；<br>c=getchar();<span class="hljs-comment">//当前输入符号</span><br><span class="hljs-keyword">while</span> (c&lt;&gt;eof()) <br>&#123;K=f(K,c);<br>c=getchar();<br>&#125;<br><span class="hljs-keyword">if</span> (K <span class="hljs-keyword">in</span> Z) <span class="hljs-keyword">return</span> (“yes”)<span class="hljs-comment">//遇到文件结束符号</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (“no”)<br></code></pre></td></tr></table></figure><h4 id="3-3-4-从正则表达式到有穷自动机"><a href="#3-3-4-从正则表达式到有穷自动机" class="headerlink" title="3.3.4 从正则表达式到有穷自动机"></a>3.3.4 从正则表达式到有穷自动机</h4></li><li>从RE到NFA</li></ol><ul><li>套用下面</li></ul><ol start="2"><li>从NFA到DFA</li></ol><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#6495ED&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br>&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#DC143C&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CompulsoryCourse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的建站方法记录</title>
    <link href="/2021/05/12/MyBlogBuildWay/"/>
    <url>/2021/05/12/MyBlogBuildWay/</url>
    
    <content type="html"><![CDATA[<h1 id="我的建站方法记录"><a href="#我的建站方法记录" class="headerlink" title="我的建站方法记录"></a>我的建站方法记录</h1><p>环境：Windows10</p><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1 安装git"></a>1 安装git</h2><h3 id="1-1-安装Cygwin"><a href="#1-1-安装Cygwin" class="headerlink" title="1.1 安装Cygwin"></a>1.1 安装Cygwin</h3><blockquote><p>下载地址:<a href="http://www.cygwin.com/">Cygwin官网</a></p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin.PNG" alt="Cygwin-1"></p><blockquote><p>直接安装一路默认</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin2.PNG" alt="Cygwin-2"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin3.PNG" alt="Cygwin-3"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin4.PNG" alt="Cygwin-4"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin5.PNG" alt="Cygwin-5"></p><blockquote><p>这里推荐使用国内的镜像网站（找不到得自己添加）</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin6.PNG" alt="Cygwin-6"></p><blockquote><p>这里是一些必须安装的包</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin7.PNG" alt="Cygwin-7"></p><h3 id="1-2-在Cygwin下使用git的SSH服务"><a href="#1-2-在Cygwin下使用git的SSH服务" class="headerlink" title="1.2 在Cygwin下使用git的SSH服务"></a>1.2 在Cygwin下使用git的SSH服务</h3><h5 id="1-2-1-在Cygwin打开后，默认在-目录，使用如下命令查看实际在Windows中的路径"><a href="#1-2-1-在Cygwin打开后，默认在-目录，使用如下命令查看实际在Windows中的路径" class="headerlink" title="1.2.1 在Cygwin打开后，默认在~目录，使用如下命令查看实际在Windows中的路径"></a>1.2.1 在Cygwin打开后，默认在~目录，使用如下命令查看实际在Windows中的路径</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>cygpath -w ~<span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin8.PNG" alt="Cygwin-8"></p><h5 id="1-2-2-使用ssh-keygen命令生成密钥"><a href="#1-2-2-使用ssh-keygen命令生成密钥" class="headerlink" title="1.2.2 使用ssh-keygen命令生成密钥"></a>1.2.2 使用ssh-keygen命令生成密钥</h5><p>生成的.ssh文件夹在C:\cygwin64\home\ad662下，.ssh文件夹里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，id_rsa.pub是公钥。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@163.com&quot;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-3-设置GitHub-SSH-Keys。"><a href="#1-2-3-设置GitHub-SSH-Keys。" class="headerlink" title="1.2.3 设置GitHub SSH Keys。"></a>1.2.3 设置GitHub SSH Keys。</h5><p>登陆GitHub-&gt;Settings-&gt;“SSH Keys”，然后，点“Add SSH Key”，起个Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”。</p><h5 id="1-2-4-创建Repository"><a href="#1-2-4-创建Repository" class="headerlink" title="1.2.4 创建Repository"></a>1.2.4 创建Repository</h5><p>在github上创建一个仓库<br>注意repository的名字要与github的用户名一致。(如下形式)<br><code>your_user_name.github.io</code><br>其他保持默认即可。</p><h5 id="1-2-5-在本地创建一个同名仓库"><a href="#1-2-5-在本地创建一个同名仓库" class="headerlink" title="1.2.5 在本地创建一个同名仓库"></a>1.2.5 在本地创建一个同名仓库</h5><p>回到Cygwin<br>使用如下命令在~目录下，创建一个名为<code>your_user_name.github.io</code>的仓库，初始化，并上传一两个文件测试能否使用。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">mkdir</span> xxx（仓库名）<br>git init<br>touch README<br>git add README <br>git commit -m &#x27;<span class="hljs-built_in">first</span> commit&#x27;<br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2 安装Node.js"></a>2 安装Node.js</h2><blockquote><p>下载地址：<a href="https://nodejs.org/en/">Node.js官网</a><br>安装一路默认即可。</p></blockquote><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3 安装Hexo"></a>3 安装Hexo</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>打开Cygwin，输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><h3 id="3-2-初始化"><a href="#3-2-初始化" class="headerlink" title="3.2 初始化"></a>3.2 初始化</h3><p>新建一个名为Hexo的文件夹，cd到该文件夹，输入如下命令进行初始化及初始化下载。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo init<br><span class="hljs-variable">$ </span>npm install <span class="hljs-comment">#会在目录中安装 node_modules。</span><br></code></pre></td></tr></table></figure><h3 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3 启动服务"></a>3.3 启动服务</h3><p>输入如下命令，启动服务；启动后，在浏览器中输入<a href="http://localhost:4000/%EF%BC%8C%E5%8F%AF%E8%A7%81%E5%B7%B2%E7%BB%8F%E7%94%9F%E6%88%90%E5%A5%BD%E4%BA%86%E4%B8%80%E7%AF%87%E6%A8%A1%E6%9D%BFblog%E3%80%82">http://localhost:4000/，可见已经生成好了一篇模板blog。</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ hexo <span class="hljs-keyword">server</span><br>[<span class="hljs-keyword">info</span>] Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span>/. Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br></code></pre></td></tr></table></figure><h3 id="3-4-生成静态网页"><a href="#3-4-生成静态网页" class="headerlink" title="3.4 生成静态网页"></a>3.4 生成静态网页</h3><p>输入如下命令，将.md文件转换为.html网页</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h3 id="3-5-部署到Github上"><a href="#3-5-部署到Github上" class="headerlink" title="3.5 部署到Github上"></a>3.5 部署到Github上</h3><h4 id="3-5-1-修改-config-yml文件"><a href="#3-5-1-修改-config-yml文件" class="headerlink" title="3.5.1 修改_config.yml文件"></a>3.5.1 修改_config.yml文件</h4><p>将下面的第一段内容修改成第二段</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: http:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: http:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:yui73/yui73.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><h4 id="3-5-2-测试"><a href="#3-5-2-测试" class="headerlink" title="3.5.2 测试"></a>3.5.2 测试</h4><p>在浏览器中打开(<a href="http://yui73.github.io/">http://yui73.github.io/</a>) ，正常显示网页，表明部署成功。</p><h2 id="4-开始操作"><a href="#4-开始操作" class="headerlink" title="4 开始操作"></a>4 开始操作</h2><h3 id="4-1-部署操作"><a href="#4-1-部署操作" class="headerlink" title="4.1 部署操作"></a>4.1 部署操作</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo new <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章(不用引号)</span><br><span class="hljs-variable">$ </span>hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span><br><span class="hljs-variable">$ </span>hexo generate <span class="hljs-comment">#生成静态页面至public目录</span><br><span class="hljs-variable">$ </span>hexo server <span class="hljs-comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="hljs-variable">$ </span>hexo deploy <span class="hljs-comment">#将.deploy目录部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</span><br></code></pre></td></tr></table></figure><p>每次更新完，都可使用三步走进行部署</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br><span class="hljs-variable">$ </span>hexo s -g<br></code></pre></td></tr></table></figure><p>假设只执行<code>hexo g</code>，不执行<code>hexo s</code>的时候，则会在<code>hexo</code>文件夹下生成public文件夹，当遇到一些bug的时候，直接去看html文件有奇效。</p><h3 id="4-2-更换主题-Way1"><a href="#4-2-更换主题-Way1" class="headerlink" title="4.2 更换主题-Way1"></a>4.2 更换主题-Way1</h3><blockquote><p><a href="https://github.com/hexojs/hexo/wiki/Themes">主题仓库</a></p></blockquote><h5 id="4-2-1-在Cygwin下，cd到D-hexo目录下，clone想要的主题仓库"><a href="#4-2-1-在Cygwin下，cd到D-hexo目录下，clone想要的主题仓库" class="headerlink" title="4.2.1 在Cygwin下，cd到D:/hexo目录下，clone想要的主题仓库"></a>4.2.1 在Cygwin下，cd到D:/hexo目录下，clone想要的主题仓库</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/A-limon/</span>pacman.git themes/pacman<br><span class="hljs-comment">#将链接中的https换成git，能避免一些clone失败的情况</span><br></code></pre></td></tr></table></figure><h5 id="4-2-2-修改你的博客根目录-D-Hexo下的-config-yml配置文件中的theme属性，将其设置为pacman。"><a href="#4-2-2-修改你的博客根目录-D-Hexo下的-config-yml配置文件中的theme属性，将其设置为pacman。" class="headerlink" title="4.2.2 修改你的博客根目录/D/Hexo下的_config.yml配置文件中的theme属性，将其设置为pacman。"></a>4.2.2 修改你的博客根目录/D/Hexo下的_config.yml配置文件中的theme属性，将其设置为pacman。</h5><h5 id="4-2-3-更新主题"><a href="#4-2-3-更新主题" class="headerlink" title="4.2.3 更新主题"></a>4.2.3 更新主题</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> themes/pacman<br><span class="hljs-variable">$</span> git pull<br></code></pre></td></tr></table></figure><h3 id="4-3-更换主题"><a href="#4-3-更换主题" class="headerlink" title="4.3 更换主题"></a>4.3 更换主题</h3><p>有些主题有自己推荐的安装方式，详情见文档。</p><blockquote><p><a href="https://hexo.fluid-dev.com/docs/start/">Fluid</a></p></blockquote><h3 id="4-4-增加Live2D小人"><a href="#4-4-增加Live2D小人" class="headerlink" title="4.4 增加Live2D小人"></a>4.4 增加Live2D小人</h3><blockquote><p>GitHub仓库：<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md#hexo">Hexo-Live2D</a></p></blockquote><h5 id="4-4-1-安装插件"><a href="#4-4-1-安装插件" class="headerlink" title="4.4.1 安装插件"></a>4.4.1 安装插件</h5><p>输入</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--save hexo-helper-live2d</span><br></code></pre></td></tr></table></figure><h5 id="4-4-2-修改配置"><a href="#4-4-2-修改配置" class="headerlink" title="4.4.2 修改配置"></a>4.4.2 修改配置</h5><p>配置_config.yml文件（我一般都配根目录下面那个）</p><h3 id="4-5-插入pdf"><a href="#4-5-插入pdf" class="headerlink" title="4.5 插入pdf"></a>4.5 插入pdf</h3><p>先安装</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install <span class="hljs-comment">--save hexo-pdf</span><br></code></pre></td></tr></table></figure><p>在markdown对应的文件夹中存放你的pdf,输入：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span> pdf ./Pris<span class="hljs-name">m5</span>forWPF.pdf <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-一些问题"><a href="#5-一些问题" class="headerlink" title="5 一些问题"></a>5 一些问题</h2><h3 id="5-1-图片加载不出来"><a href="#5-1-图片加载不出来" class="headerlink" title="5.1 图片加载不出来"></a>5.1 图片加载不出来</h3><h5 id="5-1-1-注意图片是-png还是-PNG，在本地测试无关，在Github上区分大小写。"><a href="#5-1-1-注意图片是-png还是-PNG，在本地测试无关，在Github上区分大小写。" class="headerlink" title="5.1.1 注意图片是.png还是.PNG，在本地测试无关，在Github上区分大小写。"></a>5.1.1 注意图片是<code>.png</code>还是<code>.PNG</code>，在本地测试无关，在Github上区分大小写。</h5><h5 id="5-1-2-直接找html文件看路径是否正确，路径可能不支持中文。"><a href="#5-1-2-直接找html文件看路径是否正确，路径可能不支持中文。" class="headerlink" title="5.1.2 直接找html文件看路径是否正确，路径可能不支持中文。"></a>5.1.2 直接找<code>html</code>文件看路径是否正确，路径可能不支持中文。</h5><h3 id="5-2-hexo-g-时的报错"><a href="#5-2-hexo-g-时的报错" class="headerlink" title="5.2 hexo g 时的报错"></a>5.2 hexo g 时的报错</h3><p>报错内容如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">FATAL &#123;<br>  err: Template render error: (unknown path)<br>    Error: expected end of comment, got end of file<br>      at Object._prettifyError (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\l</span>ib.js:36:11)<br>      at Template.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:538:21)<br>      at Environment.renderString (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:380:17)<br>      at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:236:16<br>      at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>      at Function.Promise.fromNode.Promise.fromCallback (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:209:30)<br>      at Tag.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:235:20)<br>      at Object.onRenderEnd (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\p</span>ost.js:297:22)<br>      at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\r</span>ender.js:79:21<br>      at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>      at Promise._settlePromiseFromHandler (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:547:31)<br>      at Promise._settlePromise (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:604:18)<br>      at Promise._settlePromise0 (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:649:10)<br>      at Promise._settlePromises (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:729:18)<br>      at _drainQueueStep (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:93:12)<br>      at _drainQueue (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:86:9)<br>      at Async._drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:102:5)<br>      at Immediate.Async.drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:15:14)<br>      at processImmediate (internal/timers.js:462:21) &#123;<br>    cause: Template render error: (unknown path)<br>      Error: expected end of comment, got end of file<br>        at Object._prettifyError (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\l</span>ib.js:36:11)<br>        at Template.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:538:21)<br>        at Environment.renderString (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:380:17)<br>        at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:236:16<br>        at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>        at Function.Promise.fromNode.Promise.fromCallback (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:209:30)<br>        at Tag.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:235:20)<br>        at Object.onRenderEnd (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\p</span>ost.js:297:22)<br>        at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\r</span>ender.js:79:21<br>        at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>        at Promise._settlePromiseFromHandler (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:547:31)<br>        at Promise._settlePromise (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:604:18)<br>        at Promise._settlePromise0 (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:649:10)<br>        at Promise._settlePromises (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:729:18)<br>        at _drainQueueStep (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:93:12)<br>        at _drainQueue (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:86:9)<br>        at Async._drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:102:5)<br>        at Immediate.Async.drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:15:14)<br>        at processImmediate (internal/timers.js:462:21),<br>    isOperational: true<br>  &#125;<br>&#125; Something&#x27;s wrong. Maybe you can find the solution here: <span class="hljs-variable">%s https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-variable"></span><br></code></pre></td></tr></table></figure><p>主要报错要看</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">err: <span class="hljs-keyword">Template</span> render error: (<span class="hljs-type">unknown</span> <span class="hljs-keyword">path</span>)<br>   Error: expected <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">comment</span>, got <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> file<br></code></pre></td></tr></table></figure><p>错误原因：Markdown文件中存在不能转义的字符<br>例如：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<span class="hljs-meta">#</span><br><span class="hljs-meta"># <span class="hljs-comment">//#单独出现</span></span><br></code></pre></td></tr></table></figure><h3 id="5-3-希腊字母和数学符号无法在网页显示"><a href="#5-3-希腊字母和数学符号无法在网页显示" class="headerlink" title="5.3 希腊字母和数学符号无法在网页显示"></a>5.3 希腊字母和数学符号无法在网页显示</h3><p>错误原因：使用Markdown语法写的希腊字母在转义成HTML时，无法被HTML识别<br><br><br>解决办法：直接在Markdown里面使用HTML语法的希腊字母和数学符号即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web前端开发学习</title>
    <link href="/2021/04/25/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/25/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>仅用于自己学习时知识点的整理<br>学习视频：<a href="https://www.bilibili.com/video/BV1QW411N762?p=11">鱼C-小甲鱼</a></p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p>q元素<br>用于定义比较短的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>q元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>孔子有云：<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>学而不思则罔，思而不学则殆<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>blockquote元素<br>通过缩进的形式区分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blockquote元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>未被引用段<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>被引用段<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>cite元素<br>用于定义作品的标题，默认为斜体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>CITE元素<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>abbr元素<br>用于定义缩写，与全局属性title配合使用可展示完整含义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>abbr元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abbreviate&quot;</span>&gt;</span>abbr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>dfn元素<br>用于定义术语（试了一下，默认也是斜体）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>abbr元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abbreviate&quot;</span>&gt;</span>abbr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>address元素<br>用于定义联系信息的元素，默认斜体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>address元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度网址<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>ruby、rt、rp元素<br>rt：用于标记注音符号<br>rp：当浏览器不支持ruby替代的显示内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ruby元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>我<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>wǒ<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>爱<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ài<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>上<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>shàng<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>海<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>hǎi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>bdo元素<br>具有dir属性，有两个值：<br><code>lfr</code>(left to right)：为默认的<br><code>rtl</code>(right to left)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>bdo元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bdo</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;rtl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>从右往左<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>我<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>wǒ<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>爱<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ài<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>上<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>shàng<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>海<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>hǎi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bdo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="样式格式"><a href="#样式格式" class="headerlink" title="样式格式"></a>样式格式</h2></li><li><p>粗体<br>strong元素：粗体+表示重要的含义<br>b元素：仅表示粗体</p></li><li><p>斜体<br>em元素：斜体+表示强调的含义<br>i元素：仅表示斜体</p></li></ul><p><strong>也使用css样式表来代替实现b和i元素</strong></p><ul><li>del元素<br><del>删除内容</del><br>含义正确，只是做一个更新</li><li>ins元素<br>改为下划线</li><li>s元素<br><del>删除内容</del><br>含义不正确</li><li>u元素<br>下划线，含义为拼写错误的单词或者汉语的专有名词。</li><li>mark元素<br>标记文本的作用，默认黄色<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>mark元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>标记1<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>标记2<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>sup元素<br>表示上标</li><li>sub元素<br>表示下标</li><li>small元素<br>把文本变小</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>无序列表(Unordered List)<br><code>ul</code>来定义列表<br><code>li</code>来包裹列表项<br>左边默认为 ：</li></ul><p><strong>·</strong> 这样的样式<br><strong>·</strong> 这样的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Unordered List<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>有序列表(Ordered List)<br><code>ol</code>来定义列表<br><code>li</code>来包裹列表项<br>左边默认为 ：</li></ul><p><strong>1.</strong> 这样的样式<br><strong>2.</strong> 这样的样式</p><ul><li>表格<br><code>tr</code>来定义表格</li></ul><p><em>HTML5之后的表格边框样式都要使用CSS来实现：</em><br><code>border</code>属性<br><code>border-collapse</code>属性-用于合并边框线</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li>一个简单的表单<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>一个简单的表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;welcome.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>名字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>br&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><code>text</code>：明文<br><code>method</code>：post(将参数整合到url中)/post<br><code>bottom</code>：submmit/bottom/reset；可以覆盖表单的一些属性（formmethod）<br><code>autocomplete</code>：浏览器是否帮你自动填充<br><code>value</code>：设置默认值<br><code>autofocus</code>：会自动聚焦到某个input框<br><code>disable</code>：禁用元素，FormData不提交这个数据了<br><code>readonly</code>：不允许修改默认值，FormData依然提交这个数据</li></ul><hr><p><code>fieldset</code>：分组元素 -&gt; <code>legend</code>：fieldset子元素，用于设计分组的title<br><code>select</code>&amp;<code>option</code>：用于实现下拉框<br><code>optgroup</code>：对下拉框进行分组</p>]]></content>
    
    
    
    <tags>
      
      <tag>Front/Interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合计数</title>
    <link href="/2020/01/09/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    <url>/2020/01/09/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="组合计数-专题"><a href="#组合计数-专题" class="headerlink" title="组合计数-专题"></a>组合计数-专题</h1><hr><h2 id="·-模运算"><a href="#·-模运算" class="headerlink" title="· 模运算"></a>· 模运算</h2><p><strong>性质</strong>：</p><ol><li>(a + b)%p=(a%p + b%p)%p</li><li>(a * b)%p=((a%p)*(b%p))%p<br>【性质不适用于==除法==】</li></ol><p>   <strong>除法处理方式</strong>：<br>   <strong>公式</strong>：(b/a)%p=(b*a^(p-2)^)%p</p><h3 id="例题（A-B-HDU-1576）"><a href="#例题（A-B-HDU-1576）" class="headerlink" title="例题（A/B-HDU-1576）"></a>例题（A/B-HDU-1576）</h3><p> <strong>题目</strong>：<br>要求(A/B)%9973，但由于A很大，我们只给出n(n=A%9973)(我们给定的A必能被B整除，且gcd(B,9973) = 1)。  </p><p><strong>样例输入</strong>：<br>2<br>1000 53<br>87 123456789</p><p><strong>样例输出</strong>：<br>7922<br>6060</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> mod)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> b1=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9971</span>;i++)<br>    &#123;<br>        b1=(b1*b)%mod;<br>    &#125;<br>    ans=(n*b1)%<span class="hljs-number">9973</span>;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,b;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">int</span> ans;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n&gt;&gt;b;<br>        ans=<span class="hljs-built_in">mod</span>(n,b,<span class="hljs-number">9973</span>);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>o(´^｀)o ~ 此处有待更新</p><hr><h2 id="·组合数求法"><a href="#·组合数求法" class="headerlink" title="·组合数求法"></a>·组合数求法</h2><ol><li>杨辉三角：C(n,m) = C(n-1,m) +C(n-1,m-1)</li><li>公式：C(n,m)=n! / m! / (n-m)!<br>【大约 20！就到达了10^18^】</li></ol><p><strong>思考</strong>：<br>通常题目中的数据不会小于20，该如何避免强行计算阶乘 。</p><h3 id="例题（Divisors-POJ-2992）"><a href="#例题（Divisors-POJ-2992）" class="headerlink" title="例题（Divisors-POJ-2992）"></a>例题（Divisors-POJ-2992）</h3><p><strong>题目</strong>：<br>Your task in this problem is to determine the number of divisors of C(n,k). Just for fun – or do you need any special reason for such a useful computation?</p><p><strong>Input</strong>：<br>The input consists of several instances. Each instance consists of a single line containing two integers n and k (0 ≤ k ≤ n ≤ 431), separated by a single space.</p><p><strong>Output</strong>：<br>For each instance, output a line containing exactly one integer – the number of distinct divisors of C(n,k). For the input instances, this number does not exceed 2^63^ - 1.</p><p><strong>样例输入</strong>：<br>5 1<br>6 3<br>10 4</p><p><strong>样例输出</strong>：<br>2<br>6<br>16</p><p><strong>思考</strong>：</p><ol><li>避开计算C(n,k)</li><li>打表素数</li><li>整数 n 的拆分: n=p<del>1</del>^a1^ p<del>2</del>^a2^ p<del>3</del>^a3^… p<del>m</del>^am^</li><li>计算指数：a<del>1</del> = n / p<del>1</del> + n / p<del>1</del>^2^ + n / p<del>1</del>^3^+… </li><li>n! 的因子个数：(a<del>1</del>+1) * (a<del>2</del>+1)  * … * (a<del>m</del>+1)</li><li>C(n,k)=n! / k! / (n-k)! 的因子数：<br>[(a<del>1n</del>-a<del>1k</del>-a<del>1(n-k)</del>)+1] * [(a<del>2n</del>-a<del>2k</del>-a<del>2(n-k)</del>)+1]  * … * [(a<del>mn</del>-a<del>mk</del>-a<del>m(n-k)</del>)+1]</li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> primenums[<span class="hljs-number">450</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//打表</span><br>    <span class="hljs-keyword">int</span> cot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">450</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||i==<span class="hljs-number">2</span>)<br>        &#123;<br>            primenums[cot]=i;<br>            cot++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-built_in">sqrt</span>(i);j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)<br>                &#123;<br>                    flag=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>            &#123;<br>                primenums[cot]=i;<br>                cot++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">coot2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//计算指数个数</span><br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        ans=ans+n/p;<br>        n=n/p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">coot1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//计算约数个数</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(primenums[i]&lt;=n)<br>    &#123;<br>        ans=ans*(<span class="hljs-built_in">coot2</span>(n,primenums[i])-<span class="hljs-built_in">coot2</span>(k,primenums[i])-<span class="hljs-built_in">coot2</span>(n-k,primenums[i])+<span class="hljs-number">1</span>);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,k;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans;<br>    <span class="hljs-built_in">prime</span>();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k)==<span class="hljs-number">2</span>)<br>    &#123;<br><br>        ans=<span class="hljs-built_in">coot1</span>(n,k);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举排列</title>
    <link href="/2020/01/07/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97%E6%B3%95/"/>
    <url>/2020/01/07/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举排列"><a href="#枚举排列" class="headerlink" title="枚举排列"></a>枚举排列</h1><p><strong>题目</strong>：输入正整数 n ，按照字典序从小到大的顺序的前 n 个数的所有排列。</p><p><strong>提示</strong>：两个序列字典序关系大小关系等价于从头开始第一个不相同位置大小关系。（即： {1,3,2} &lt; {2,1,3} ）</p><hr><h2 id="·-生成-1-n-的排列"><a href="#·-生成-1-n-的排列" class="headerlink" title="· 生成 1 ~ n 的排列"></a>· 生成 1 ~ n 的排列</h2><p><strong>思考</strong>：<br>以 1 开头的排列开始讨论：第一位是 1，后面 2~9 按照字典序排序，2 ~ 9 的排列又符合 ：以 2 开头的排列。<br>(出现了！是你！递归！)</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_permutation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(cur==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,A[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;cur;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(A[j]==i)<br>                    flag=<span class="hljs-number">0</span>;<br>            &#125;        <br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                A[cur]=i;<br>                <span class="hljs-built_in">print_permutation</span>(n,A,cur+<span class="hljs-number">1</span>);<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> A[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">print_permutation</span>(n,A,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二级指针</title>
    <link href="/2019/11/28/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/"/>
    <url>/2019/11/28/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><p><strong>笔记</strong>：</p><ol><li>**p 指向值</li><li>*p 指向1级指针地址</li><li>p 二级指针地址</li></ol><p><strong>代码测试</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **i,<span class="hljs-keyword">int</span> **j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Before:%d %d\n&quot;</span>,*i,*j);<br>    <span class="hljs-keyword">int</span> *t;<br>    t=*i;<br>    *i=*j;<br>    *j=t;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After:%d %d\n&quot;</span>,*i,*j);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">4</span>,b=<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">int</span> *p1=&amp;a,*p2=&amp;b;<br>    <span class="hljs-keyword">int</span> **p3=&amp;p1,**p4=&amp;p2;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BeforeSwap:%d %d\n&quot;</span>,p1,p2);<br>    <span class="hljs-built_in">Swap</span>(p3,p4);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AfterSwap:%d %d\n&quot;</span>,p1,p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,*p1,*p2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CPlusPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暴力求解法</title>
    <link href="/2019/11/27/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3%E6%B3%95/"/>
    <url>/2019/11/27/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="暴力求解法"><a href="#暴力求解法" class="headerlink" title="暴力求解法"></a>暴力求解法</h1><h2 id="2019-11-26"><a href="#2019-11-26" class="headerlink" title="2019/11/26"></a>2019/11/26</h2><p>第一次通过写博客来记录自己的学习进程。<br>在之前的学习过程中，<br>深刻认识到我应该与自己的键盘多多培养感情。</p><p>于是，放下我的纸笔，开始写这第一篇博客。</p><h3 id="除法（Division，UVa-725）"><a href="#除法（Division，UVa-725）" class="headerlink" title="除法（Division，UVa 725）"></a>除法（Division，UVa 725）</h3><p><strong>题目</strong>：<br>输入整数n，按从小到大的顺序输出所有形如 <strong>abcde/ fghij = n</strong>  的表达式，其中 a ~ j 恰好为数字 0 ~ 9 的一个排列（可以有前导0），2&lt;= n &lt;= 79  。</p><p><strong>样例输入</strong>：<br>62</p><p><strong>样例输出</strong>：<br>79546 / 01283 = 62<br>94736 / 01528 = 62</p><p><strong>骚操作</strong>：</p><ol><li>使用 <strong>sprintf</strong>函数快速将两个int型数据转换成字符串并且进行拼接</li><li>按照题意，满足条件的必须是 0 ~ 9 的一个排列，因此，先进行排序，再进行判断，会更加迅速且准确。<br>（判断条件：**’0’+i**）</li><li>利用 bool 型 flag 对其是否满足条件进行标记<br>（应该属于基操）</li></ol><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">char</span> s[<span class="hljs-number">99</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> fghij=<span class="hljs-number">1234</span>;;fghij++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> abcde=fghij*n;<br>            <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%05d%05d&quot;</span>,abcde,fghij);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(s)&gt;<span class="hljs-number">10</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-built_in">sort</span>(s,s+<span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">bool</span> flag=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i]!=<span class="hljs-string">&#x27;0&#x27;</span>+i) flag=<span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                cnt++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d / %05d = %d\n&quot;</span>,abcde,fghij,n);<br>            &#125;<br>           <br>        &#125;<br>         <span class="hljs-keyword">if</span>(!cnt)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There is no solutions!&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最大乘积（Maximum-Product-UVa-11059）"><a href="#最大乘积（Maximum-Product-UVa-11059）" class="headerlink" title="最大乘积（Maximum Product,UVa 11059）"></a>最大乘积（Maximum Product,UVa 11059）</h3><p><strong>题目</strong>：<br>输入n个元素组成的序列S，你需要找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，应输出0（表示无解）<br>1 &lt;= n &lt;= 18, -10 &lt;= Si &lt;= 10。</p><p><strong>样例输入</strong>：<br>3<br>2 4 -3<br>5<br>2 5 -1 2 -1</p><p><strong>样例输出</strong>：<br>8<br>20</p><p><strong>骚操作</strong>：</p><ol><li>数据范围：1 &lt;= n &lt;= 18, -10 &lt;= Si &lt;= 10<br>刚好最大可能乘积不超过10^18，使用 long long 存储。</li><li>从头到尾枚举，max判断大小。</li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">19</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans=<span class="hljs-number">1</span>,temp=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;s[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>         temp=temp*s[i];<br>         ans=<span class="hljs-built_in">max</span>(ans,temp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分数拆分（Fractions-Again，UVa-10976）"><a href="#分数拆分（Fractions-Again，UVa-10976）" class="headerlink" title="分数拆分（Fractions Again，UVa 10976）"></a>分数拆分（Fractions Again，UVa 10976）</h3><p><strong>题目</strong>：<br>输入正整数k,找到所有的正整数x&gt;=y,使得 1 / k = 1 / x + 1 / y </p><p><strong>样例输入</strong>：<br>2<br>12</p><p><strong>样例输出</strong>：<br> 2<br>1 / 2 = 1 / 6 +1 / 3<br>1 / 2 = 1 / 4 +1 / 4<br>8<br>1 / 12 = 1 / 156 +1 / 13<br>1 / 12 = 1 / 84 +1 / 14<br>1 / 12 = 1 / 60 +1 / 15<br>1 / 12 = 1 / 48 +1 / 16<br>1 / 12 = 1 / 36 +1 / 18<br>1 / 12 = 1 / 30 +1 / 20<br>1 / 12 = 1 / 28 +1 / 21<br>1 / 12 = 1 / 24 +1 / 24</p><p><strong>骚操作</strong>：</p><ol><li>由于 x &gt;= y ,有 1 / x &lt;= 1 / y ,因此 1 / k - 1 / y &lt;= 1 / y<br>即 y &lt;= 2k (暴力枚举)  </li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k)==<span class="hljs-number">1</span> &amp;&amp; k)<br>    &#123;<br>        <span class="hljs-keyword">int</span> kase=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">float</span> x=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>],b[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">float</span> i=k+<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*k;i++)<br>        &#123;<br>            x=(i*k)/(i-k);<br>            <span class="hljs-keyword">int</span> temp;<br>            temp = (<span class="hljs-keyword">int</span>) x;<br>            <span class="hljs-keyword">if</span>(x==temp)<br>            &#123;<br>                kase++;<br>                a[j]=x;<br>                b[j]=i;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,kase);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;j;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 / %d = 1 / %d +1 / %d\n&quot;</span>,k,a[i],b[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
