<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown用法集合</title>
    <link href="/2021/05/14/MarkdownUsage/"/>
    <url>/2021/05/14/MarkdownUsage/</url>
    
    <content type="html"><![CDATA[<p>1 给字体换颜色</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#191970&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br></code></pre></td></tr></table></figure><p>2 插入希腊字母<br>例：&lambda;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$\lambda$ <br><span class="hljs-regexp">//</span>该方法无法转义成HTML，但仅Markdown是支持的<br><span class="hljs-regexp">//</span>因此推荐直接使用HTML支持的字符如下:<br>&amp;lambda;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/14/MarkdownUsage/Markdown.png" alt="Markdown字符"><br>3 插入上下标<br>H<sub>2</sub>O</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">H<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>O<br></code></pre></td></tr></table></figure><p>H<sup>2</sup></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">H<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>编译原理学习记录</title>
    <link href="/2021/05/14/CompilerStudyRecord/"/>
    <url>/2021/05/14/CompilerStudyRecord/</url>
    
    <content type="html"><![CDATA[<h2 id="1-引论"><a href="#1-引论" class="headerlink" title="1 引论"></a>1 引论</h2><blockquote><p>背书.GIF</p></blockquote><h2 id="2-编译基础知识"><a href="#2-编译基础知识" class="headerlink" title="2 编译基础知识"></a>2 编译基础知识</h2><h3 id="2-1-高级语言"><a href="#2-1-高级语言" class="headerlink" title="2.1 高级语言"></a>2.1 高级语言</h3><p>程序语言是一个记号系统。<br><code>语言=语法+语义</code></p><h3 id="2-2-语法"><a href="#2-2-语法" class="headerlink" title="2.2 语法"></a>2.2 语法</h3><blockquote><p>语法：使得字符形成一个形式上正确的程序<br><code>语法=词法规则 + 语法规则</code></p></blockquote><h4 id="2-2-1-单词符号"><a href="#2-2-1-单词符号" class="headerlink" title="2.2.1 单词符号"></a>2.2.1 单词符号</h4><p>单词符号：语言中具有独立意义的基本结构<br><font size="3" color="#6495ED">一般来说有：常数，标识符，基本字，算符，界限符</font></p><p>词法规则：规定字母表哪些字符串是单词符号<br>可以使用<font size="3" color="#6495ED">正规式和有限自动机</font>来描述词法结构和进行词法分析</p><h4 id="2-2-2-语法单位"><a href="#2-2-2-语法单位" class="headerlink" title="2.2.2 语法单位"></a>2.2.2 语法单位</h4><p>语法单位：表达式，子句，语句，函数，过程，程序</p><p>语法规则：规定了如何从单词符号来形成语法单位</p><blockquote><p>语言的<code>词法规则</code>和<code>语法规则</code>定义了程序的形式结构，是判断输入字符是否构成一个形式上正确的程序的依据。</p></blockquote><h3 id="2-3-字母表和符号串"><a href="#2-3-字母表和符号串" class="headerlink" title="2.3 字母表和符号串"></a>2.3 字母表和符号串</h3><h4 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h4><ol><li>字母表：非空有穷集合；用&Sigma;和V表示</li><li>符号：是语言中最基本的不可再分的单位 </li><li>符号串：空串&xi;</li><li>句子：字母表上符合某种规则构成的串</li><li>语言：句子的集合</li></ol><blockquote><p>习惯：a,b,c,…表示符号；&alpha;,&beta;,&upsilon;,…表示符号串；A,B,C,…表示集合。</p></blockquote><h4 id="2-3-2-符号串的集合"><a href="#2-3-2-符号串的集合" class="headerlink" title="2.3.2 符号串的集合"></a>2.3.2 符号串的集合</h4><ol><li>连接（乘积）运算：<font size="3" color="#6495ED">类似笛卡尔积</font>，若A={&alpha;<sub>1</sub>,&alpha;<sub>2</sub>,&alpha;<sub>3</sub>,…},B={&beta;<sub>1</sub>,&beta;<sub>2</sub>,&beta;<sub>3</sub>,…},则AB={&alpha;&beta;|&alpha;&in;A且&beta;&in;B}</li></ol><ul><li>串集自身的乘积称作串集的方幂</li><li>A<sup>0</sup>={&xi;}</li><li>字母表A的n次幂是字母表A上所有长度为n的串集</li><li>乘积有顺序的A={a,b};B={c,e,d},则AB={ac,ad,ae,bc,bd,be} <code>ac</code>的顺序不可调换 <br></li></ul><ol start="2"><li>字母表的闭包 <strong>A<sup>*</sup></strong>= A<sup>0</sup> &bigcup; A<sup>1</sup> &bigcup; A<sup>2</sup> &bigcup; … <br><font size="3" color="#6495ED">即由A上符号组成的所有穿的集合，包括空串&xi;</font><br><br>字母表的正闭包 <strong>A<sup>+</sup></strong>= <strong>A<sup>*</sup></strong> - {&xi;}</li></ol><blockquote><p>字母表上的语言是字母表上正闭包的子集</p></blockquote><h3 id="2-4-文法与语言"><a href="#2-4-文法与语言" class="headerlink" title="2.4 文法与语言"></a>2.4 文法与语言</h3><h4 id="2-4-1-文法的概念"><a href="#2-4-1-文法的概念" class="headerlink" title="2.4.1 文法的概念"></a>2.4.1 文法的概念</h4><blockquote><p>文法是描述语言的语法结构的形式规则</p></blockquote><ol><li>非终结符：出现在规则左部；大写字母或用<code>&lt;&gt;</code>括起来，表示一定语法概念的词；用 V<sub>N</sub>表示</li><li>终结符：语言中不可分割的字符串，是组成句子的基本单位；用V<sub>T</sub>表示。</li><li>开始符号：<font size="3" color="#6495ED">又称识别符号</font>，所定义语法范畴的非终结符</li><li>产生式：形式 A &rightarrow; &alpha;，A产生&alpha;</li><li>推导：事实上，你替换任何一个都可以…<br><font size="3" color="#6495ED">最左（右）推导：<br>每次使用一个规则，以其右部取代符号串最左（右）非终结符<br></font><code>都为规范推导</code></li><li>归约：归约是推导的逆过程，最左（右）归约是最右（左）推导的逆过程<br><code>都为规范归约</code><br><font size="3" color="#6495ED">若某个父亲节点的所有孩子都为叶子节点时才能归约</font></li><li>句型、句子和语言</li></ol><ul><li>句型：</li><li>句子：</li><li>语言：</li></ul><ol start="8"><li>语法扩充：BNF、元语言符号（指路第一章）</li></ol><h4 id="2-4-2-文法与语言的形式定义"><a href="#2-4-2-文法与语言的形式定义" class="headerlink" title="2.4.2 文法与语言的形式定义"></a>2.4.2 文法与语言的形式定义</h4><ol><li>Chomsky的定义：G(V<sub>N</sub>,V<sub>T</sub>,P,S)</li><li>Chomsky的分类：</li></ol><ul><li>0型文法：（短语文法或无限制文法）P中产生式&alpha;&rightarrow;&beta;,&alpha;&in;V<sup>+</sup>并至少含有1个非终结符，&beta;&in;V<sup>*</sup><br><font size="3" color="#6495ED">识别0型文法的自动机为图灵机；产生式限制最少，可枚举，可递归</font></li><li>1型文法：定义看书P25;<br>（上下文有关、长度增加文法）<br><font size="3" color="#6495ED">识别1型文法的自动机为线性界限自动机；理解定义：非终结符替换必须在某个特定的上下文中且不可替换为&xi;，除非是S&rightarrow;&xi;</font></li><li>2型文法：上下文无关<br><font size="3" color="#6495ED">识别1型文法的自动机为下推自动机（PDA）</font><font size="3" color="#DC143C">是判断句子是否正确的标准</font></li><li>3型文法：正规文法，非终结符全在最右边<code>右线性文法</code>or最左边<code>左线性文法</code>or没有） <br><font size="3" color="#6495ED">识别3型文法的自动机为有限状态自动机</font><br><font size="3" color="#DC143C">是判断单词是否正确的标准</font><blockquote><p>上下文无关文法包含了正规文法</p></blockquote></li></ul><ol start="3"><li>文法分类的具象表现</li></ol><ul><li>0型文法　 &alpha;&rightarrow;&beta;</li><li>1型文法 　&alpha;A&beta;&rightarrow;&alpha;&upsilon;&beta;</li><li>2型文法　 A&rightarrow;&alpha;（任意符号串）</li><li>3型文法　 A&rightarrow;B&alpha;|&alpha;<br>　　　　　A&rightarrow;&alpha;B|&alpha;</li></ul><ol start="4"><li>文法化简的步骤</li><li>构造无&xi;产生式的上下文无关文法的条件<font size="3" color="#6495ED"> (&xi;规则)</font></li></ol><ul><li>P中要么不含有&xi;产生式，要么只有S&rightarrow;&xi;</li><li>若S&rightarrow;&xi;，则S不出现在任何产生式的右部</li></ul><h3 id="2-5-语法树与文法的二义性"><a href="#2-5-语法树与文法的二义性" class="headerlink" title="2.5 语法树与文法的二义性"></a>2.5 语法树与文法的二义性</h3><h4 id="2-5-1-语法树"><a href="#2-5-1-语法树" class="headerlink" title="2.5.1 语法树"></a>2.5.1 语法树</h4><ol><li>定义：用来表示语言句子结构的树</li><li>作用：易于判断文法二义性<h4 id="2-5-2-语法树的一些概念"><a href="#2-5-2-语法树的一些概念" class="headerlink" title="2.5.2 语法树的一些概念"></a>2.5.2 语法树的一些概念</h4></li><li>句型：在一棵语法树生长过程中的任何时刻，所有那些叶子节点排列起来就是一个句型</li><li>短语：子树的末端符号自左向右连成串，相对于子树树根而言称为短语<br>简单短语（直接短语）：若短语是某子树根进过一步推导得到的</li><li>句柄：句型中的最左简单短语；句柄是最左归约时要寻找的简单短语 <h4 id="2-5-3-文法的二义性"><a href="#2-5-3-文法的二义性" class="headerlink" title="2.5.3 文法的二义性"></a>2.5.3 文法的二义性</h4></li><li>句子二义性：若一个句子存在对应的两棵或两棵以上的语法树，则句子是二义的</li><li>文法二义性：有句子二义性的文法</li></ol><h2 id="3-词法分析"><a href="#3-词法分析" class="headerlink" title="3 词法分析"></a>3 词法分析</h2><h3 id="3-1-正则表达式（正规式）"><a href="#3-1-正则表达式（正规式）" class="headerlink" title="3.1 正则表达式（正规式）"></a>3.1 正则表达式（正规式）</h3><blockquote><p>用来描述正则语言更紧凑的表示方法</p></blockquote><ol><li><p>定义：正则表达式可以由较小的正则表达式按照特定规则递归地构建。每个正则表达式r定义一个语言L(r)</p></li><li><p>若r,s都是RE<br>r|s是RE, L(r|s)=L(r) &bigcup; L(s)<br>rs是RE, L(rs)=L(r)L(s)<br>r<sup>* </sup>是RE, L(r<sup>* </sup>)=(L(r))<sup>*</sup><br>(r)是RE, L((r))=L(r)</p><blockquote><p>运算优先级：() &rightarrow; * &rightarrow; 连接 &rightarrow; |</p></blockquote></li><li><p>RE的代数定律<br><br><img src="/2021/05/14/CompilerStudyRecord/1.PNG" alt="RE的代数定律"></p><h3 id="3-2-正则定义"><a href="#3-2-正则定义" class="headerlink" title="3.2 正则定义"></a>3.2 正则定义</h3><blockquote><p>给一些RE命名， 并在之后的RE中像使用字母表中的符号一样使用这些名字</p></blockquote></li></ol><h3 id="3-3-有穷自动机-FA"><a href="#3-3-有穷自动机-FA" class="headerlink" title="3.3 有穷自动机(FA)"></a>3.3 有穷自动机(FA)</h3><blockquote><p>经典例子：电梯控制装置</p></blockquote><h4 id="3-3-1-转换图（Transition-Graph）"><a href="#3-3-1-转换图（Transition-Graph）" class="headerlink" title="3.3.1 转换图（Transition Graph）"></a>3.3.1 转换图（Transition Graph）</h4><ul><li>结点：FA的状态<br>初始状态(开始状态)：只有一个，由start箭头指向 <br>终止状态(接收状态)：可以有多个，用<strong>双圈</strong>表示</li><li>带标记的有向边：边上标记为输入</li></ul><h4 id="3-3-2-FA定义-接收-的语言"><a href="#3-3-2-FA定义-接收-的语言" class="headerlink" title="3.3.2 FA定义(接收)的语言"></a>3.3.2 FA定义(接收)的语言<br></h4><p>   输入串能让有穷状态机从初始状态转换到终止状态，该串被接收。<br><br>   所有可接收串构成的集合为FA定义（或接收）的语言，记为L(M)</p><h4 id="3-3-3-有穷自动机的分类"><a href="#3-3-3-有穷自动机的分类" class="headerlink" title="3.3.3 有穷自动机的分类"></a>3.3.3 有穷自动机的分类</h4><ol><li>确定的FA(Deterministic finite automata, DFA)</li></ol><ul><li>定义为五元组 M=(K,&Sigma;,f,S,Z),书P48</li><li>DFA即可以用<strong>转换图</strong>表示，也可以用<strong>转换表</strong>表示</li></ul><ol start="2"><li>非确实的FA(Nondeterministic finite automata, NFA)</li></ol><ul><li>与DFA的唯一区别：沿着标记能到达的状态不唯一</li><li>NFA的边上还能标记&xi;, 带有“&xi;-边”的NFA<blockquote><p> 带有“&xi;-边”的NFA与不带“&xi;-边”的NFA等价<br>DFA与NFA具有等价性<br><br>DFA与RE也等价<br><br>四者相互等价</p></blockquote></li></ul><ol start="3"><li>DFA与NFA比较</li></ol><ul><li>DFA计算机更好实现</li><li>NFA更加直观 </li></ul><ol start="4"><li>DFA的算法实现<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">K=S；<br>c=getchar();<span class="hljs-comment">//当前输入符号</span><br><span class="hljs-keyword">while</span> (c&lt;&gt;eof()) <br>&#123;K=f(K,c);<br>c=getchar();<br>&#125;<br><span class="hljs-keyword">if</span> (K <span class="hljs-keyword">in</span> Z) <span class="hljs-keyword">return</span> (“yes”)<span class="hljs-comment">//遇到文件结束符号</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> (“no”)<br></code></pre></td></tr></table></figure><h4 id="3-3-4-从正则表达式到有穷自动机"><a href="#3-3-4-从正则表达式到有穷自动机" class="headerlink" title="3.3.4 从正则表达式到有穷自动机"></a>3.3.4 从正则表达式到有穷自动机</h4></li><li>从RE到NFA</li></ol><ul><li>套用下面</li></ul><ol start="2"><li>从NFA到DFA</li></ol><blockquote><p>待更新…T ^ T</p></blockquote><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#6495ED&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br>&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#DC143C&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的建站方法记录</title>
    <link href="/2021/05/12/MyBlogBuildWay/"/>
    <url>/2021/05/12/MyBlogBuildWay/</url>
    
    <content type="html"><![CDATA[<h1 id="我的建站方法记录"><a href="#我的建站方法记录" class="headerlink" title="我的建站方法记录"></a>我的建站方法记录</h1><p>环境：Windows10</p><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1 安装git"></a>1 安装git</h2><h3 id="1-1-安装Cygwin"><a href="#1-1-安装Cygwin" class="headerlink" title="1.1 安装Cygwin"></a>1.1 安装Cygwin</h3><blockquote><p>下载地址:<a href="http://www.cygwin.com/">Gygwin官网</a></p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin.PNG" alt="Cygwin-1"></p><blockquote><p>直接安装一路默认</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin2.PNG" alt="Cygwin-2"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin3.PNG" alt="Cygwin-3"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin4.PNG" alt="Cygwin-4"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin5.PNG" alt="Cygwin-5"></p><blockquote><p>这里推荐使用国内的镜像网站（找不到得自己添加）</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin6.PNG" alt="Cygwin-6"></p><blockquote><p>这里是一些必须安装的包</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin7.PNG" alt="Cygwin-7"></p><h3 id="1-2-在Cygwin下使用git的SSH服务"><a href="#1-2-在Cygwin下使用git的SSH服务" class="headerlink" title="1.2 在Cygwin下使用git的SSH服务"></a>1.2 在Cygwin下使用git的SSH服务</h3><h5 id="1-2-1-在Cygwin打开后，默认在-目录，使用如下命令查看实际在Windows中的路径"><a href="#1-2-1-在Cygwin打开后，默认在-目录，使用如下命令查看实际在Windows中的路径" class="headerlink" title="1.2.1 在Cygwin打开后，默认在~目录，使用如下命令查看实际在Windows中的路径"></a>1.2.1 在Cygwin打开后，默认在~目录，使用如下命令查看实际在Windows中的路径</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>cygpath -w ~<span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin8.PNG" alt="Cygwin-8"></p><h5 id="1-2-2-使用ssh-keygen命令生成密钥"><a href="#1-2-2-使用ssh-keygen命令生成密钥" class="headerlink" title="1.2.2 使用ssh-keygen命令生成密钥"></a>1.2.2 使用ssh-keygen命令生成密钥</h5><p>生成的.ssh文件夹在C:\cygwin64\home\ad662下，.ssh文件夹里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，id_rsa.pub是公钥。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@163.com&quot;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-3-设置GitHub-SSH-Keys。"><a href="#1-2-3-设置GitHub-SSH-Keys。" class="headerlink" title="1.2.3 设置GitHub SSH Keys。"></a>1.2.3 设置GitHub SSH Keys。</h5><p>登陆GitHub-&gt;Settings-&gt;“SSH Keys”，然后，点“Add SSH Key”，起个Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”。</p><h5 id="1-2-4-创建Repository"><a href="#1-2-4-创建Repository" class="headerlink" title="1.2.4 创建Repository"></a>1.2.4 创建Repository</h5><p>在github上创建一个仓库<br>注意repository的名字要与github的用户名一致。(如下形式)<br><code>your_user_name.github.io</code><br>其他保持默认即可。</p><h5 id="1-2-5-在本地创建一个同名仓库"><a href="#1-2-5-在本地创建一个同名仓库" class="headerlink" title="1.2.5 在本地创建一个同名仓库"></a>1.2.5 在本地创建一个同名仓库</h5><p>回到Cygwin<br>使用如下命令在~目录下，创建一个名为<code>your_user_name.github.io</code>的仓库，初始化，并上传一两个文件测试能否使用。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">mkdir</span> xxx（仓库名）<br>git init<br>touch README<br>git add README <br>git commit -m &#x27;<span class="hljs-built_in">first</span> commit&#x27;<br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2 安装Node.js"></a>2 安装Node.js</h2><blockquote><p>下载地址：<a href="https://nodejs.org/en/">Node.js官网</a><br>安装一路默认即可。</p></blockquote><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3 安装Hexo"></a>3 安装Hexo</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>打开Cygwin，输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><h3 id="3-2-初始化"><a href="#3-2-初始化" class="headerlink" title="3.2 初始化"></a>3.2 初始化</h3><p>新建一个名为Hexo的文件夹，cd到该文件夹，输入如下命令进行初始化及初始化下载。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo init<br><span class="hljs-variable">$ </span>npm install <span class="hljs-comment">#会在目录中安装 node_modules。</span><br></code></pre></td></tr></table></figure><h3 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3 启动服务"></a>3.3 启动服务</h3><p>输入如下命令，启动服务；启动后，在浏览器中输入<a href="http://localhost:4000/%EF%BC%8C%E5%8F%AF%E8%A7%81%E5%B7%B2%E7%BB%8F%E7%94%9F%E6%88%90%E5%A5%BD%E4%BA%86%E4%B8%80%E7%AF%87%E6%A8%A1%E6%9D%BFblog%E3%80%82">http://localhost:4000/，可见已经生成好了一篇模板blog。</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ hexo <span class="hljs-keyword">server</span><br>[<span class="hljs-keyword">info</span>] Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span>/. Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br></code></pre></td></tr></table></figure><h3 id="3-4-生成静态网页"><a href="#3-4-生成静态网页" class="headerlink" title="3.4 生成静态网页"></a>3.4 生成静态网页</h3><p>输入如下命令，将.md文件转换为.html网页</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h3 id="3-5-部署到Github上"><a href="#3-5-部署到Github上" class="headerlink" title="3.5 部署到Github上"></a>3.5 部署到Github上</h3><h4 id="3-5-1-修改-config-yml文件"><a href="#3-5-1-修改-config-yml文件" class="headerlink" title="3.5.1 修改_config.yml文件"></a>3.5.1 修改_config.yml文件</h4><p>将下面的第一段内容修改成第二段</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: http:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: http:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:yui73/yui73.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><h4 id="3-5-2-测试"><a href="#3-5-2-测试" class="headerlink" title="3.5.2 测试"></a>3.5.2 测试</h4><p>在浏览器中打开(<a href="http://yui73.github.io/">http://yui73.github.io/</a>) ，正常显示网页，表明部署成功。</p><h2 id="4-开始操作"><a href="#4-开始操作" class="headerlink" title="4 开始操作"></a>4 开始操作</h2><h3 id="4-1-部署操作"><a href="#4-1-部署操作" class="headerlink" title="4.1 部署操作"></a>4.1 部署操作</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo new <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章(不用引号)</span><br><span class="hljs-variable">$ </span>hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span><br><span class="hljs-variable">$ </span>hexo generate <span class="hljs-comment">#生成静态页面至public目录</span><br><span class="hljs-variable">$ </span>hexo server <span class="hljs-comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="hljs-variable">$ </span>hexo deploy <span class="hljs-comment">#将.deploy目录部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</span><br></code></pre></td></tr></table></figure><p>每次更新完，都可使用三步走进行部署</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br><span class="hljs-variable">$ </span>hexo s -g<br></code></pre></td></tr></table></figure><p>假设只执行<code>hexo g</code>，不执行<code>hexo s</code>的时候，则会在<code>hexo</code>文件夹下生成public文件夹，当遇到一些bug的时候，直接去看html文件有奇效。</p><h3 id="4-2-更换主题-Way1"><a href="#4-2-更换主题-Way1" class="headerlink" title="4.2 更换主题-Way1"></a>4.2 更换主题-Way1</h3><blockquote><p><a href="https://github.com/hexojs/hexo/wiki/Themes">主题仓库</a></p></blockquote><h5 id="4-2-1-在Cygwin下，cd到D-hexo目录下，clone想要的主题仓库"><a href="#4-2-1-在Cygwin下，cd到D-hexo目录下，clone想要的主题仓库" class="headerlink" title="4.2.1 在Cygwin下，cd到D:/hexo目录下，clone想要的主题仓库"></a>4.2.1 在Cygwin下，cd到D:/hexo目录下，clone想要的主题仓库</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/A-limon/</span>pacman.git themes/pacman<br><span class="hljs-comment">#将链接中的https换成git，能避免一些clone失败的情况</span><br></code></pre></td></tr></table></figure><h5 id="4-2-2-修改你的博客根目录-D-Hexo下的-config-yml配置文件中的theme属性，将其设置为pacman。"><a href="#4-2-2-修改你的博客根目录-D-Hexo下的-config-yml配置文件中的theme属性，将其设置为pacman。" class="headerlink" title="4.2.2 修改你的博客根目录/D/Hexo下的_config.yml配置文件中的theme属性，将其设置为pacman。"></a>4.2.2 修改你的博客根目录/D/Hexo下的_config.yml配置文件中的theme属性，将其设置为pacman。</h5><h5 id="4-2-3-更新主题"><a href="#4-2-3-更新主题" class="headerlink" title="4.2.3 更新主题"></a>4.2.3 更新主题</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> themes/pacman<br><span class="hljs-variable">$</span> git pull<br></code></pre></td></tr></table></figure><h3 id="4-3-更换主题"><a href="#4-3-更换主题" class="headerlink" title="4.3 更换主题"></a>4.3 更换主题</h3><p>有些主题有自己推荐的安装方式，详情见文档。</p><blockquote><p><a href="https://hexo.fluid-dev.com/docs/start/">Fluid</a></p></blockquote><h2 id="5-一些问题"><a href="#5-一些问题" class="headerlink" title="5 一些问题"></a>5 一些问题</h2><h3 id="5-1-图片加载不出来"><a href="#5-1-图片加载不出来" class="headerlink" title="5.1 图片加载不出来"></a>5.1 图片加载不出来</h3><h5 id="5-1-1-注意图片是-png还是-PNG，在本地测试无关，在Github上区分大小写。"><a href="#5-1-1-注意图片是-png还是-PNG，在本地测试无关，在Github上区分大小写。" class="headerlink" title="5.1.1 注意图片是.png还是.PNG，在本地测试无关，在Github上区分大小写。"></a>5.1.1 注意图片是<code>.png</code>还是<code>.PNG</code>，在本地测试无关，在Github上区分大小写。</h5><h5 id="5-1-2-直接找html文件看路径是否正确，路径可能不支持中文。"><a href="#5-1-2-直接找html文件看路径是否正确，路径可能不支持中文。" class="headerlink" title="5.1.2 直接找html文件看路径是否正确，路径可能不支持中文。"></a>5.1.2 直接找<code>html</code>文件看路径是否正确，路径可能不支持中文。</h5><h3 id="5-2-hexo-g-时的报错"><a href="#5-2-hexo-g-时的报错" class="headerlink" title="5.2 hexo g 时的报错"></a>5.2 hexo g 时的报错</h3><p>报错内容如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">FATAL &#123;<br>  err: Template render error: (unknown path)<br>    Error: expected end of comment, got end of file<br>      at Object._prettifyError (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\l</span>ib.js:36:11)<br>      at Template.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:538:21)<br>      at Environment.renderString (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:380:17)<br>      at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:236:16<br>      at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>      at Function.Promise.fromNode.Promise.fromCallback (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:209:30)<br>      at Tag.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:235:20)<br>      at Object.onRenderEnd (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\p</span>ost.js:297:22)<br>      at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\r</span>ender.js:79:21<br>      at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>      at Promise._settlePromiseFromHandler (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:547:31)<br>      at Promise._settlePromise (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:604:18)<br>      at Promise._settlePromise0 (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:649:10)<br>      at Promise._settlePromises (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:729:18)<br>      at _drainQueueStep (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:93:12)<br>      at _drainQueue (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:86:9)<br>      at Async._drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:102:5)<br>      at Immediate.Async.drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:15:14)<br>      at processImmediate (internal/timers.js:462:21) &#123;<br>    cause: Template render error: (unknown path)<br>      Error: expected end of comment, got end of file<br>        at Object._prettifyError (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\l</span>ib.js:36:11)<br>        at Template.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:538:21)<br>        at Environment.renderString (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:380:17)<br>        at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:236:16<br>        at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>        at Function.Promise.fromNode.Promise.fromCallback (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:209:30)<br>        at Tag.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:235:20)<br>        at Object.onRenderEnd (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\p</span>ost.js:297:22)<br>        at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\r</span>ender.js:79:21<br>        at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>        at Promise._settlePromiseFromHandler (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:547:31)<br>        at Promise._settlePromise (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:604:18)<br>        at Promise._settlePromise0 (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:649:10)<br>        at Promise._settlePromises (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:729:18)<br>        at _drainQueueStep (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:93:12)<br>        at _drainQueue (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:86:9)<br>        at Async._drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:102:5)<br>        at Immediate.Async.drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:15:14)<br>        at processImmediate (internal/timers.js:462:21),<br>    isOperational: true<br>  &#125;<br>&#125; Something&#x27;s wrong. Maybe you can find the solution here: <span class="hljs-variable">%s https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-variable"></span><br></code></pre></td></tr></table></figure><p>主要报错要看</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">err: <span class="hljs-keyword">Template</span> render error: (<span class="hljs-type">unknown</span> <span class="hljs-keyword">path</span>)<br>   Error: expected <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">comment</span>, got <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> file<br></code></pre></td></tr></table></figure><p>错误原因：Markdown文件中存在不能转义的字符<br>例如：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<span class="hljs-meta">#</span><br><span class="hljs-meta"># <span class="hljs-comment">//#单独出现</span></span><br></code></pre></td></tr></table></figure><h3 id="5-3-希腊字母和数学符号无法在网页显示"><a href="#5-3-希腊字母和数学符号无法在网页显示" class="headerlink" title="5.3 希腊字母和数学符号无法在网页显示"></a>5.3 希腊字母和数学符号无法在网页显示</h3><p>错误原因：使用Markdown语法写的希腊字母在转义成HTML时，无法被HTML识别<br><br><br>解决办法：直接在Markdown里面使用HTML语法的希腊字母和数学符号即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Web前端开发学习</title>
    <link href="/2021/04/25/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/25/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>仅用于自己学习时知识点的整理<br>学习视频：<a href="https://www.bilibili.com/video/BV1QW411N762?p=11">鱼C-小甲鱼</a><br>QAQ更新中…</p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p>q元素<br>用于定义比较短的元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>q元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>孔子有云：<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>学而不思则罔，思而不学则殆<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>blockquote元素<br>通过缩进的形式区分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blockquote元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>未被引用段<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>被引用段<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>cite元素<br>用于定义作品的标题，默认为斜体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>CITE元素<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>abbr元素<br>用于定义缩写，与全局属性title配合使用可展示完整含义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>abbr元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abbreviate&quot;</span>&gt;</span>abbr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>dfn元素<br>用于定义术语（试了一下，默认也是斜体）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>abbr元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abbreviate&quot;</span>&gt;</span>abbr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>address元素<br>用于定义联系信息的元素，默认斜体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>address元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度网址<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>ruby、rt、rp元素<br>rt：用于标记注音符号<br>rp：当浏览器不支持ruby替代的显示内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ruby元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>我<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>wǒ<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>爱<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ài<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>上<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>shàng<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>海<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>hǎi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>bdo元素<br>具有dir属性，有两个值：<br><code>lfr</code>(left to right)：为默认的<br><code>rtl</code>(right to left)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>bdo元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bdo</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;rtl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>从右往左<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>我<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>wǒ<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>爱<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ài<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>上<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>shàng<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>海<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>hǎi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bdo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="样式格式"><a href="#样式格式" class="headerlink" title="样式格式"></a>样式格式</h2></li><li><p>粗体<br>strong元素：粗体+表示重要的含义<br>b元素：仅表示粗体</p></li><li><p>斜体<br>em元素：斜体+表示强调的含义<br>i元素：仅表示斜体</p></li></ul><p><strong>也使用css样式表来代替实现b和i元素</strong></p><ul><li>del元素<br><del>删除内容</del><br>含义正确，只是做一个更新</li><li>ins元素<br>改为下划线</li><li>s元素<br><del>删除内容</del><br>含义不正确</li><li>u元素<br>下划线，含义为拼写错误的单词或者汉语的专有名词。</li><li>mark元素<br>标记文本的作用，默认黄色<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>mark元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>标记1<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>标记2<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>sup元素<br>表示上标</li><li>sub元素<br>表示下标</li><li>small元素<br>把文本变小</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>无序列表(Unordered List)<br><code>ul</code>来定义列表<br><code>li</code>来包裹列表项<br>左边默认为 ：</li></ul><p><strong>·</strong> 这样的样式<br><strong>·</strong> 这样的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Unordered List<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>有序列表(Ordered List)<br><code>ol</code>来定义列表<br><code>li</code>来包裹列表项<br>左边默认为 ：</li></ul><p><strong>1.</strong> 这样的样式<br><strong>2.</strong> 这样的样式</p><ul><li>表格<br><code>tr</code>来定义表格</li></ul><p><em>HTML5之后的表格边框样式都要使用CSS来实现：</em><br><code>border</code>属性<br><code>border-collapse</code>属性-用于合并边框线</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li>一个简单的表单<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>一个简单的表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;welcome.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>名字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>br&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><code>text</code>：明文<br><code>method</code>：post(将参数整合到url中)/post<br><code>bottom</code>：submmit/bottom/reset；可以覆盖表单的一些属性（formmethod）<br><code>autocomplete</code>：浏览器是否帮你自动填充<br><code>value</code>：设置默认值<br><code>autofocus</code>：会自动聚焦到某个input框<br><code>disable</code>：禁用元素，FormData不提交这个数据了<br><code>readonly</code>：不允许修改默认值，FormData依然提交这个数据</li></ul><hr><p><code>fieldset</code>：分组元素 -&gt; <code>legend</code>：fieldset子元素，用于设计分组的title<br><code>select</code>&amp;<code>option</code>：用于实现下拉框<br><code>optgroup</code>：对下拉框进行分组</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>组合计数</title>
    <link href="/2020/01/09/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    <url>/2020/01/09/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="组合计数-专题"><a href="#组合计数-专题" class="headerlink" title="组合计数-专题"></a>组合计数-专题</h1><hr><h2 id="·-模运算"><a href="#·-模运算" class="headerlink" title="· 模运算"></a>· 模运算</h2><p><strong>性质</strong>：</p><ol><li>(a + b)%p=(a%p + b%p)%p</li><li>(a * b)%p=((a%p)*(b%p))%p<br>【性质不适用于==除法==】</li></ol><p>   <strong>除法处理方式</strong>：<br>   <strong>公式</strong>：(b/a)%p=(b*a^(p-2)^)%p</p><h3 id="例题（A-B-HDU-1576）"><a href="#例题（A-B-HDU-1576）" class="headerlink" title="例题（A/B-HDU-1576）"></a>例题（A/B-HDU-1576）</h3><p> <strong>题目</strong>：<br>要求(A/B)%9973，但由于A很大，我们只给出n(n=A%9973)(我们给定的A必能被B整除，且gcd(B,9973) = 1)。  </p><p><strong>样例输入</strong>：<br>2<br>1000 53<br>87 123456789</p><p><strong>样例输出</strong>：<br>7922<br>6060</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> mod)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> b1=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9971</span>;i++)<br>    &#123;<br>        b1=(b1*b)%mod;<br>    &#125;<br>    ans=(n*b1)%<span class="hljs-number">9973</span>;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,b;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">int</span> ans;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n&gt;&gt;b;<br>        ans=<span class="hljs-built_in">mod</span>(n,b,<span class="hljs-number">9973</span>);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>o(´^｀)o ~ 此处有待更新</p><hr><h2 id="·组合数求法"><a href="#·组合数求法" class="headerlink" title="·组合数求法"></a>·组合数求法</h2><ol><li>杨辉三角：C(n,m) = C(n-1,m) +C(n-1,m-1)</li><li>公式：C(n,m)=n! / m! / (n-m)!<br>【大约 20！就到达了10^18^】</li></ol><p><strong>思考</strong>：<br>通常题目中的数据不会小于20，该如何避免强行计算阶乘 。</p><h3 id="例题（Divisors-POJ-2992）"><a href="#例题（Divisors-POJ-2992）" class="headerlink" title="例题（Divisors-POJ-2992）"></a>例题（Divisors-POJ-2992）</h3><p><strong>题目</strong>：<br>Your task in this problem is to determine the number of divisors of C(n,k). Just for fun – or do you need any special reason for such a useful computation?</p><p><strong>Input</strong>：<br>The input consists of several instances. Each instance consists of a single line containing two integers n and k (0 ≤ k ≤ n ≤ 431), separated by a single space.</p><p><strong>Output</strong>：<br>For each instance, output a line containing exactly one integer – the number of distinct divisors of C(n,k). For the input instances, this number does not exceed 2^63^ - 1.</p><p><strong>样例输入</strong>：<br>5 1<br>6 3<br>10 4</p><p><strong>样例输出</strong>：<br>2<br>6<br>16</p><p><strong>思考</strong>：</p><ol><li>避开计算C(n,k)</li><li>打表素数</li><li>整数 n 的拆分: n=p<del>1</del>^a1^ p<del>2</del>^a2^ p<del>3</del>^a3^… p<del>m</del>^am^</li><li>计算指数：a<del>1</del> = n / p<del>1</del> + n / p<del>1</del>^2^ + n / p<del>1</del>^3^+… </li><li>n! 的因子个数：(a<del>1</del>+1) * (a<del>2</del>+1)  * … * (a<del>m</del>+1)</li><li>C(n,k)=n! / k! / (n-k)! 的因子数：<br>[(a<del>1n</del>-a<del>1k</del>-a<del>1(n-k)</del>)+1] * [(a<del>2n</del>-a<del>2k</del>-a<del>2(n-k)</del>)+1]  * … * [(a<del>mn</del>-a<del>mk</del>-a<del>m(n-k)</del>)+1]</li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> primenums[<span class="hljs-number">450</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//打表</span><br>    <span class="hljs-keyword">int</span> cot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">450</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||i==<span class="hljs-number">2</span>)<br>        &#123;<br>            primenums[cot]=i;<br>            cot++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-built_in">sqrt</span>(i);j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)<br>                &#123;<br>                    flag=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>            &#123;<br>                primenums[cot]=i;<br>                cot++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">coot2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//计算指数个数</span><br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        ans=ans+n/p;<br>        n=n/p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">coot1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//计算约数个数</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(primenums[i]&lt;=n)<br>    &#123;<br>        ans=ans*(<span class="hljs-built_in">coot2</span>(n,primenums[i])-<span class="hljs-built_in">coot2</span>(k,primenums[i])-<span class="hljs-built_in">coot2</span>(n-k,primenums[i])+<span class="hljs-number">1</span>);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,k;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans;<br>    <span class="hljs-built_in">prime</span>();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k)==<span class="hljs-number">2</span>)<br>    &#123;<br><br>        ans=<span class="hljs-built_in">coot1</span>(n,k);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>枚举排列</title>
    <link href="/2020/01/07/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97%E6%B3%95/"/>
    <url>/2020/01/07/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举排列"><a href="#枚举排列" class="headerlink" title="枚举排列"></a>枚举排列</h1><p><strong>题目</strong>：输入正整数 n ，按照字典序从小到大的顺序的前 n 个数的所有排列。</p><p><strong>提示</strong>：两个序列字典序关系大小关系等价于从头开始第一个不相同位置大小关系。（即： {1,3,2} &lt; {2,1,3} ）</p><hr><h2 id="·-生成-1-n-的排列"><a href="#·-生成-1-n-的排列" class="headerlink" title="· 生成 1 ~ n 的排列"></a>· 生成 1 ~ n 的排列</h2><p><strong>思考</strong>：<br>以 1 开头的排列开始讨论：第一位是 1，后面 2~9 按照字典序排序，2 ~ 9 的排列又符合 ：以 2 开头的排列。<br>(出现了！是你！递归！)</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_permutation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(cur==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,A[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;cur;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(A[j]==i)<br>                    flag=<span class="hljs-number">0</span>;<br>            &#125;        <br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                A[cur]=i;<br>                <span class="hljs-built_in">print_permutation</span>(n,A,cur+<span class="hljs-number">1</span>);<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> A[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">print_permutation</span>(n,A,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二级指针</title>
    <link href="/2019/11/28/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/"/>
    <url>/2019/11/28/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><p><strong>笔记</strong>：</p><ol><li>**p 指向值</li><li>*p 指向1级指针地址</li><li>p 二级指针地址</li></ol><p><strong>代码测试</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **i,<span class="hljs-keyword">int</span> **j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Before:%d %d\n&quot;</span>,*i,*j);<br>    <span class="hljs-keyword">int</span> *t;<br>    t=*i;<br>    *i=*j;<br>    *j=t;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After:%d %d\n&quot;</span>,*i,*j);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">4</span>,b=<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">int</span> *p1=&amp;a,*p2=&amp;b;<br>    <span class="hljs-keyword">int</span> **p3=&amp;p1,**p4=&amp;p2;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BeforeSwap:%d %d\n&quot;</span>,p1,p2);<br>    <span class="hljs-built_in">Swap</span>(p3,p4);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AfterSwap:%d %d\n&quot;</span>,p1,p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,*p1,*p2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>暴力求解法</title>
    <link href="/2019/11/27/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3%E6%B3%95/"/>
    <url>/2019/11/27/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="暴力求解法"><a href="#暴力求解法" class="headerlink" title="暴力求解法"></a>暴力求解法</h1><h2 id="2019-11-26"><a href="#2019-11-26" class="headerlink" title="2019/11/26"></a>2019/11/26</h2><p>第一次通过写博客来记录自己的学习进程。<br>在之前的学习过程中，<br>深刻认识到我应该与自己的键盘多多培养感情。</p><p>于是，放下我的纸笔，开始写这第一篇博客。</p><h3 id="除法（Division，UVa-725）"><a href="#除法（Division，UVa-725）" class="headerlink" title="除法（Division，UVa 725）"></a>除法（Division，UVa 725）</h3><p><strong>题目</strong>：<br>输入整数n，按从小到大的顺序输出所有形如 <strong>abcde/ fghij = n</strong>  的表达式，其中 a ~ j 恰好为数字 0 ~ 9 的一个排列（可以有前导0），2&lt;= n &lt;= 79  。</p><p><strong>样例输入</strong>：<br>62</p><p><strong>样例输出</strong>：<br>79546 / 01283 = 62<br>94736 / 01528 = 62</p><p><strong>骚操作</strong>：</p><ol><li>使用 <strong>sprintf</strong>函数快速将两个int型数据转换成字符串并且进行拼接</li><li>按照题意，满足条件的必须是 0 ~ 9 的一个排列，因此，先进行排序，再进行判断，会更加迅速且准确。<br>（判断条件：**’0’+i**）</li><li>利用 bool 型 flag 对其是否满足条件进行标记<br>（应该属于基操）</li></ol><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">char</span> s[<span class="hljs-number">99</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> fghij=<span class="hljs-number">1234</span>;;fghij++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> abcde=fghij*n;<br>            <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%05d%05d&quot;</span>,abcde,fghij);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(s)&gt;<span class="hljs-number">10</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-built_in">sort</span>(s,s+<span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">bool</span> flag=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i]!=<span class="hljs-string">&#x27;0&#x27;</span>+i) flag=<span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                cnt++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d / %05d = %d\n&quot;</span>,abcde,fghij,n);<br>            &#125;<br>           <br>        &#125;<br>         <span class="hljs-keyword">if</span>(!cnt)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There is no solutions!&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最大乘积（Maximum-Product-UVa-11059）"><a href="#最大乘积（Maximum-Product-UVa-11059）" class="headerlink" title="最大乘积（Maximum Product,UVa 11059）"></a>最大乘积（Maximum Product,UVa 11059）</h3><p><strong>题目</strong>：<br>输入n个元素组成的序列S，你需要找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，应输出0（表示无解）<br>1 &lt;= n &lt;= 18, -10 &lt;= Si &lt;= 10。</p><p><strong>样例输入</strong>：<br>3<br>2 4 -3<br>5<br>2 5 -1 2 -1</p><p><strong>样例输出</strong>：<br>8<br>20</p><p><strong>骚操作</strong>：</p><ol><li>数据范围：1 &lt;= n &lt;= 18, -10 &lt;= Si &lt;= 10<br>刚好最大可能乘积不超过10^18，使用 long long 存储。</li><li>从头到尾枚举，max判断大小。</li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">19</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans=<span class="hljs-number">1</span>,temp=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;s[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>         temp=temp*s[i];<br>         ans=<span class="hljs-built_in">max</span>(ans,temp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分数拆分（Fractions-Again，UVa-10976）"><a href="#分数拆分（Fractions-Again，UVa-10976）" class="headerlink" title="分数拆分（Fractions Again，UVa 10976）"></a>分数拆分（Fractions Again，UVa 10976）</h3><p><strong>题目</strong>：<br>输入正整数k,找到所有的正整数x&gt;=y,使得 1 / k = 1 / x + 1 / y </p><p><strong>样例输入</strong>：<br>2<br>12</p><p><strong>样例输出</strong>：<br> 2<br>1 / 2 = 1 / 6 +1 / 3<br>1 / 2 = 1 / 4 +1 / 4<br>8<br>1 / 12 = 1 / 156 +1 / 13<br>1 / 12 = 1 / 84 +1 / 14<br>1 / 12 = 1 / 60 +1 / 15<br>1 / 12 = 1 / 48 +1 / 16<br>1 / 12 = 1 / 36 +1 / 18<br>1 / 12 = 1 / 30 +1 / 20<br>1 / 12 = 1 / 28 +1 / 21<br>1 / 12 = 1 / 24 +1 / 24</p><p><strong>骚操作</strong>：</p><ol><li>由于 x &gt;= y ,有 1 / x &lt;= 1 / y ,因此 1 / k - 1 / y &lt;= 1 / y<br>即 y &lt;= 2k (暴力枚举)  </li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k)==<span class="hljs-number">1</span> &amp;&amp; k)<br>    &#123;<br>        <span class="hljs-keyword">int</span> kase=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">float</span> x=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>],b[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">float</span> i=k+<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*k;i++)<br>        &#123;<br>            x=(i*k)/(i-k);<br>            <span class="hljs-keyword">int</span> temp;<br>            temp = (<span class="hljs-keyword">int</span>) x;<br>            <span class="hljs-keyword">if</span>(x==temp)<br>            &#123;<br>                kase++;<br>                a[j]=x;<br>                b[j]=i;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,kase);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;j;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 / %d = 1 / %d +1 / %d\n&quot;</span>,k,a[i],b[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
