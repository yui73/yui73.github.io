<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>WPF + MVVM 学习</title>
    <link href="/2021/07/01/WPFLearning/"/>
    <url>/2021/07/01/WPFLearning/</url>
    
    <content type="html"><![CDATA[<h1 id="WPF学习"><a href="#WPF学习" class="headerlink" title="WPF学习"></a>WPF学习</h1><blockquote><p>学习视频：<a href="https://www.bilibili.com/video/BV1ht411e7Fe">刘铁猛</a></p></blockquote><blockquote><p>学习教材：《深入浅出WPF》</p></blockquote><h3 id="0-预备知识"><a href="#0-预备知识" class="headerlink" title="0 预备知识"></a>0 预备知识</h3><ul><li>什么是WPF<br>三层结构：<code>（数据层-&gt;业务逻辑层-&gt;表示层）</code></li><li>什么是XAML<br>是WPF技术中专门用于设计UI的语言。<br>实现了UI与逻辑分离。<br>是一种单纯的声明型语言，无法加入程序逻辑，与逻辑相关的代码统统集中在程序逻辑层<ul><li>“高内聚-低耦合”</li><li>Template功能。</li><li>Atrribute-属性</li></ul></li><li> 将cs文件编译完成过后会生成.dll文件，别的程序员可以直接引用这个.dll文件</li><li>Solution层</li><li>Project层(窗口/控制台应用程序/类库)：编译的结果叫做<br><code>项目集Assembly</code> <ul><li>Properties装着资源文件的描述 </li><li>Resources装着类库：<code>&#123;&#125;</code>是一个命名空间；</li><li>两对<code>.xaml</code>文件：<code>APP.xaml</code>对应应用程序本身，其中<code>StartupUri:MainWindow.xaml</code>表示MainWindow为程序启动时的主窗体。</li></ul></li><li>Canvas可以进行拖拽式界面设计</li></ul><h3 id="Lesson-1"><a href="#Lesson-1" class="headerlink" title="Lesson 1"></a>Lesson 1</h3><h4 id="1-1-解析-xaml和-cs文件"><a href="#1-1-解析-xaml和-cs文件" class="headerlink" title="1.1 解析.xaml和.cs文件"></a>1.1 解析.xaml和.cs文件</h4><ul><li><code>partial</code>关键字：分部类，类可以分开在两个地方写，编译时会进行合并（也就是将<code>.xaml</code>和<code>.cs</code>合并在一个类里）</li></ul><h4 id="1-2-浅析用户界面的树形结构"><a href="#1-2-浅析用户界面的树形结构" class="headerlink" title="1.2 浅析用户界面的树形结构"></a>1.2 浅析用户界面的树形结构</h4><ul><li>Dos用户界面 - 文字用户界面</li><li>GUI - 图形用户界面 - 友好的用户界面</li></ul><p>WPF制作的用户界面是树形结构。Visual C++、Delphi、VB都是平面结构的。</p><h3 id="Lesson-2"><a href="#Lesson-2" class="headerlink" title="Lesson 2"></a>Lesson 2</h3><h5 id="在-xaml中为对象属性赋值"><a href="#在-xaml中为对象属性赋值" class="headerlink" title="在.xaml中为对象属性赋值"></a>在<code>.xaml</code>中为对象属性赋值</h5><p>对象的数据存储方式有：字段+属性；属性在对外暴露的场景里更加安全，当遇到脏数据时，可以使用set方法对脏数据进行过滤。</p><h6 id="方法一：使用Attribute进行赋值"><a href="#方法一：使用Attribute进行赋值" class="headerlink" title="方法一：使用Attribute进行赋值"></a>方法一：使用Attribute进行赋值</h6><p>这种方法为三种之中最简单的，也很方便。<br>缺陷：只能使用简单的字符串赋值，没有办法赋非常复杂的值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Grid</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Path</span> <span class="hljs-attr">Data</span>=<span class="hljs-string">&quot;M 0,0 L 200,100 L 100,200 Z&quot;</span> <span class="hljs-attr">Stroke</span>=<span class="hljs-string">&quot;Black&quot;</span> <span class="hljs-attr">Fill</span>=<span class="hljs-string">&quot;Red&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Grid</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用TypeConverter类进行映射（在MVVM中有自带的）</p><blockquote><p>当前程序集的名空间一般定义为：local</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">xmlns:<span class="hljs-keyword">local</span>=<span class="hljs-string">&quot;clr-namespace:XXX&quot;</span><br></code></pre></td></tr></table></figure><h6 id="方法二：用属性标签赋值"><a href="#方法二：用属性标签赋值" class="headerlink" title="方法二：用属性标签赋值"></a>方法二：用属性标签赋值</h6><blockquote><p>对应对象属性。<br>缺陷：程序变得很繁琐。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;Button /&gt;</span>          <span class="hljs-comment">#空标签</span><br><span class="hljs-section">&lt;Button&gt;</span><span class="hljs-section">&lt;/Button&gt;</span>   <span class="hljs-comment">#标签的内容 与对象的内容区分</span><br></code></pre></td></tr></table></figure><h6 id="方法三：使用标签扩展的方式赋值"><a href="#方法三：使用标签扩展的方式赋值" class="headerlink" title="方法三：使用标签扩展的方式赋值"></a>方法三：使用标签扩展的方式赋值</h6><p>方法如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Text</span>=<span class="hljs-string">&quot;&#123;StaticResource ResourceKey=stringHello&#125;&quot;</span><br><span class="hljs-attr">Text</span>=<span class="hljs-string">&quot;&#123;Binding ElementName=sld, Path=Value&#125;&quot;</span><br><br><span class="hljs-comment"># 标签扩展的属性用`逗号`隔开</span><br></code></pre></td></tr></table></figure><h3 id="Lesson-3"><a href="#Lesson-3" class="headerlink" title="Lesson 3"></a>Lesson 3</h3><h4 id="3-1-事件处理器与代码后置"><a href="#3-1-事件处理器与代码后置" class="headerlink" title="3.1 事件处理器与代码后置"></a>3.1 事件处理器与代码后置</h4><blockquote><p>.NET平台的处理机制为事件</p></blockquote><p>事件五个关键点</p><ul><li>事件拥有者</li><li>事件拥有者 拥有 哪些事件</li><li>事件响应者</li><li>事件响应者 用哪些方法 响应 事件</li><li>其间的事件订阅关系<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Button x:<span class="hljs-attribute">Name</span>=<span class="hljs-string">&quot;Button1&quot;</span> <span class="hljs-attribute">Content</span>=<span class="hljs-string">&quot;Click Me!&quot;</span> <span class="hljs-attribute">Width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attribute">Height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attribute">Click</span>=<span class="hljs-string">&quot;Button_Click&quot;</span> /&gt;<br><span class="hljs-comment"># Click属性为事件处理器 方法的命名一般是Pascal法</span><br></code></pre></td></tr></table></figure><h4 id="3-2-导入程序集和引用其中的名称空间"><a href="#3-2-导入程序集和引用其中的名称空间" class="headerlink" title="3.2 导入程序集和引用其中的名称空间"></a>3.2 导入程序集和引用其中的名称空间</h4><blockquote><p>模块化程序设计 - User Control - 项目组件 </p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;Window xmlns:<span class="hljs-keyword">uc</span>=<span class="hljs-string">&quot;clr-namespace:RPARobot.UserControls&quot;</span>&gt;<br><br>&lt;<span class="hljs-keyword">uc</span>:....&gt;<br><span class="hljs-comment">#要先add Reference 才可以使用</span><br><br></code></pre></td></tr></table></figure><h4 id="3-3-XAML的注释"><a href="#3-3-XAML的注释" class="headerlink" title="3.3 XAML的注释"></a>3.3 XAML的注释</h4>选中需要注释的内容，有个注释按钮。<br>其注释方法与HTML是一样的。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- XXX --&gt;</span><br>#注释之间不可嵌套<br>#快捷键是：crtl+e+c;crtl+e+u;crtl+k+c;crtl+k+u;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Lesson-4"><a href="#Lesson-4" class="headerlink" title="Lesson 4"></a>Lesson 4</h3><h4 id="4-1-x名称空间的由来和作用"><a href="#4-1-x名称空间的由来和作用" class="headerlink" title="4.1 x名称空间的由来和作用"></a>4.1 x名称空间的由来和作用</h4><p>xmlns：xml语言的namespace<br>x名空间专门用于映射：<br><code>http://schemas.microsoft.com/winfx/2006/xaml</code><br>该类专门用于解析并分析<code>.xaml</code>代码的。</p><h4 id="4-2-x名称空间里都有什么"><a href="#4-2-x名称空间里都有什么" class="headerlink" title="4.2 x名称空间里都有什么"></a>4.2 x名称空间里都有什么</h4><p>详情见书。</p><h4 id="4-3-x-Class"><a href="#4-3-x-Class" class="headerlink" title="4.3 x:Class"></a>4.3 x:Class</h4><p>x:Class里的类就是最后要进行合并的类。<br>IntializeComponent();这个方法是由.xaml里生成的。</p><h4 id="4-4-x-ClassModifier"><a href="#4-4-x-ClassModifier" class="headerlink" title="4.4 x:ClassModifier"></a>4.4 x:ClassModifier</h4><blockquote><p>ClassModifier：类修饰符 默认为Public</p></blockquote><h4 id="4-5-x-Name"><a href="#4-5-x-Name" class="headerlink" title="4.5 x:Name"></a>4.5 x:Name</h4><blockquote><p>.xaml见到一个标签会创建一个实例，不是变量</p></blockquote><p>x:name相当于给了一个变量引用这个实例，后台可以直接引用这个变量。</p><p>当一个控件有Name属性时，使用起来x:name等于name。</p><h4 id="4-6-x-FieldModifier"><a href="#4-6-x-FieldModifier" class="headerlink" title="4.6 x:FieldModifier"></a>4.6 x:FieldModifier</h4><blockquote><p>控制类字段的访问级别</p></blockquote><h3 id="Lesson-5"><a href="#Lesson-5" class="headerlink" title="Lesson 5"></a>Lesson 5</h3><blockquote><p>MVVM入门与提高</p></blockquote><h4 id="5-1-基本常识"><a href="#5-1-基本常识" class="headerlink" title="5.1 基本常识"></a>5.1 基本常识</h4><h5 id="5-1-1-开发环境"><a href="#5-1-1-开发环境" class="headerlink" title="5.1.1 开发环境"></a>5.1.1 开发环境</h5><ul><li>Visual Studio</li><li>Microsoft Prism</li><li>Microsoft Blend SDK</li></ul><h5 id="5-1-2-Nuget-Package-Manager-安装"><a href="#5-1-2-Nuget-Package-Manager-安装" class="headerlink" title="5.1.2 Nuget Package Manager 安装"></a>5.1.2 Nuget Package Manager 安装</h5><p>无需安装 Visual Studio 已经集成。</p><h5 id="5-1-3-必备知识的准备"><a href="#5-1-3-必备知识的准备" class="headerlink" title="5.1.3 必备知识的准备"></a>5.1.3 必备知识的准备</h5><ul><li><p>Data Binding</p></li><li><p>Dependency Property</p></li><li><p>Dependency Object</p></li><li><p>了解WPF中的命令</p><blockquote><p>委托式命令</p></blockquote></li><li><p>Lambda表达式</p></li></ul><h5 id="5-1-4-Code-Snippet"><a href="#5-1-4-Code-Snippet" class="headerlink" title="5.1.4 Code Snippet"></a>5.1.4 Code Snippet</h5><blockquote><p>代码模板</p></blockquote><p><strong>使用/创建</strong></p><h4 id="5-2-MVVM设计模式详解"><a href="#5-2-MVVM设计模式详解" class="headerlink" title="5.2 MVVM设计模式详解"></a>5.2 MVVM设计模式详解</h4><blockquote><p>MVVM = Model + View + ViewModel</p></blockquote><p><em>View 和 ViewModel 的解耦</em></p><h5 id="5-2-1-基础概念"><a href="#5-2-1-基础概念" class="headerlink" title="5.2.1 基础概念"></a>5.2.1 基础概念</h5><ul><li>Model： 现实世界中对象的抽象结果</li><li>View = UI</li><li>ViewModel = Model for View</li><li>ViewModel与View的沟通<ul><li>传递数据 – 数据属性</li><li>传递操作 – 命令属性<blockquote><p>模块化技术 依赖注入技术 – 更高阶内容</p></blockquote></li></ul></li></ul><p><em>View做操作 ViewModel响应操作</em></p><p><em>ViewModel是桥梁的作用？</em></p><p><em>MVVM适合去写企业级程序</em></p><h4 id="5-3-案例讲解"><a href="#5-3-案例讲解" class="headerlink" title="5.3 案例讲解"></a>5.3 案例讲解</h4><blockquote><p>预备知识：Binding+Command</p></blockquote><h5 id="5-3-1-小程序"><a href="#5-3-1-小程序" class="headerlink" title="5.3.1 小程序"></a>5.3.1 小程序</h5><blockquote><p><code>crtl+.</code>可以自动添加类库 <br>界面一动；后台就动；如何更新？</p></blockquote><ul><li>重要类库：NotificationObject</li><li>重要类库：DelegateCommand</li><li>View和ViewModel交互</li></ul><h1 id="一些小知识"><a href="#一些小知识" class="headerlink" title="一些小知识"></a>一些小知识</h1><blockquote><p>学习文档：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/">C#官方文档</a></p></blockquote><h3 id="0-基础知识"><a href="#0-基础知识" class="headerlink" title="0 基础知识"></a>0 基础知识</h3><h5 id="运算符"><a href="#运算符" class="headerlink" title="??运算符"></a>??运算符</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">??</span>  <span class="hljs-comment">#双问号运算符 </span><br></code></pre></td></tr></table></figure><p>提供了一种快捷方式，可以在处理可空类型和引用类型时表示null值的可能性，这个运算符放在两个操作数之间。<br>第一个操作数必须是一个可空类型或者引用类型，第二个操作数必须与第一个操作数类型相同，或者可以隐式转换为第一个操作数的类型。<br> 1、如果第一个操作数不是null，整个表达式就等于第一个操作数的值；<br>2、如果第一个操作数是null， 整个表达式就等于第二个操作数的值<br>例子如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">int</span>? a = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">int</span> b;<br>b = a ?? <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">3</span>;<br>Console.<span class="hljs-keyword">WriteLine</span>(b); <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><h5 id="gt-运算符"><a href="#gt-运算符" class="headerlink" title="=&gt;运算符"></a>=&gt;运算符</h5><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda表达式</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown用法集合</title>
    <link href="/2021/05/14/MarkdownUsage/"/>
    <url>/2021/05/14/MarkdownUsage/</url>
    
    <content type="html"><![CDATA[<p>1 给字体换颜色</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">font</span> size=<span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&#x27;#191970&#x27;</span>&gt;&lt;/<span class="hljs-keyword">font</span>&gt;<br></code></pre></td></tr></table></figure><p>2 插入希腊字母<br>例：&lambda;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$\lambda$ <br><span class="hljs-regexp">//</span>该方法无法转义成HTML，但仅Markdown是支持的<br><span class="hljs-regexp">//</span>因此推荐直接使用HTML支持的字符如下:<br>&amp;lambda;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/14/MarkdownUsage/Markdown.png" alt="Markdown字符"><br>3 插入上下标<br>H<sub>2</sub>O</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">H<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>O<br></code></pre></td></tr></table></figure><p>H<sup>2</sup></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">H<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的建站方法记录</title>
    <link href="/2021/05/12/MyBlogBuildWay/"/>
    <url>/2021/05/12/MyBlogBuildWay/</url>
    
    <content type="html"><![CDATA[<h1 id="我的建站方法记录"><a href="#我的建站方法记录" class="headerlink" title="我的建站方法记录"></a>我的建站方法记录</h1><p>环境：Windows10</p><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1 安装git"></a>1 安装git</h2><h3 id="1-1-安装Cygwin"><a href="#1-1-安装Cygwin" class="headerlink" title="1.1 安装Cygwin"></a>1.1 安装Cygwin</h3><blockquote><p>下载地址:<a href="http://www.cygwin.com/">Gygwin官网</a></p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin.PNG" alt="Cygwin-1"></p><blockquote><p>直接安装一路默认</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin2.PNG" alt="Cygwin-2"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin3.PNG" alt="Cygwin-3"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin4.PNG" alt="Cygwin-4"><br><img src="/2021/05/12/MyBlogBuildWay/Cygwin5.PNG" alt="Cygwin-5"></p><blockquote><p>这里推荐使用国内的镜像网站（找不到得自己添加）</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin6.PNG" alt="Cygwin-6"></p><blockquote><p>这里是一些必须安装的包</p></blockquote><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin7.PNG" alt="Cygwin-7"></p><h3 id="1-2-在Cygwin下使用git的SSH服务"><a href="#1-2-在Cygwin下使用git的SSH服务" class="headerlink" title="1.2 在Cygwin下使用git的SSH服务"></a>1.2 在Cygwin下使用git的SSH服务</h3><h5 id="1-2-1-在Cygwin打开后，默认在-目录，使用如下命令查看实际在Windows中的路径"><a href="#1-2-1-在Cygwin打开后，默认在-目录，使用如下命令查看实际在Windows中的路径" class="headerlink" title="1.2.1 在Cygwin打开后，默认在~目录，使用如下命令查看实际在Windows中的路径"></a>1.2.1 在Cygwin打开后，默认在~目录，使用如下命令查看实际在Windows中的路径</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>cygpath -w ~<span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><p><img src="/2021/05/12/MyBlogBuildWay/Cygwin8.PNG" alt="Cygwin-8"></p><h5 id="1-2-2-使用ssh-keygen命令生成密钥"><a href="#1-2-2-使用ssh-keygen命令生成密钥" class="headerlink" title="1.2.2 使用ssh-keygen命令生成密钥"></a>1.2.2 使用ssh-keygen命令生成密钥</h5><p>生成的.ssh文件夹在C:\cygwin64\home\ad662下，.ssh文件夹里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，id_rsa.pub是公钥。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@163.com&quot;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-3-设置GitHub-SSH-Keys。"><a href="#1-2-3-设置GitHub-SSH-Keys。" class="headerlink" title="1.2.3 设置GitHub SSH Keys。"></a>1.2.3 设置GitHub SSH Keys。</h5><p>登陆GitHub-&gt;Settings-&gt;“SSH Keys”，然后，点“Add SSH Key”，起个Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”。</p><h5 id="1-2-4-创建Repository"><a href="#1-2-4-创建Repository" class="headerlink" title="1.2.4 创建Repository"></a>1.2.4 创建Repository</h5><p>在github上创建一个仓库<br>注意repository的名字要与github的用户名一致。(如下形式)<br><code>your_user_name.github.io</code><br>其他保持默认即可。</p><h5 id="1-2-5-在本地创建一个同名仓库"><a href="#1-2-5-在本地创建一个同名仓库" class="headerlink" title="1.2.5 在本地创建一个同名仓库"></a>1.2.5 在本地创建一个同名仓库</h5><p>回到Cygwin<br>使用如下命令在~目录下，创建一个名为<code>your_user_name.github.io</code>的仓库，初始化，并上传一两个文件测试能否使用。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">mkdir</span> xxx（仓库名）<br>git init<br>touch README<br>git add README <br>git commit -m &#x27;<span class="hljs-built_in">first</span> commit&#x27;<br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2 安装Node.js"></a>2 安装Node.js</h2><blockquote><p>下载地址：<a href="https://nodejs.org/en/">Node.js官网</a><br>安装一路默认即可。</p></blockquote><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3 安装Hexo"></a>3 安装Hexo</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>打开Cygwin，输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><h3 id="3-2-初始化"><a href="#3-2-初始化" class="headerlink" title="3.2 初始化"></a>3.2 初始化</h3><p>新建一个名为Hexo的文件夹，cd到该文件夹，输入如下命令进行初始化及初始化下载。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo init<br><span class="hljs-variable">$ </span>npm install <span class="hljs-comment">#会在目录中安装 node_modules。</span><br></code></pre></td></tr></table></figure><h3 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3 启动服务"></a>3.3 启动服务</h3><p>输入如下命令，启动服务；启动后，在浏览器中输入<a href="http://localhost:4000/%EF%BC%8C%E5%8F%AF%E8%A7%81%E5%B7%B2%E7%BB%8F%E7%94%9F%E6%88%90%E5%A5%BD%E4%BA%86%E4%B8%80%E7%AF%87%E6%A8%A1%E6%9D%BFblog%E3%80%82">http://localhost:4000/，可见已经生成好了一篇模板blog。</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ hexo <span class="hljs-keyword">server</span><br>[<span class="hljs-keyword">info</span>] Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span>/. Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br></code></pre></td></tr></table></figure><h3 id="3-4-生成静态网页"><a href="#3-4-生成静态网页" class="headerlink" title="3.4 生成静态网页"></a>3.4 生成静态网页</h3><p>输入如下命令，将.md文件转换为.html网页</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h3 id="3-5-部署到Github上"><a href="#3-5-部署到Github上" class="headerlink" title="3.5 部署到Github上"></a>3.5 部署到Github上</h3><h4 id="3-5-1-修改-config-yml文件"><a href="#3-5-1-修改-config-yml文件" class="headerlink" title="3.5.1 修改_config.yml文件"></a>3.5.1 修改_config.yml文件</h4><p>将下面的第一段内容修改成第二段</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: http:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: http:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:yui73/yui73.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><h4 id="3-5-2-测试"><a href="#3-5-2-测试" class="headerlink" title="3.5.2 测试"></a>3.5.2 测试</h4><p>在浏览器中打开(<a href="http://yui73.github.io/">http://yui73.github.io/</a>) ，正常显示网页，表明部署成功。</p><h2 id="4-开始操作"><a href="#4-开始操作" class="headerlink" title="4 开始操作"></a>4 开始操作</h2><h3 id="4-1-部署操作"><a href="#4-1-部署操作" class="headerlink" title="4.1 部署操作"></a>4.1 部署操作</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo new <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章(不用引号)</span><br><span class="hljs-variable">$ </span>hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span><br><span class="hljs-variable">$ </span>hexo generate <span class="hljs-comment">#生成静态页面至public目录</span><br><span class="hljs-variable">$ </span>hexo server <span class="hljs-comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="hljs-variable">$ </span>hexo deploy <span class="hljs-comment">#将.deploy目录部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</span><br></code></pre></td></tr></table></figure><p>每次更新完，都可使用三步走进行部署</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br><span class="hljs-variable">$ </span>hexo s -g<br></code></pre></td></tr></table></figure><p>假设只执行<code>hexo g</code>，不执行<code>hexo s</code>的时候，则会在<code>hexo</code>文件夹下生成public文件夹，当遇到一些bug的时候，直接去看html文件有奇效。</p><h3 id="4-2-更换主题-Way1"><a href="#4-2-更换主题-Way1" class="headerlink" title="4.2 更换主题-Way1"></a>4.2 更换主题-Way1</h3><blockquote><p><a href="https://github.com/hexojs/hexo/wiki/Themes">主题仓库</a></p></blockquote><h5 id="4-2-1-在Cygwin下，cd到D-hexo目录下，clone想要的主题仓库"><a href="#4-2-1-在Cygwin下，cd到D-hexo目录下，clone想要的主题仓库" class="headerlink" title="4.2.1 在Cygwin下，cd到D:/hexo目录下，clone想要的主题仓库"></a>4.2.1 在Cygwin下，cd到D:/hexo目录下，clone想要的主题仓库</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/A-limon/</span>pacman.git themes/pacman<br><span class="hljs-comment">#将链接中的https换成git，能避免一些clone失败的情况</span><br></code></pre></td></tr></table></figure><h5 id="4-2-2-修改你的博客根目录-D-Hexo下的-config-yml配置文件中的theme属性，将其设置为pacman。"><a href="#4-2-2-修改你的博客根目录-D-Hexo下的-config-yml配置文件中的theme属性，将其设置为pacman。" class="headerlink" title="4.2.2 修改你的博客根目录/D/Hexo下的_config.yml配置文件中的theme属性，将其设置为pacman。"></a>4.2.2 修改你的博客根目录/D/Hexo下的_config.yml配置文件中的theme属性，将其设置为pacman。</h5><h5 id="4-2-3-更新主题"><a href="#4-2-3-更新主题" class="headerlink" title="4.2.3 更新主题"></a>4.2.3 更新主题</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> themes/pacman<br><span class="hljs-variable">$</span> git pull<br></code></pre></td></tr></table></figure><h3 id="4-3-更换主题"><a href="#4-3-更换主题" class="headerlink" title="4.3 更换主题"></a>4.3 更换主题</h3><p>有些主题有自己推荐的安装方式，详情见文档。</p><blockquote><p><a href="https://hexo.fluid-dev.com/docs/start/">Fluid</a></p></blockquote><h2 id="5-一些问题"><a href="#5-一些问题" class="headerlink" title="5 一些问题"></a>5 一些问题</h2><h3 id="5-1-图片加载不出来"><a href="#5-1-图片加载不出来" class="headerlink" title="5.1 图片加载不出来"></a>5.1 图片加载不出来</h3><h5 id="5-1-1-注意图片是-png还是-PNG，在本地测试无关，在Github上区分大小写。"><a href="#5-1-1-注意图片是-png还是-PNG，在本地测试无关，在Github上区分大小写。" class="headerlink" title="5.1.1 注意图片是.png还是.PNG，在本地测试无关，在Github上区分大小写。"></a>5.1.1 注意图片是<code>.png</code>还是<code>.PNG</code>，在本地测试无关，在Github上区分大小写。</h5><h5 id="5-1-2-直接找html文件看路径是否正确，路径可能不支持中文。"><a href="#5-1-2-直接找html文件看路径是否正确，路径可能不支持中文。" class="headerlink" title="5.1.2 直接找html文件看路径是否正确，路径可能不支持中文。"></a>5.1.2 直接找<code>html</code>文件看路径是否正确，路径可能不支持中文。</h5><h3 id="5-2-hexo-g-时的报错"><a href="#5-2-hexo-g-时的报错" class="headerlink" title="5.2 hexo g 时的报错"></a>5.2 hexo g 时的报错</h3><p>报错内容如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">FATAL &#123;<br>  err: Template render error: (unknown path)<br>    Error: expected end of comment, got end of file<br>      at Object._prettifyError (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\l</span>ib.js:36:11)<br>      at Template.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:538:21)<br>      at Environment.renderString (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:380:17)<br>      at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:236:16<br>      at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>      at Function.Promise.fromNode.Promise.fromCallback (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:209:30)<br>      at Tag.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:235:20)<br>      at Object.onRenderEnd (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\p</span>ost.js:297:22)<br>      at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\r</span>ender.js:79:21<br>      at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>      at Promise._settlePromiseFromHandler (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:547:31)<br>      at Promise._settlePromise (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:604:18)<br>      at Promise._settlePromise0 (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:649:10)<br>      at Promise._settlePromises (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:729:18)<br>      at _drainQueueStep (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:93:12)<br>      at _drainQueue (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:86:9)<br>      at Async._drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:102:5)<br>      at Immediate.Async.drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:15:14)<br>      at processImmediate (internal/timers.js:462:21) &#123;<br>    cause: Template render error: (unknown path)<br>      Error: expected end of comment, got end of file<br>        at Object._prettifyError (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\l</span>ib.js:36:11)<br>        at Template.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:538:21)<br>        at Environment.renderString (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\n</span>unjucks<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\e</span>nvironment.js:380:17)<br>        at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:236:16<br>        at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>        at Function.Promise.fromNode.Promise.fromCallback (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:209:30)<br>        at Tag.render (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\e</span>xtend<span class="hljs-symbol">\t</span>ag.js:235:20)<br>        at Object.onRenderEnd (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\p</span>ost.js:297:22)<br>        at D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\h</span>exo<span class="hljs-symbol">\r</span>ender.js:79:21<br>        at tryCatcher (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\u</span>til.js:16:23)<br>        at Promise._settlePromiseFromHandler (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:547:31)<br>        at Promise._settlePromise (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:604:18)<br>        at Promise._settlePromise0 (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:649:10)<br>        at Promise._settlePromises (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\p</span>romise.js:729:18)<br>        at _drainQueueStep (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:93:12)<br>        at _drainQueue (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:86:9)<br>        at Async._drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:102:5)<br>        at Immediate.Async.drainQueues (D:<span class="hljs-symbol">\H</span>exo<span class="hljs-symbol">\n</span>ode_modules<span class="hljs-symbol">\b</span>luebird<span class="hljs-symbol">\j</span>s<span class="hljs-symbol">\r</span>elease<span class="hljs-symbol">\a</span>sync.js:15:14)<br>        at processImmediate (internal/timers.js:462:21),<br>    isOperational: true<br>  &#125;<br>&#125; Something&#x27;s wrong. Maybe you can find the solution here: <span class="hljs-variable">%s https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-variable"></span><br></code></pre></td></tr></table></figure><p>主要报错要看</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">err: <span class="hljs-keyword">Template</span> render error: (<span class="hljs-type">unknown</span> <span class="hljs-keyword">path</span>)<br>   Error: expected <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">comment</span>, got <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> file<br></code></pre></td></tr></table></figure><p>错误原因：Markdown文件中存在不能转义的字符<br>例如：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<span class="hljs-meta">#</span><br><span class="hljs-meta"># <span class="hljs-comment">//#单独出现</span></span><br></code></pre></td></tr></table></figure><h3 id="5-3-希腊字母和数学符号无法在网页显示"><a href="#5-3-希腊字母和数学符号无法在网页显示" class="headerlink" title="5.3 希腊字母和数学符号无法在网页显示"></a>5.3 希腊字母和数学符号无法在网页显示</h3><p>错误原因：使用Markdown语法写的希腊字母在转义成HTML时，无法被HTML识别<br><br><br>解决办法：直接在Markdown里面使用HTML语法的希腊字母和数学符号即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web前端开发学习</title>
    <link href="/2021/04/25/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/25/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>仅用于自己学习时知识点的整理<br>学习视频：<a href="https://www.bilibili.com/video/BV1QW411N762?p=11">鱼C-小甲鱼</a></p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p>q元素<br>用于定义比较短的元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>q元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>孔子有云：<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>学而不思则罔，思而不学则殆<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>blockquote元素<br>通过缩进的形式区分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blockquote元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>未被引用段<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>被引用段<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>cite元素<br>用于定义作品的标题，默认为斜体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>CITE元素<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>abbr元素<br>用于定义缩写，与全局属性title配合使用可展示完整含义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>abbr元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abbreviate&quot;</span>&gt;</span>abbr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>dfn元素<br>用于定义术语（试了一下，默认也是斜体）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>abbr元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abbreviate&quot;</span>&gt;</span>abbr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>address元素<br>用于定义联系信息的元素，默认斜体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>address元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度网址<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>ruby、rt、rp元素<br>rt：用于标记注音符号<br>rp：当浏览器不支持ruby替代的显示内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ruby元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>我<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>wǒ<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>爱<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ài<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>上<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>shàng<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>海<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>hǎi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>bdo元素<br>具有dir属性，有两个值：<br><code>lfr</code>(left to right)：为默认的<br><code>rtl</code>(right to left)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>bdo元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bdo</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;rtl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>从右往左<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>我<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>wǒ<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>爱<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ài<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>上<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>shàng<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>海<span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>hǎi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bdo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="样式格式"><a href="#样式格式" class="headerlink" title="样式格式"></a>样式格式</h2></li><li><p>粗体<br>strong元素：粗体+表示重要的含义<br>b元素：仅表示粗体</p></li><li><p>斜体<br>em元素：斜体+表示强调的含义<br>i元素：仅表示斜体</p></li></ul><p><strong>也使用css样式表来代替实现b和i元素</strong></p><ul><li>del元素<br><del>删除内容</del><br>含义正确，只是做一个更新</li><li>ins元素<br>改为下划线</li><li>s元素<br><del>删除内容</del><br>含义不正确</li><li>u元素<br>下划线，含义为拼写错误的单词或者汉语的专有名词。</li><li>mark元素<br>标记文本的作用，默认黄色<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>mark元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>标记1<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>标记2<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>sup元素<br>表示上标</li><li>sub元素<br>表示下标</li><li>small元素<br>把文本变小</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>无序列表(Unordered List)<br><code>ul</code>来定义列表<br><code>li</code>来包裹列表项<br>左边默认为 ：</li></ul><p><strong>·</strong> 这样的样式<br><strong>·</strong> 这样的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Unordered List<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Element3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>有序列表(Ordered List)<br><code>ol</code>来定义列表<br><code>li</code>来包裹列表项<br>左边默认为 ：</li></ul><p><strong>1.</strong> 这样的样式<br><strong>2.</strong> 这样的样式</p><ul><li>表格<br><code>tr</code>来定义表格</li></ul><p><em>HTML5之后的表格边框样式都要使用CSS来实现：</em><br><code>border</code>属性<br><code>border-collapse</code>属性-用于合并边框线</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li>一个简单的表单<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>一个简单的表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;welcome.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>名字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>br&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><code>text</code>：明文<br><code>method</code>：post(将参数整合到url中)/post<br><code>bottom</code>：submmit/bottom/reset；可以覆盖表单的一些属性（formmethod）<br><code>autocomplete</code>：浏览器是否帮你自动填充<br><code>value</code>：设置默认值<br><code>autofocus</code>：会自动聚焦到某个input框<br><code>disable</code>：禁用元素，FormData不提交这个数据了<br><code>readonly</code>：不允许修改默认值，FormData依然提交这个数据</li></ul><hr><p><code>fieldset</code>：分组元素 -&gt; <code>legend</code>：fieldset子元素，用于设计分组的title<br><code>select</code>&amp;<code>option</code>：用于实现下拉框<br><code>optgroup</code>：对下拉框进行分组</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>组合计数</title>
    <link href="/2020/01/09/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    <url>/2020/01/09/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="组合计数-专题"><a href="#组合计数-专题" class="headerlink" title="组合计数-专题"></a>组合计数-专题</h1><hr><h2 id="·-模运算"><a href="#·-模运算" class="headerlink" title="· 模运算"></a>· 模运算</h2><p><strong>性质</strong>：</p><ol><li>(a + b)%p=(a%p + b%p)%p</li><li>(a * b)%p=((a%p)*(b%p))%p<br>【性质不适用于==除法==】</li></ol><p>   <strong>除法处理方式</strong>：<br>   <strong>公式</strong>：(b/a)%p=(b*a^(p-2)^)%p</p><h3 id="例题（A-B-HDU-1576）"><a href="#例题（A-B-HDU-1576）" class="headerlink" title="例题（A/B-HDU-1576）"></a>例题（A/B-HDU-1576）</h3><p> <strong>题目</strong>：<br>要求(A/B)%9973，但由于A很大，我们只给出n(n=A%9973)(我们给定的A必能被B整除，且gcd(B,9973) = 1)。  </p><p><strong>样例输入</strong>：<br>2<br>1000 53<br>87 123456789</p><p><strong>样例输出</strong>：<br>7922<br>6060</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> mod)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> b1=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9971</span>;i++)<br>    &#123;<br>        b1=(b1*b)%mod;<br>    &#125;<br>    ans=(n*b1)%<span class="hljs-number">9973</span>;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,b;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">int</span> ans;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n&gt;&gt;b;<br>        ans=<span class="hljs-built_in">mod</span>(n,b,<span class="hljs-number">9973</span>);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>o(´^｀)o ~ 此处有待更新</p><hr><h2 id="·组合数求法"><a href="#·组合数求法" class="headerlink" title="·组合数求法"></a>·组合数求法</h2><ol><li>杨辉三角：C(n,m) = C(n-1,m) +C(n-1,m-1)</li><li>公式：C(n,m)=n! / m! / (n-m)!<br>【大约 20！就到达了10^18^】</li></ol><p><strong>思考</strong>：<br>通常题目中的数据不会小于20，该如何避免强行计算阶乘 。</p><h3 id="例题（Divisors-POJ-2992）"><a href="#例题（Divisors-POJ-2992）" class="headerlink" title="例题（Divisors-POJ-2992）"></a>例题（Divisors-POJ-2992）</h3><p><strong>题目</strong>：<br>Your task in this problem is to determine the number of divisors of C(n,k). Just for fun – or do you need any special reason for such a useful computation?</p><p><strong>Input</strong>：<br>The input consists of several instances. Each instance consists of a single line containing two integers n and k (0 ≤ k ≤ n ≤ 431), separated by a single space.</p><p><strong>Output</strong>：<br>For each instance, output a line containing exactly one integer – the number of distinct divisors of C(n,k). For the input instances, this number does not exceed 2^63^ - 1.</p><p><strong>样例输入</strong>：<br>5 1<br>6 3<br>10 4</p><p><strong>样例输出</strong>：<br>2<br>6<br>16</p><p><strong>思考</strong>：</p><ol><li>避开计算C(n,k)</li><li>打表素数</li><li>整数 n 的拆分: n=p<del>1</del>^a1^ p<del>2</del>^a2^ p<del>3</del>^a3^… p<del>m</del>^am^</li><li>计算指数：a<del>1</del> = n / p<del>1</del> + n / p<del>1</del>^2^ + n / p<del>1</del>^3^+… </li><li>n! 的因子个数：(a<del>1</del>+1) * (a<del>2</del>+1)  * … * (a<del>m</del>+1)</li><li>C(n,k)=n! / k! / (n-k)! 的因子数：<br>[(a<del>1n</del>-a<del>1k</del>-a<del>1(n-k)</del>)+1] * [(a<del>2n</del>-a<del>2k</del>-a<del>2(n-k)</del>)+1]  * … * [(a<del>mn</del>-a<del>mk</del>-a<del>m(n-k)</del>)+1]</li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> primenums[<span class="hljs-number">450</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//打表</span><br>    <span class="hljs-keyword">int</span> cot=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">450</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||i==<span class="hljs-number">2</span>)<br>        &#123;<br>            primenums[cot]=i;<br>            cot++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-built_in">sqrt</span>(i);j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)<br>                &#123;<br>                    flag=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>            &#123;<br>                primenums[cot]=i;<br>                cot++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">coot2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//计算指数个数</span><br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        ans=ans+n/p;<br>        n=n/p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">coot1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//计算约数个数</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(primenums[i]&lt;=n)<br>    &#123;<br>        ans=ans*(<span class="hljs-built_in">coot2</span>(n,primenums[i])-<span class="hljs-built_in">coot2</span>(k,primenums[i])-<span class="hljs-built_in">coot2</span>(n-k,primenums[i])+<span class="hljs-number">1</span>);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,k;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans;<br>    <span class="hljs-built_in">prime</span>();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k)==<span class="hljs-number">2</span>)<br>    &#123;<br><br>        ans=<span class="hljs-built_in">coot1</span>(n,k);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举排列</title>
    <link href="/2020/01/07/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97%E6%B3%95/"/>
    <url>/2020/01/07/%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%88%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举排列"><a href="#枚举排列" class="headerlink" title="枚举排列"></a>枚举排列</h1><p><strong>题目</strong>：输入正整数 n ，按照字典序从小到大的顺序的前 n 个数的所有排列。</p><p><strong>提示</strong>：两个序列字典序关系大小关系等价于从头开始第一个不相同位置大小关系。（即： {1,3,2} &lt; {2,1,3} ）</p><hr><h2 id="·-生成-1-n-的排列"><a href="#·-生成-1-n-的排列" class="headerlink" title="· 生成 1 ~ n 的排列"></a>· 生成 1 ~ n 的排列</h2><p><strong>思考</strong>：<br>以 1 开头的排列开始讨论：第一位是 1，后面 2~9 按照字典序排序，2 ~ 9 的排列又符合 ：以 2 开头的排列。<br>(出现了！是你！递归！)</p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_permutation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> A[],<span class="hljs-keyword">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(cur==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,A[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;cur;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(A[j]==i)<br>                    flag=<span class="hljs-number">0</span>;<br>            &#125;        <br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                A[cur]=i;<br>                <span class="hljs-built_in">print_permutation</span>(n,A,cur+<span class="hljs-number">1</span>);<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> A[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">print_permutation</span>(n,A,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二级指针</title>
    <link href="/2019/11/28/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/"/>
    <url>/2019/11/28/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><p><strong>笔记</strong>：</p><ol><li>**p 指向值</li><li>*p 指向1级指针地址</li><li>p 二级指针地址</li></ol><p><strong>代码测试</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **i,<span class="hljs-keyword">int</span> **j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Before:%d %d\n&quot;</span>,*i,*j);<br>    <span class="hljs-keyword">int</span> *t;<br>    t=*i;<br>    *i=*j;<br>    *j=t;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After:%d %d\n&quot;</span>,*i,*j);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">4</span>,b=<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">int</span> *p1=&amp;a,*p2=&amp;b;<br>    <span class="hljs-keyword">int</span> **p3=&amp;p1,**p4=&amp;p2;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BeforeSwap:%d %d\n&quot;</span>,p1,p2);<br>    <span class="hljs-built_in">Swap</span>(p3,p4);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AfterSwap:%d %d\n&quot;</span>,p1,p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,*p1,*p2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CPlusPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暴力求解法</title>
    <link href="/2019/11/27/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3%E6%B3%95/"/>
    <url>/2019/11/27/%E6%9A%B4%E5%8A%9B%E6%B1%82%E8%A7%A3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="暴力求解法"><a href="#暴力求解法" class="headerlink" title="暴力求解法"></a>暴力求解法</h1><h2 id="2019-11-26"><a href="#2019-11-26" class="headerlink" title="2019/11/26"></a>2019/11/26</h2><p>第一次通过写博客来记录自己的学习进程。<br>在之前的学习过程中，<br>深刻认识到我应该与自己的键盘多多培养感情。</p><p>于是，放下我的纸笔，开始写这第一篇博客。</p><h3 id="除法（Division，UVa-725）"><a href="#除法（Division，UVa-725）" class="headerlink" title="除法（Division，UVa 725）"></a>除法（Division，UVa 725）</h3><p><strong>题目</strong>：<br>输入整数n，按从小到大的顺序输出所有形如 <strong>abcde/ fghij = n</strong>  的表达式，其中 a ~ j 恰好为数字 0 ~ 9 的一个排列（可以有前导0），2&lt;= n &lt;= 79  。</p><p><strong>样例输入</strong>：<br>62</p><p><strong>样例输出</strong>：<br>79546 / 01283 = 62<br>94736 / 01528 = 62</p><p><strong>骚操作</strong>：</p><ol><li>使用 <strong>sprintf</strong>函数快速将两个int型数据转换成字符串并且进行拼接</li><li>按照题意，满足条件的必须是 0 ~ 9 的一个排列，因此，先进行排序，再进行判断，会更加迅速且准确。<br>（判断条件：**’0’+i**）</li><li>利用 bool 型 flag 对其是否满足条件进行标记<br>（应该属于基操）</li></ol><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">char</span> s[<span class="hljs-number">99</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> fghij=<span class="hljs-number">1234</span>;;fghij++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> abcde=fghij*n;<br>            <span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%05d%05d&quot;</span>,abcde,fghij);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(s)&gt;<span class="hljs-number">10</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-built_in">sort</span>(s,s+<span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">bool</span> flag=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i]!=<span class="hljs-string">&#x27;0&#x27;</span>+i) flag=<span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                cnt++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d / %05d = %d\n&quot;</span>,abcde,fghij,n);<br>            &#125;<br>           <br>        &#125;<br>         <span class="hljs-keyword">if</span>(!cnt)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There is no solutions!&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最大乘积（Maximum-Product-UVa-11059）"><a href="#最大乘积（Maximum-Product-UVa-11059）" class="headerlink" title="最大乘积（Maximum Product,UVa 11059）"></a>最大乘积（Maximum Product,UVa 11059）</h3><p><strong>题目</strong>：<br>输入n个元素组成的序列S，你需要找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，应输出0（表示无解）<br>1 &lt;= n &lt;= 18, -10 &lt;= Si &lt;= 10。</p><p><strong>样例输入</strong>：<br>3<br>2 4 -3<br>5<br>2 5 -1 2 -1</p><p><strong>样例输出</strong>：<br>8<br>20</p><p><strong>骚操作</strong>：</p><ol><li>数据范围：1 &lt;= n &lt;= 18, -10 &lt;= Si &lt;= 10<br>刚好最大可能乘积不超过10^18，使用 long long 存储。</li><li>从头到尾枚举，max判断大小。</li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> s[<span class="hljs-number">19</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans=<span class="hljs-number">1</span>,temp=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;s[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>         temp=temp*s[i];<br>         ans=<span class="hljs-built_in">max</span>(ans,temp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分数拆分（Fractions-Again，UVa-10976）"><a href="#分数拆分（Fractions-Again，UVa-10976）" class="headerlink" title="分数拆分（Fractions Again，UVa 10976）"></a>分数拆分（Fractions Again，UVa 10976）</h3><p><strong>题目</strong>：<br>输入正整数k,找到所有的正整数x&gt;=y,使得 1 / k = 1 / x + 1 / y </p><p><strong>样例输入</strong>：<br>2<br>12</p><p><strong>样例输出</strong>：<br> 2<br>1 / 2 = 1 / 6 +1 / 3<br>1 / 2 = 1 / 4 +1 / 4<br>8<br>1 / 12 = 1 / 156 +1 / 13<br>1 / 12 = 1 / 84 +1 / 14<br>1 / 12 = 1 / 60 +1 / 15<br>1 / 12 = 1 / 48 +1 / 16<br>1 / 12 = 1 / 36 +1 / 18<br>1 / 12 = 1 / 30 +1 / 20<br>1 / 12 = 1 / 28 +1 / 21<br>1 / 12 = 1 / 24 +1 / 24</p><p><strong>骚操作</strong>：</p><ol><li>由于 x &gt;= y ,有 1 / x &lt;= 1 / y ,因此 1 / k - 1 / y &lt;= 1 / y<br>即 y &lt;= 2k (暴力枚举)  </li></ol><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k)==<span class="hljs-number">1</span> &amp;&amp; k)<br>    &#123;<br>        <span class="hljs-keyword">int</span> kase=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">float</span> x=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>],b[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">float</span> i=k+<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*k;i++)<br>        &#123;<br>            x=(i*k)/(i-k);<br>            <span class="hljs-keyword">int</span> temp;<br>            temp = (<span class="hljs-keyword">int</span>) x;<br>            <span class="hljs-keyword">if</span>(x==temp)<br>            &#123;<br>                kase++;<br>                a[j]=x;<br>                b[j]=i;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,kase);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;j;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 / %d = 1 / %d +1 / %d\n&quot;</span>,k,a[i],b[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
